wf := import("@platforma-sdk/workflow-tengo:workflow")
smart := import("@platforma-sdk/workflow-tengo:smart")
ll := import("@platforma-sdk/workflow-tengo:ll")
pConstants := import("@platforma-sdk/workflow-tengo:pframes.constants")
file := import("@platforma-sdk/workflow-tengo:file")

json := import("json")

mapToPValueData := func(map) {
	data := {}
	for key, value in map {
		data[json.encode([key])] = value
	}
	result := {
		keyLength: 1,
		data: data
	}
	return result
}


createJsonPColumnData := func(data) {
	return smart.createValueResource(pConstants.RTYPE_P_COLUMN_DATA_JSON, data)
}

isNumber := func(val) {
    return is_int(val) || is_float(val)
}

wf.body(func(args) {
	blockId := wf.blockId().getDataAsJson()

	for elem in args.numbers {
    if !isNumber(elem) {
        ll.panic("Only numbers are allowed!")
    }
	}

	numbersMap := {}

	for i, v in args.numbers {
		numbersMap[string(i)] = v
	}

	numbers := []

	for i, v in args.numbers {
		numbers = append(numbers, v)
	}

	progresses := {}
	for index, handle in args.handles {
		if !is_undefined(handle) {
			result := file.importFile(handle)
			progresses[handle] = result.handle
		}
	}

	return {
		outputs: {
			numbers: smart.createJsonResource(numbers),
			progresses: progresses
		},
		exports: {
			numbers: {
				spec: {
					kind: "PColumn",
					name: "pl7.app/test/numbers",
					valueType: "Double",
					annotations: {
						"pl7.app/label": "Numbers"
					},
					domain: {
						"pl7.app/blockId": blockId
					},
					axesSpec: [{
						type: "String",
						name: "pl7.app/test/numberIndex",
						annotations: {
							"pl7.app/label": "Index"
						},
						domain: {
							"pl7.app/blockId": blockId
						}
					}]
				},
				data: createJsonPColumnData(json.encode(mapToPValueData(numbersMap)))
			}
		}
	}
})
