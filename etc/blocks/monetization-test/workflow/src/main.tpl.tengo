/** Runs a hello world with a turned on monetization, and returns a jwt token. */

self := import("@platforma-sdk/workflow-tengo:workflow")
assets := import("@platforma-sdk/workflow-tengo:assets")
smart := import("@platforma-sdk/workflow-tengo:smart")
exec := import("@platforma-sdk/workflow-tengo:exec")
json := import("json")
ll := import("@platforma-sdk/workflow-tengo:ll")
text := import("text")
file := import("@platforma-sdk/workflow-tengo:file")

self.setPreRun(assets.importTemplate(":pre-run"))

self.body(func(inputs) {
	if inputs.shouldAddRunPerFile {
		tokens := {}
		progresses := {}
		for _, handle in inputs.inputHandles {
			result := file.importFile(handle.handle)
			progresses[handle.fileName] = result.handle

			// TODO: it should be changed to software that prints an env.
			builder := exec.builder().
				cpu(1).ram("50Mi").
				cmd("/usr/bin/env").
				arg("bash").
				arg("-c").
				arg("echo -n $PLATFORMA_MNZ_JWT").
				enableMnz(inputs.productKey).
				saveStdoutContent()

			builder.addFile(handle.fileName, result.file, {mnz: {
				arg: handle.argName,
				metrics: handle.options
			}})

			run := builder.run()

			tokens[handle.fileName] = run.getStdoutFileContent()
		}

		return {
			outputs: {
				token: tokens,
				progresses: progresses
			},
			exports: {}
		}
	}

	// TODO: it should be changed to software that prints an env.
	builder := exec.builder().
		cpu(1).ram("50Mi").
		cmd("/usr/bin/env").
		arg("bash").
		arg("-c").
		arg("echo -n $PLATFORMA_MNZ_JWT").
		enableMnz(inputs.productKey).
		saveStdoutContent()

	progresses := {}
	for _, handle in inputs.inputHandles {
		result := file.importFile(handle.handle)
		progresses[handle.fileName] = result.handle

		builder.addFile(handle.fileName, result.file, {mnz: {
			arg: handle.argName,
			metrics: handle.options
		}})
	}

	run := builder.run()

	return {
		outputs: {
			token: {"single_run": run.getStdoutFileContent()},
			progresses: progresses
		},
		exports: {}
	}
})
