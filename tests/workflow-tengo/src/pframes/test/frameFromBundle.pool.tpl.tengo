wf := import("@platforma-sdk/workflow-tengo:workflow")
ll := import("@platforma-sdk/workflow-tengo:ll")
pt := import("@platforma-sdk/workflow-tengo:pt")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
maps := import("@platforma-sdk/workflow-tengo:maps")
exec := import("@platforma-sdk/workflow-tengo:exec")
pframes := import("@platforma-sdk/workflow-tengo:pframes")

sampleIdAxesSpec := {
    name: "sampleId",
    type: "String"
}

cellIdAxesSpec := {
    name: "cellId",
    type: "String"
}

geneIdAxesSpec := {
    name: "geneId",
    type: "String"
}

clusterResolutionSpec := {
    kind: "PColumn",
    name: "clusterResolution",
    valueType: "String",
    axesSpec: [
        sampleIdAxesSpec
    ]
}
clusterResolutionCSV := `sampleId,clusterResolution
1,CL-1
2,CL-2
3,CL-3`

totalCountsSpec := {
    kind: "PColumn",
    name: "totalCounts",
    valueType: "Int",
    axesSpec: [
        sampleIdAxesSpec,
        cellIdAxesSpec
    ]
}
totalCountsCSV := `sampleId,cellId,totalCounts
1,cell_1,3000
1,cell_2,4000
1,cell_3,3500
2,cell_1,5000
2,cell_2,6000
2,cell_3,5500
3,cell_1,7000
3,cell_2,8000
3,cell_3,7500`

complexitySpec := {
    kind: "PColumn",
    name: "complexity",
    valueType: "Float",
    axesSpec: [
        sampleIdAxesSpec,
        cellIdAxesSpec,
        geneIdAxesSpec
    ]
}
complexityCSV := `sampleId,cellId,geneId,complexity
1,cell_1,gene_1,0.75
1,cell_1,gene_2,0.710
1,cell_1,gene_3,0.815
1,cell_2,gene_1,0.87
1,cell_2,gene_2,0.711
1,cell_2,gene_3,0.513
1,cell_3,gene_1,0.58
1,cell_3,gene_2,0.712
1,cell_3,gene_3,0.914
2,cell_1,gene_1,0.920
2,cell_1,gene_2,0.925
2,cell_1,gene_3,0.730
2,cell_2,gene_1,0.522
2,cell_2,gene_2,0.227
2,cell_2,gene_3,0.932
2,cell_3,gene_1,0.324
2,cell_3,gene_2,0.929
2,cell_3,gene_3,0.934
3,cell_1,gene_1,0.120
3,cell_1,gene_2,0.125
3,cell_1,gene_3,0.330
3,cell_2,gene_1,0.122
3,cell_2,gene_2,0.527
3,cell_2,gene_3,0.132
3,cell_3,gene_1,0.824
3,cell_3,gene_2,0.629
3,cell_3,gene_3,0.534`

expressionSpec := {
    kind: "PColumn",
    name: "expression",
    valueType: "Float",
    axesSpec: [
        sampleIdAxesSpec,
        cellIdAxesSpec,
        geneIdAxesSpec
    ]
}
expressionCSV := `sampleId,cellId,geneId,expression
1,cell_1,gene_1,5
1,cell_1,gene_2,10
1,cell_1,gene_3,15
1,cell_2,gene_1,7
1,cell_2,gene_2,11
1,cell_2,gene_3,13
1,cell_3,gene_1,8
1,cell_3,gene_2,12
1,cell_3,gene_3,14
2,cell_1,gene_1,20
2,cell_1,gene_2,25
2,cell_1,gene_3,30
2,cell_2,gene_1,22
2,cell_2,gene_2,27
2,cell_2,gene_3,32
2,cell_3,gene_1,24
2,cell_3,gene_2,29
2,cell_3,gene_3,34
3,cell_1,gene_1,120
3,cell_1,gene_2,125
3,cell_1,gene_3,130
3,cell_2,gene_1,122
3,cell_2,gene_2,127
3,cell_2,gene_3,132
3,cell_3,gene_1,124
3,cell_3,gene_2,129
3,cell_3,gene_3,134`

createCSVFile := func(csv) {
    return exec.builder().
        cpu(1).ram("50Mi").
        cmd("env").
        writeFile("data.csv", csv).
        saveFile("data.csv").
        run().
        getFile("data.csv")
}

createPColumnsMap := func (csv, axes, columns) {
    return xsv.importFile(createCSVFile(csv), "csv", {
        axes: axes,
        columns: columns
    }, { splitDataAndSpec: true })
}

convertMapToPFrame := func(mapEntities) {
	pf := pframes.pFrameBuilder()

	for k, v in mapEntities {
		pf.add(k, v.spec, v.data)
	}

	return pf.build()
}

wf.body(func(inputs) {
	clusterResolution := createPColumnsMap(clusterResolutionCSV, [{ column: "sampleId", spec: sampleIdAxesSpec }], [{ column: "clusterResolution", spec: clusterResolutionSpec }])
    totalCounts := createPColumnsMap(totalCountsCSV, [{ column: "sampleId", spec: sampleIdAxesSpec }, { column: "cellId", spec: cellIdAxesSpec }], [{ column: "totalCounts", spec: totalCountsSpec }])
    complexity := createPColumnsMap(complexityCSV, [{ column: "sampleId", spec: sampleIdAxesSpec }, { column: "cellId", spec: cellIdAxesSpec }, { column: "geneId", spec: geneIdAxesSpec }], [{ column: "complexity", spec: complexitySpec }])
    expression := createPColumnsMap(expressionCSV, [{ column: "sampleId", spec: sampleIdAxesSpec }, { column: "cellId", spec: cellIdAxesSpec }, { column: "geneId", spec: geneIdAxesSpec }], [{ column: "expression", spec: expressionSpec }])

	return {
		exports: {
            data: convertMapToPFrame(maps.merge(clusterResolution, totalCounts, complexity, expression))
        },
        outputs: {}
	}
})
