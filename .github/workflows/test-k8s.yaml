name: Test K8S
on:
  merge_group:
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - 'main'
  push:
    branches:
      - 'main'
  workflow_dispatch: {}
jobs:
  init:
    runs-on: ubuntu-latest
    steps:
      - uses: milaboratory/github-ci/actions/context/init@v4-beta
        with:
          version-canonize: false
          branch-versioning: main
  run:
    needs:
      - init
    uses: milaboratory/github-ci/.github/workflows/node-simple-pnpm-k8s.yaml@v4-beta
    with:
      app-name: Platforma SDK Ggoogle Batch Int Tests
      app-name-slug: 'platforma-sdk-gcp'
      gha-runner-label: 'dev-gke'
      node-version: '20.x'
      pl-version: 'main'
      pnpm-build-command: '--filter "*/workflow-tengo*"'
      pnpm-test-command: '--filter "*/workflow-tengo-tests" -- --testTimeout=300000 exec.test.ts'
      helm-release-name: 'pl-dev-gcp'
      helm-chart-values-file: 'helm/gcp/values.yaml'
      namespace: 'dev-gke'
      npmrc-config: |
        {
          "registries": {
            "https://registry.npmjs.org/": {
              "scopes": ["milaboratories", "platforma-sdk"],
              "tokenVar": "NPMJS_TOKEN"
            },
            "https://npm.pkg.github.com/": {
              "scopes": ["milaboratory"],
              "tokenVar": "NODE_AUTH_TOKEN"
            }
          }
        }
      env: |
        { "BODY_LIMIT": "1048576000" }
    secrets:
      env: |
        { "PL_CI_TEST_USER": ${{ toJSON(secrets.PL_CI_TEST_USER) }},
          "PL_CI_TEST_PASSWORD": ${{ toJSON(secrets.PL_CI_TEST_PASSWORD) }},
          "NPMJS_TOKEN": ${{ toJSON(secrets.NPMJS_TOKEN) }},
          "GCLOUD_CI_GKE_BUCKET_NAME": ${{ toJSON(secrets.GCLOUD_CI_GKE_BUCKET_NAME) }},
          "GCLOUD_CI_GKE_REGION": ${{ toJSON(secrets.GCLOUD_CI_GKE_REGION) }},
          "GCLOUD_CI_GKE_PROJECT_ID": ${{ toJSON(secrets.GCLOUD_CI_GKE_PROJECT_ID) }},
          "GCLOUD_CI_GKE_NETWORK": ${{ toJSON(secrets.GCLOUD_CI_GKE_NETWORK) }},
          "GCLOUD_CI_GKE_SUBNETWORK": ${{ toJSON(secrets.GCLOUD_CI_GKE_SUBNETWORK) }} }

      TELEGRAM_NOTIFICATION_TARGET: ${{ secrets.TG_CHANNEL_MIBUILDS }}
      TELEGRAM_API_TOKEN: ${{ secrets.TG_CI_BOT_TOKEN }}
