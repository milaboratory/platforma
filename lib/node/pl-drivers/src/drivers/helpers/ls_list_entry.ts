import { MiLogger, notEmpty, Signer } from '@milaboratories/ts-helpers';
import * as sdk from '@milaboratories/pl-model-common';
import { Timestamp } from '../../proto/google/protobuf/timestamp';
import { Dirent, Stats } from 'node:fs';

/** A duck-typing interface for grpc results. */
export interface ListResponse {
  items: ListItem[];
  delimiter: string;
}

export interface ListItem {
  isDir: boolean;
  name: string;
  fullName: string;
  lastModified?: Timestamp;
  size: bigint;
  directory: string;
}

/**  */
export function toLsEntries(info: {
  storageName: string;
  list: ListResponse;
  signer: Signer;
  remote: boolean;
}): sdk.ListFilesResult {
  const parent =
    info.list.items.length > 0 ? info.list.items[0]?.directory : undefined;

  return {
    parent: parent,
    entries: info.list.items.map((item) => toLsEntry(item, info))
  };
}

function toLsEntry(
  item: ListItem,
  info: {
    storageName: string;
    list: ListResponse;
    signer: Signer;
    remote: boolean;
  }
): sdk.LsEntry {
  if (item.isDir)
    return {
      type: 'dir',
      name: item.name,
      fullPath: item.fullName
    };

  return {
    type: 'file',
    name: item.name,
    fullPath: item.fullName,
    handle: toFileHandle({ item: item, ...info })
  };
}

export function toFileHandle(info: {
  storageName: string;
  item: ListItem;
  signer: Signer;
  remote: boolean;
}): sdk.ImportFileHandle {
  if (info.remote) {
    return createIndexHandle(info);
  }

  return createUploadHandle(
    info.item.fullName,
    info.signer,
    info.item.size,
    notEmpty(info.item.lastModified).seconds
  );
}

export type UploadHandleData = {
  /** Local file path, to take data for upload */
  localPath: string;
  /** Path signature, to check this data was generated by us */
  pathSignature: string;
  /** File size in bytes */
  sizeBytes: string;
  /** Modification time unix timestamp in seconds */
  modificationTime: string;
};

function createIndexHandle(info: {
  storageName: string;
  item: ListItem;
}): sdk.ImportFileHandleIndex {
  const data = encodeURIComponent(
    JSON.stringify({
      storageId: info.storageName,
      path: info.item.fullName
    })
  );

  return `index://index/${data}`;
}

export function createUploadHandle(
  localPath: string,
  signer: Signer,
  sizeBytes: bigint,
  modificationTimeSeconds: bigint
): sdk.ImportFileHandleUpload {
  const data: UploadHandleData = {
    localPath,
    pathSignature: signer.sign(localPath),
    sizeBytes: String(sizeBytes),
    modificationTime: String(modificationTimeSeconds)
  };

  return `upload://upload/${encodeURIComponent(JSON.stringify(data))}` as sdk.ImportFileHandleUpload;
}

export function fromFileHandle(handle: sdk.ImportFileHandle) {
  const url = new URL(handle);
  return JSON.parse(decodeURIComponent(url.pathname.substring(1)));
}

export function toListItem(
  logger: MiLogger,
  info: {
    directory: string;
    fullName: string;
    dirent: Dirent;
    stat: Stats;
  }
): ListItem | undefined {
  if (!(info.dirent.isFile() || info.dirent.isDirectory())) {
    logger.warn(
      `tried to get non-dir and non-file ${info.dirent.name}, skip it`
    );
    return;
  }

  return {
    directory: info.directory,
    isDir: info.dirent.isDirectory(),
    name: info.dirent.name,
    fullName: info.fullName,
    lastModified: {
      seconds: BigInt(Math.floor(info.stat.mtimeMs / 1000)),
      nanos: 0
    },
    size: BigInt(info.stat.size)
  };
}
