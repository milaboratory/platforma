// @generated by protobuf-ts 2.9.4 with parameter client_generic,optimize_speed,generate_dependencies,force_server_none
// @generated from protobuf file "github.com/milaboratory/pl/controllers/shared/grpc/uploadapi/protocol.proto" (package "MiLaboratories.Controller.Shared", syntax proto3)
// tslint:disable
import type { RpcTransport } from '@protobuf-ts/runtime-rpc';
import type { ServiceInfo } from '@protobuf-ts/runtime-rpc';
import { Upload } from './protocol';
import type { uploadapi_Finalize_Response } from './protocol';
import type { uploadapi_Finalize_Request } from './protocol';
import type { uploadapi_UpdateProgress_Response } from './protocol';
import type { uploadapi_UpdateProgress_Request } from './protocol';
import type { uploadapi_GetPartURL_Response } from './protocol';
import type { uploadapi_GetPartURL_Request } from './protocol';
import { stackIntercept } from '@protobuf-ts/runtime-rpc';
import type { uploadapi_Init_Response } from './protocol';
import type { uploadapi_Init_Request } from './protocol';
import type { UnaryCall } from '@protobuf-ts/runtime-rpc';
import type { RpcOptions } from '@protobuf-ts/runtime-rpc';
/**
 *
 * Upload provides access to data upload feature, allowing clients to uplad data to Platforma.
 *
 *
 * @generated from protobuf service MiLaboratories.Controller.Shared.Upload
 */
export interface IUploadClient {
  /**
   *
   * Init upload, making controller to do all required preparation steps.
   *
   *
   * @generated from protobuf rpc: Init(MiLaboratories.Controller.Shared.uploadapi.Init.Request) returns (MiLaboratories.Controller.Shared.uploadapi.Init.Response);
   */
  init(
    input: uploadapi_Init_Request,
    options?: RpcOptions
  ): UnaryCall<uploadapi_Init_Request, uploadapi_Init_Response>;
  /**
   *
   * GetPartURL provides URL for uploading chunk of the data.
   * Clients are expected to put their data directly to the given location.
   *
   *
   * @generated from protobuf rpc: GetPartURL(MiLaboratories.Controller.Shared.uploadapi.GetPartURL.Request) returns (MiLaboratories.Controller.Shared.uploadapi.GetPartURL.Response);
   */
  getPartURL(
    input: uploadapi_GetPartURL_Request,
    options?: RpcOptions
  ): UnaryCall<uploadapi_GetPartURL_Request, uploadapi_GetPartURL_Response>;
  /**
   *
   * UpdateProgress of the upload, so other clients can see how it is going.
   *
   *
   * @generated from protobuf rpc: UpdateProgress(MiLaboratories.Controller.Shared.uploadapi.UpdateProgress.Request) returns (MiLaboratories.Controller.Shared.uploadapi.UpdateProgress.Response);
   */
  updateProgress(
    input: uploadapi_UpdateProgress_Request,
    options?: RpcOptions
  ): UnaryCall<
    uploadapi_UpdateProgress_Request,
    uploadapi_UpdateProgress_Response
  >;
  /**
   *
   * Finalize informs Controller that the upload process is done.
   * Returns an error, if the total size of all uploaded chunks is not equal to
   * size of the upload given in Init.
   *
   *
   * @generated from protobuf rpc: Finalize(MiLaboratories.Controller.Shared.uploadapi.Finalize.Request) returns (MiLaboratories.Controller.Shared.uploadapi.Finalize.Response);
   */
  finalize(
    input: uploadapi_Finalize_Request,
    options?: RpcOptions
  ): UnaryCall<uploadapi_Finalize_Request, uploadapi_Finalize_Response>;
}
/**
 *
 * Upload provides access to data upload feature, allowing clients to uplad data to Platforma.
 *
 *
 * @generated from protobuf service MiLaboratories.Controller.Shared.Upload
 */
export class UploadClient implements IUploadClient, ServiceInfo {
  typeName = Upload.typeName;
  methods = Upload.methods;
  options = Upload.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   *
   * Init upload, making controller to do all required preparation steps.
   *
   *
   * @generated from protobuf rpc: Init(MiLaboratories.Controller.Shared.uploadapi.Init.Request) returns (MiLaboratories.Controller.Shared.uploadapi.Init.Response);
   */
  init(
    input: uploadapi_Init_Request,
    options?: RpcOptions
  ): UnaryCall<uploadapi_Init_Request, uploadapi_Init_Response> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<uploadapi_Init_Request, uploadapi_Init_Response>(
      'unary',
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   *
   * GetPartURL provides URL for uploading chunk of the data.
   * Clients are expected to put their data directly to the given location.
   *
   *
   * @generated from protobuf rpc: GetPartURL(MiLaboratories.Controller.Shared.uploadapi.GetPartURL.Request) returns (MiLaboratories.Controller.Shared.uploadapi.GetPartURL.Response);
   */
  getPartURL(
    input: uploadapi_GetPartURL_Request,
    options?: RpcOptions
  ): UnaryCall<uploadapi_GetPartURL_Request, uploadapi_GetPartURL_Response> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<
      uploadapi_GetPartURL_Request,
      uploadapi_GetPartURL_Response
    >('unary', this._transport, method, opt, input);
  }
  /**
   *
   * UpdateProgress of the upload, so other clients can see how it is going.
   *
   *
   * @generated from protobuf rpc: UpdateProgress(MiLaboratories.Controller.Shared.uploadapi.UpdateProgress.Request) returns (MiLaboratories.Controller.Shared.uploadapi.UpdateProgress.Response);
   */
  updateProgress(
    input: uploadapi_UpdateProgress_Request,
    options?: RpcOptions
  ): UnaryCall<
    uploadapi_UpdateProgress_Request,
    uploadapi_UpdateProgress_Response
  > {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<
      uploadapi_UpdateProgress_Request,
      uploadapi_UpdateProgress_Response
    >('unary', this._transport, method, opt, input);
  }
  /**
   *
   * Finalize informs Controller that the upload process is done.
   * Returns an error, if the total size of all uploaded chunks is not equal to
   * size of the upload given in Init.
   *
   *
   * @generated from protobuf rpc: Finalize(MiLaboratories.Controller.Shared.uploadapi.Finalize.Request) returns (MiLaboratories.Controller.Shared.uploadapi.Finalize.Response);
   */
  finalize(
    input: uploadapi_Finalize_Request,
    options?: RpcOptions
  ): UnaryCall<uploadapi_Finalize_Request, uploadapi_Finalize_Response> {
    const method = this.methods[3],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<
      uploadapi_Finalize_Request,
      uploadapi_Finalize_Response
    >('unary', this._transport, method, opt, input);
  }
}
