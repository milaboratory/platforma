// @generated by protobuf-ts 2.11.1 with parameter client_generic,optimize_speed,generate_dependencies,force_server_none
// @generated from protobuf file "github.com/milaboratory/pl/plapi/plapiproto/base_types.proto" (package "MiLaboratories.PL.Base", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message MiLaboratories.PL.Base.ResourceType
 */
export interface ResourceType {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * @generated from protobuf field: string version = 2
     */
    version: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.Base.FieldRef
 */
export interface FieldRef {
    /**
     * @generated from protobuf field: uint64 resource_id = 2
     */
    resourceId: bigint;
    /**
     * @generated from protobuf field: string field_name = 3
     */
    fieldName: string;
}
/**
 * @generated from protobuf enum MiLaboratories.PL.Base.FieldType
 */
export enum FieldType {
    /**
     * @generated from protobuf enum value: INVALID = 0;
     */
    INVALID = 0,
    /**
     * @generated from protobuf enum value: INPUT = 1;
     */
    INPUT = 1,
    /**
     * @generated from protobuf enum value: OUTPUT = 2;
     */
    OUTPUT = 2,
    /**
     * @generated from protobuf enum value: SERVICE = 6;
     */
    SERVICE = 6,
    /**
     * @generated from protobuf enum value: ONE_TIME_WRITABLE = 4;
     */
    ONE_TIME_WRITABLE = 4,
    /**
     * @generated from protobuf enum value: DYNAMIC = 3;
     */
    DYNAMIC = 3,
    /**
     * @generated from protobuf enum value: MULTIPLE_TIMES_WRITABLE = 5;
     */
    MULTIPLE_TIMES_WRITABLE = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class ResourceType$Type extends MessageType<ResourceType> {
    constructor() {
        super("MiLaboratories.PL.Base.ResourceType", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceType>): ResourceType {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.version = "";
        if (value !== undefined)
            reflectionMergePartial<ResourceType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceType): ResourceType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string version */ 2:
                    message.version = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string version = 2; */
        if (message.version !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.Base.ResourceType
 */
export const ResourceType = new ResourceType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldRef$Type extends MessageType<FieldRef> {
    constructor() {
        super("MiLaboratories.PL.Base.FieldRef", [
            { no: 2, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "field_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FieldRef>): FieldRef {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        message.fieldName = "";
        if (value !== undefined)
            reflectionMergePartial<FieldRef>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldRef): FieldRef {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 2:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                case /* string field_name */ 3:
                    message.fieldName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldRef, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 2; */
        if (message.resourceId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.resourceId);
        /* string field_name = 3; */
        if (message.fieldName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fieldName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.Base.FieldRef
 */
export const FieldRef = new FieldRef$Type();
