// @generated by protobuf-ts 2.9.4 with parameter client_generic,optimize_speed,generate_dependencies,force_server_none
// @generated from protobuf file "github.com/milaboratory/pl/controllers/shared/grpc/progressapi/protocol.proto" (package "MiLaboratories.Controller.Shared", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../../../../../google/protobuf/duration";
/**
 * @generated from protobuf message MiLaboratories.Controller.Shared.ProgressAPI
 */
export interface ProgressAPI {
}
/**
 * @generated from protobuf message MiLaboratories.Controller.Shared.ProgressAPI.Report
 */
export interface ProgressAPI_Report {
    /**
     * @generated from protobuf field: float progress = 1;
     */
    progress: number;
    /**
     * @generated from protobuf field: uint64 bytes_processed = 2;
     */
    bytesProcessed: bigint;
    /**
     * @generated from protobuf field: uint64 bytes_total = 3;
     */
    bytesTotal: bigint;
    /**
     * @generated from protobuf field: bool done = 4;
     */
    done: boolean;
    /**
     * Name of current progress stage (if any)
     *
     * @generated from protobuf field: string name = 5;
     */
    name: string;
}
/**
 * @generated from protobuf message MiLaboratories.Controller.Shared.ProgressAPI.GetStatus
 */
export interface ProgressAPI_GetStatus {
}
/**
 * @generated from protobuf message MiLaboratories.Controller.Shared.ProgressAPI.GetStatus.Request
 */
export interface ProgressAPI_GetStatus_Request {
    /**
     * @generated from protobuf field: uint64 resource_id = 1;
     */
    resourceId: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.Controller.Shared.ProgressAPI.GetStatus.Response
 */
export interface ProgressAPI_GetStatus_Response {
    /**
     * @generated from protobuf field: MiLaboratories.Controller.Shared.ProgressAPI.Report report = 1;
     */
    report?: ProgressAPI_Report;
}
/**
 * @generated from protobuf message MiLaboratories.Controller.Shared.ProgressAPI.RealtimeStatus
 */
export interface ProgressAPI_RealtimeStatus {
}
/**
 * @generated from protobuf message MiLaboratories.Controller.Shared.ProgressAPI.RealtimeStatus.Request
 */
export interface ProgressAPI_RealtimeStatus_Request {
    /**
     * @generated from protobuf field: uint64 resource_id = 1;
     */
    resourceId: bigint;
    /**
     * @generated from protobuf field: google.protobuf.Duration update_interval = 2;
     */
    updateInterval?: Duration;
}
/**
 * @generated from protobuf message MiLaboratories.Controller.Shared.ProgressAPI.RealtimeStatus.Response
 */
export interface ProgressAPI_RealtimeStatus_Response {
    /**
     * @generated from protobuf field: MiLaboratories.Controller.Shared.ProgressAPI.Report report = 1;
     */
    report?: ProgressAPI_Report;
}
// @generated message type with reflection information, may provide speed optimized methods
class ProgressAPI$Type extends MessageType<ProgressAPI> {
    constructor() {
        super("MiLaboratories.Controller.Shared.ProgressAPI", []);
    }
    create(value?: PartialMessage<ProgressAPI>): ProgressAPI {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ProgressAPI>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProgressAPI): ProgressAPI {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ProgressAPI, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.Controller.Shared.ProgressAPI
 */
export const ProgressAPI = new ProgressAPI$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProgressAPI_Report$Type extends MessageType<ProgressAPI_Report> {
    constructor() {
        super("MiLaboratories.Controller.Shared.ProgressAPI.Report", [
            { no: 1, name: "progress", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "bytes_processed", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "bytes_total", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "done", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProgressAPI_Report>): ProgressAPI_Report {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.progress = 0;
        message.bytesProcessed = 0n;
        message.bytesTotal = 0n;
        message.done = false;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<ProgressAPI_Report>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProgressAPI_Report): ProgressAPI_Report {
        const message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float progress */ 1:
                    message.progress = reader.float();
                    break;
                case /* uint64 bytes_processed */ 2:
                    message.bytesProcessed = reader.uint64().toBigInt();
                    break;
                case /* uint64 bytes_total */ 3:
                    message.bytesTotal = reader.uint64().toBigInt();
                    break;
                case /* bool done */ 4:
                    message.done = reader.bool();
                    break;
                case /* string name */ 5:
                    message.name = reader.string();
                    break;
                default:
                    const u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    const d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProgressAPI_Report, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float progress = 1; */
        if (message.progress !== 0)
            writer.tag(1, WireType.Bit32).float(message.progress);
        /* uint64 bytes_processed = 2; */
        if (message.bytesProcessed !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.bytesProcessed);
        /* uint64 bytes_total = 3; */
        if (message.bytesTotal !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.bytesTotal);
        /* bool done = 4; */
        if (message.done !== false)
            writer.tag(4, WireType.Varint).bool(message.done);
        /* string name = 5; */
        if (message.name !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.Controller.Shared.ProgressAPI.Report
 */
export const ProgressAPI_Report = new ProgressAPI_Report$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProgressAPI_GetStatus$Type extends MessageType<ProgressAPI_GetStatus> {
    constructor() {
        super("MiLaboratories.Controller.Shared.ProgressAPI.GetStatus", []);
    }
    create(value?: PartialMessage<ProgressAPI_GetStatus>): ProgressAPI_GetStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ProgressAPI_GetStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProgressAPI_GetStatus): ProgressAPI_GetStatus {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ProgressAPI_GetStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.Controller.Shared.ProgressAPI.GetStatus
 */
export const ProgressAPI_GetStatus = new ProgressAPI_GetStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProgressAPI_GetStatus_Request$Type extends MessageType<ProgressAPI_GetStatus_Request> {
    constructor() {
        super("MiLaboratories.Controller.Shared.ProgressAPI.GetStatus.Request", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ProgressAPI_GetStatus_Request>): ProgressAPI_GetStatus_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ProgressAPI_GetStatus_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProgressAPI_GetStatus_Request): ProgressAPI_GetStatus_Request {
        const message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                default:
                    const u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    const d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProgressAPI_GetStatus_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.Controller.Shared.ProgressAPI.GetStatus.Request
 */
export const ProgressAPI_GetStatus_Request = new ProgressAPI_GetStatus_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProgressAPI_GetStatus_Response$Type extends MessageType<ProgressAPI_GetStatus_Response> {
    constructor() {
        super("MiLaboratories.Controller.Shared.ProgressAPI.GetStatus.Response", [
            { no: 1, name: "report", kind: "message", T: () => ProgressAPI_Report }
        ]);
    }
    create(value?: PartialMessage<ProgressAPI_GetStatus_Response>): ProgressAPI_GetStatus_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ProgressAPI_GetStatus_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProgressAPI_GetStatus_Response): ProgressAPI_GetStatus_Response {
        const message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.Controller.Shared.ProgressAPI.Report report */ 1:
                    message.report = ProgressAPI_Report.internalBinaryRead(reader, reader.uint32(), options, message.report);
                    break;
                default:
                    const u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    const d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProgressAPI_GetStatus_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.Controller.Shared.ProgressAPI.Report report = 1; */
        if (message.report)
            ProgressAPI_Report.internalBinaryWrite(message.report, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.Controller.Shared.ProgressAPI.GetStatus.Response
 */
export const ProgressAPI_GetStatus_Response = new ProgressAPI_GetStatus_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProgressAPI_RealtimeStatus$Type extends MessageType<ProgressAPI_RealtimeStatus> {
    constructor() {
        super("MiLaboratories.Controller.Shared.ProgressAPI.RealtimeStatus", []);
    }
    create(value?: PartialMessage<ProgressAPI_RealtimeStatus>): ProgressAPI_RealtimeStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ProgressAPI_RealtimeStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProgressAPI_RealtimeStatus): ProgressAPI_RealtimeStatus {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ProgressAPI_RealtimeStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.Controller.Shared.ProgressAPI.RealtimeStatus
 */
export const ProgressAPI_RealtimeStatus = new ProgressAPI_RealtimeStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProgressAPI_RealtimeStatus_Request$Type extends MessageType<ProgressAPI_RealtimeStatus_Request> {
    constructor() {
        super("MiLaboratories.Controller.Shared.ProgressAPI.RealtimeStatus.Request", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "update_interval", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<ProgressAPI_RealtimeStatus_Request>): ProgressAPI_RealtimeStatus_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ProgressAPI_RealtimeStatus_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProgressAPI_RealtimeStatus_Request): ProgressAPI_RealtimeStatus_Request {
        const message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                case /* google.protobuf.Duration update_interval */ 2:
                    message.updateInterval = Duration.internalBinaryRead(reader, reader.uint32(), options, message.updateInterval);
                    break;
                default:
                    const u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    const d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProgressAPI_RealtimeStatus_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        /* google.protobuf.Duration update_interval = 2; */
        if (message.updateInterval)
            Duration.internalBinaryWrite(message.updateInterval, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.Controller.Shared.ProgressAPI.RealtimeStatus.Request
 */
export const ProgressAPI_RealtimeStatus_Request = new ProgressAPI_RealtimeStatus_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProgressAPI_RealtimeStatus_Response$Type extends MessageType<ProgressAPI_RealtimeStatus_Response> {
    constructor() {
        super("MiLaboratories.Controller.Shared.ProgressAPI.RealtimeStatus.Response", [
            { no: 1, name: "report", kind: "message", T: () => ProgressAPI_Report }
        ]);
    }
    create(value?: PartialMessage<ProgressAPI_RealtimeStatus_Response>): ProgressAPI_RealtimeStatus_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ProgressAPI_RealtimeStatus_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProgressAPI_RealtimeStatus_Response): ProgressAPI_RealtimeStatus_Response {
        const message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.Controller.Shared.ProgressAPI.Report report */ 1:
                    message.report = ProgressAPI_Report.internalBinaryRead(reader, reader.uint32(), options, message.report);
                    break;
                default:
                    const u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    const d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProgressAPI_RealtimeStatus_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.Controller.Shared.ProgressAPI.Report report = 1; */
        if (message.report)
            ProgressAPI_Report.internalBinaryWrite(message.report, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.Controller.Shared.ProgressAPI.RealtimeStatus.Response
 */
export const ProgressAPI_RealtimeStatus_Response = new ProgressAPI_RealtimeStatus_Response$Type();
/**
 * @generated ServiceType for protobuf service MiLaboratories.Controller.Shared.Progress
 */
export const Progress = new ServiceType("MiLaboratories.Controller.Shared.Progress", [
    { name: "GetStatus", options: { "google.api.http": { get: "/resources/{resource_id}/get-progress" } }, I: ProgressAPI_GetStatus_Request, O: ProgressAPI_GetStatus_Response },
    { name: "RealtimeStatus", serverStreaming: true, options: {}, I: ProgressAPI_RealtimeStatus_Request, O: ProgressAPI_RealtimeStatus_Response }
]);
