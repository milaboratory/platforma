// @generated by protobuf-ts 2.11.1 with parameter client_generic,optimize_speed,generate_dependencies,force_server_none
// @generated from protobuf file "github.com/milaboratory/pl/plapi/plapiproto/api.proto" (package "MiLaboratories.PL.API", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../../../google/protobuf/duration";
import { ResourceAPIFeature } from "./api_types";
import { Controller } from "./api_types";
import { ResourceSchema } from "./api_types";
import { Subscription } from "./api_types";
import { NotificationFilter } from "./resource_types";
import { Notification } from "./api_types";
import { Field } from "./api_types";
import { FieldType } from "./base_types";
import { Resource } from "./api_types";
import { FieldRef } from "./base_types";
import { ResourceType } from "./base_types";
import { Tx } from "./api_types";
import { Status } from "../../../../googleapis/googleapis/google/rpc/status";
/**
 * Platform transactions on API level are implemented as bidirectional
 * streams that exist in parallel with transactions.
 * One stream = one transaction at all times.
 *
 * Long story short from client side:
 *   - client initializes stream and immediately gets transaction info
 *     message from server;
 *   - client calls server methods by sending messages to the server,
 *     each message has its own request ID starting from 1, request ID number
 *     grows as new messages are sent to the server;
 *   - client reads server responses for each messages sent. Client can batch
 *     writes and reads: e.g. send 3 messages, read 2 responses, send one
 *     more, read 2;
 *   - to finish communication client sends 'commit' message and reads last
 *     response;
 *
 * Detailed description of the process.
 *
 * The Platform transaction over gRPC has 3 stages:
 *
 * 1. Initialization:
 *
 *   - client opens new bidirectional stream by calling 'Tx' gRPC method;
 *   - client sends 'tx_open' message with request_id = 0 to open RO or RW
 *     transaction.
 *     Any message from client other than 'tx_open' during initialization is
 *     treated as communication error and causes server to close the stream;
 *   - server opens new transaction and sends transaction info to the client
 *     'tx_open' server message;
 *
 * 2. Communication:
 *
 *     Once the transaction gets initialized, all the communication between
 * client and server should be considered as request-response sequence.
 * The only difference to simple gRPC call is that sending a request does not
 * block client until the response arrives from server.
 *
 *     Client can send as many requests to the server as it wants before
 * reading responses. This allows client to batch method calls, when it is not
 * interested in result of each action, but needs only overall summary of
 * transaction commit.
 * For example, the following sequence is totally valid from client side:
 *   1. send reqA.
 *   2. send reqB.
 *   3. get respA.
 *   4. send reqC.
 *   5. get respB.
 *   6. get respC.
 *
 * Here are detailed rules of client-server communication inside transaction
 * stream:
 *   - if stream is closed by client or interrupted by any unrecoverable
 *     communication error, the accompanied transaction is discarded;
 *   - each message in client stream (from client to server) is considered as
 *     method call.
 *     E.g. 'resource_remove' makes server to actually remove resource inside
 *     transaction, bound to current stream;
 *   - each message in client stream MUST have its own ID (request_id),
 *     generated by client, UNIQUE for transaction. Numeration starts from
 *     1 for each at this step. request_id == 0 is treated as unrecoverable
 *     communication error by server and cancels transaction;
 *   - server expects 'request_id' from client to grow constantly by one as
 *     messages come. If message M2 arrives next to M1 and
 *       M2.request_id != (M1.request_id + 1)
 *     server treats it as unrecoverable communication error and cancels
 *     transaction;
 *   - all messages in server stream (from server to client) in communication
 *     stage have the same 'request_id' as the client messages, that triggered
 *     the operation. This allows client to match server responses to the
 *     requests it sent earlier;
 *   - messages order in server stream matches order in client stream: if
 *     client sent sequence [ReqA, ReqB], the server will always response
 *     [RespA, RespB];
 *   - server can send several responses to single client request (multi-message
 *     response). In that case, all such responses will have the same 'request_id'
 *     (the one from client request), but different message IDs. See
 *     'Multi-message responses' section below for more info.
 *   - client is allowed (but not obligated) to generate local IDs for new
 *     instances and use them in links and other references. These local IDs
 *     are valid only within current transaction;
 *   - any instance in server stream always has _real_ global ID that is valid
 *     at any times in any other request outside current transaction;
 *
 * 3. Finalization:
 *
 *    - client finalizes transaction by sending 'tx_commit' or 'tx_discard'
 *      message to the server. After that client can close client stream as any
 *      message sent to the server after commit/discard will be ignored anyway;
 *    - server stops reading client stream and does the commit/discard action.
 *    - once transaction is closed, server sends the result to client and
 *      closes server stream.
 *
 * At this point the transaction over gRPC is considered as finalized, all
 * local IDs generated within the transaction are no longer valid.
 *
 * Multi-message responses
 *
 * Some transaction methods produce several messages by design, causing
 * single call to result in multiple responses. Listings are the clear
 * example of that.
 * All responses from server have special field (multi_message) with all meta
 * info on multi-message response:
 *  - for single-message responses, multi_message is always empty;
 *  - for multi-message responses, multi_message.id is always > 0;
 *  - all messages in multi-message response have request_id equal to request_id from
 *    original client's request message;
 *  - last message in multi-message response always has multi_message.is_last = true;
 *  - empty multi-message response always has:
 *      multi_message.is_last = true;
 *      multi_message.is_empty = true.
 *
 *
 * @generated from protobuf message MiLaboratories.PL.API.TxAPI
 */
export interface TxAPI {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.TxAPI.ClientMessage
 */
export interface TxAPI_ClientMessage {
    /**
     * @generated from protobuf field: uint32 request_id = 1
     */
    requestId: number;
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "txOpen";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.TxAPI.Open.Request tx_open = 11
         */
        txOpen: TxAPI_Open_Request; // open transaction
    } | {
        oneofKind: "txCommit";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.TxAPI.Commit.Request tx_commit = 12
         */
        txCommit: TxAPI_Commit_Request; // commit the transaction and close the stream
    } | {
        oneofKind: "txDiscard";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.TxAPI.Discard.Request tx_discard = 13
         */
        txDiscard: TxAPI_Discard_Request; // discard the transaction and close the stream
    } | {
        oneofKind: "resourceCreateRoot";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.CreateRoot.Request resource_create_root = 58
         */
        resourceCreateRoot: ResourceAPI_CreateRoot_Request; // create new root resource
    } | {
        oneofKind: "resourceRemove";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.Remove.Request resource_remove = 57
         */
        resourceRemove: ResourceAPI_Remove_Request; // remove root resource from platform
    } | {
        oneofKind: "resourceCreateStruct";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.CreateStruct.Request resource_create_struct = 51
         */
        resourceCreateStruct: ResourceAPI_CreateStruct_Request; // create new structural resource
    } | {
        oneofKind: "resourceCreateEphemeral";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.CreateEphemeral.Request resource_create_ephemeral = 62
         */
        resourceCreateEphemeral: ResourceAPI_CreateEphemeral_Request; // create new ephemeral resource
    } | {
        oneofKind: "resourceCreateValue";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.CreateValue.Request resource_create_value = 52
         */
        resourceCreateValue: ResourceAPI_CreateValue_Request; // create value resource
    } | {
        oneofKind: "resourceGetValueId";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.GetValueID.Request resource_get_value_id = 63
         */
        resourceGetValueId: ResourceAPI_GetValueID_Request; // get value resource by type and data
    } | {
        oneofKind: "resourceCreateSingleton";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.CreateSingleton.Request resource_create_singleton = 64
         */
        resourceCreateSingleton: ResourceAPI_CreateSingleton_Request; // create singleton resource
    } | {
        oneofKind: "resourceGetSingleton";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.GetSingleton.Request resource_get_singleton = 65
         */
        resourceGetSingleton: ResourceAPI_GetSingleton_Request; // get singleton resource by type and data
    } | {
        oneofKind: "resourceCreateChild";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.CreateChild.Request resource_create_child = 59
         */
        resourceCreateChild: ResourceAPI_CreateChild_Request; // create new child resource
    } | {
        oneofKind: "resourceLockInputs";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.LockInputs.Request resource_lock_inputs = 53
         */
        resourceLockInputs: ResourceAPI_LockInputs_Request; // lock inputs of resources without schema
    } | {
        oneofKind: "resourceLockOutputs";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.LockOutputs.Request resource_lock_outputs = 56
         */
        resourceLockOutputs: ResourceAPI_LockOutputs_Request; // lock outputs of resources without schema
    } | {
        oneofKind: "resourceExists";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.Exists.Request resource_exists = 54
         */
        resourceExists: ResourceAPI_Exists_Request; // check if resource exists
    } | {
        oneofKind: "resourceGet";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.Get.Request resource_get = 55
         */
        resourceGet: ResourceAPI_Get_Request; // get actual resource info from server
    } | {
        oneofKind: "resourceSetError";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.SetError.Request resource_set_error = 61
         */
        resourceSetError: ResourceAPI_SetError_Request; // create a special field and set error there.
    } | {
        oneofKind: "resourceListByType";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.List.ByType.Request resource_list_by_type = 60
         */
        resourceListByType: ResourceAPI_List_ByType_Request; // list resources of specific type
    } | {
        oneofKind: "resourceNameSet";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.Name.Set.Request resource_name_set = 66
         */
        resourceNameSet: ResourceAPI_Name_Set_Request; // assign name to resource
    } | {
        oneofKind: "resourceNameGet";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.Name.Get.Request resource_name_get = 67
         */
        resourceNameGet: ResourceAPI_Name_Get_Request; // get resource ID by name
    } | {
        oneofKind: "resourceNameExists";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.Name.Exists.Request resource_name_exists = 68
         */
        resourceNameExists: ResourceAPI_Name_Exists_Request; // check if resource name exists in platform
    } | {
        oneofKind: "resourceNameDelete";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.Name.Delete.Request resource_name_delete = 69
         */
        resourceNameDelete: ResourceAPI_Name_Delete_Request; // detach name from resource
    } | {
        oneofKind: "resourceTree";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.Tree.Request resource_tree = 70
         */
        resourceTree: ResourceAPI_Tree_Request; // load tree rooted at given resource
    } | {
        oneofKind: "resourceTreeSize";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.TreeSize.Request resource_tree_size = 71
         */
        resourceTreeSize: ResourceAPI_TreeSize_Request; // calculate size for all resources in tree
    } | {
        oneofKind: "fieldCreate";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.FieldAPI.Create.Request field_create = 101
         */
        fieldCreate: FieldAPI_Create_Request; // add field to resource
    } | {
        oneofKind: "fieldExists";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.FieldAPI.Exists.Request field_exists = 107
         */
        fieldExists: FieldAPI_Exists_Request; // add field to resource
    } | {
        oneofKind: "fieldSet";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.FieldAPI.Set.Request field_set = 102
         */
        fieldSet: FieldAPI_Set_Request; // link field to another resource or field
    } | {
        oneofKind: "fieldSetError";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.FieldAPI.SetError.Request field_set_error = 105
         */
        fieldSetError: FieldAPI_SetError_Request; // link field to error resource
    } | {
        oneofKind: "fieldGet";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.FieldAPI.Get.Request field_get = 103
         */
        fieldGet: FieldAPI_Get_Request; // get field info
    } | {
        oneofKind: "fieldReset";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.FieldAPI.Reset.Request field_reset = 104
         */
        fieldReset: FieldAPI_Reset_Request; // clear field value (MTW fields only)
    } | {
        oneofKind: "fieldRemove";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.FieldAPI.Remove.Request field_remove = 106
         */
        fieldRemove: FieldAPI_Remove_Request; // clear field value (MTW fields only)
    } | {
        oneofKind: "fieldList";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.FieldAPI.List.Request field_list = 108
         */
        fieldList: FieldAPI_List_Request; // list fields of specific resource
    } | {
        oneofKind: "subscriptionCreate";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.SubscriptionAPI.CreateSubscription.Request subscription_create = 111
         */
        subscriptionCreate: SubscriptionAPI_CreateSubscription_Request; // create subscription
    } | {
        oneofKind: "subscriptionAttachFilter";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.SubscriptionAPI.AttachFilter.Request subscription_attach_filter = 112
         */
        subscriptionAttachFilter: SubscriptionAPI_AttachFilter_Request; // add filter to existing subscription
    } | {
        oneofKind: "subscriptionDetachFilter";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.SubscriptionAPI.DetachFilter.Request subscription_detach_filter = 113
         */
        subscriptionDetachFilter: SubscriptionAPI_DetachFilter_Request; // add filter to existing subscription
    } | {
        oneofKind: "subscriptionCreateFilter";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.SubscriptionAPI.CreateFilter.Request subscription_create_filter = 115
         */
        subscriptionCreateFilter: SubscriptionAPI_CreateFilter_Request; // create filter resource
    } | {
        oneofKind: "notificationGet";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.NotificationAPI.Get.Request notification_get = 154
         */
        notificationGet: NotificationAPI_Get_Request; // get notification info from platform
    } | {
        oneofKind: "notificationAck";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.NotificationAPI.Ack.Request notification_ack = 155
         */
        notificationAck: NotificationAPI_Ack_Request; // acknowledge notification handle by controller
    } | {
        oneofKind: "notificationDiscard";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.NotificationAPI.Discard.Request notification_discard = 156
         */
        notificationDiscard: NotificationAPI_Discard_Request; // discard notification handle by controller
    } | {
        oneofKind: "resourceKeyValueSet";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceKVAPI.Set.Request resource_key_value_set = 200
         */
        resourceKeyValueSet: ResourceKVAPI_Set_Request; // set a value to a resource's key-value store.
    } | {
        oneofKind: "resourceKeyValueGet";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceKVAPI.Get.Request resource_key_value_get = 201
         */
        resourceKeyValueGet: ResourceKVAPI_Get_Request; // get a value from a resource's key-value store.
    } | {
        oneofKind: "resourceKeyValueGetIfExists";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceKVAPI.GetIfExists.Request resource_key_value_get_if_exists = 202
         */
        resourceKeyValueGetIfExists: ResourceKVAPI_GetIfExists_Request; // get a value from a KV if the value exists.
    } | {
        oneofKind: "resourceKeyValueSetFlag";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceKVAPI.SetFlag.Request resource_key_value_set_flag = 203
         */
        resourceKeyValueSetFlag: ResourceKVAPI_SetFlag_Request; // set a bool to a resource's key-value store.
    } | {
        oneofKind: "resourceKeyValueGetFlag";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceKVAPI.GetFlag.Request resource_key_value_get_flag = 204
         */
        resourceKeyValueGetFlag: ResourceKVAPI_GetFlag_Request; // get a bool from a resource's key-value store.
    } | {
        oneofKind: "resourceKeyValueGetFlagIfExists";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceKVAPI.GetFlag.Request resource_key_value_get_flag_if_exists = 205
         */
        resourceKeyValueGetFlagIfExists: ResourceKVAPI_GetFlag_Request; // get a bool from a resource's key-value store, return false if key is not found.
    } | {
        oneofKind: "resourceKeyValueDelete";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceKVAPI.Delete.Request resource_key_value_delete = 206
         */
        resourceKeyValueDelete: ResourceKVAPI_Delete_Request; // delete value from resource KV storage
    } | {
        oneofKind: "resourceKeyValueList";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceKVAPI.List.Request resource_key_value_list = 207
         */
        resourceKeyValueList: ResourceKVAPI_List_Request; // return all resource KV items
    } | {
        oneofKind: "controllerKeyValueSet";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ControllerKVAPI.Set.Request controller_key_value_set = 250
         */
        controllerKeyValueSet: ControllerKVAPI_Set_Request; // set a value to a controller's key-value store.
    } | {
        oneofKind: "controllerKeyValueGet";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ControllerKVAPI.Get.Request controller_key_value_get = 251
         */
        controllerKeyValueGet: ControllerKVAPI_Get_Request; // get a value from a controller's key-value store.
    } | {
        oneofKind: "controllerKeyValueGetIfExists";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ControllerKVAPI.GetIfExists.Request controller_key_value_get_if_exists = 252
         */
        controllerKeyValueGetIfExists: ControllerKVAPI_GetIfExists_Request; // get a value from a KV if the value exists.
    } | {
        oneofKind: "controllerKeyValueSetFlag";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ControllerKVAPI.SetFlag.Request controller_key_value_set_flag = 253
         */
        controllerKeyValueSetFlag: ControllerKVAPI_SetFlag_Request; // set a bool to a controller's key-value store.
    } | {
        oneofKind: "controllerKeyValueGetFlag";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ControllerKVAPI.GetFlag.Request controller_key_value_get_flag = 254
         */
        controllerKeyValueGetFlag: ControllerKVAPI_GetFlag_Request; // get a bool from a controller's key-value store.
    } | {
        oneofKind: "controllerKeyValueGetFlagIfExists";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ControllerKVAPI.GetFlagIfExists.Request controller_key_value_get_flag_if_exists = 255
         */
        controllerKeyValueGetFlagIfExists: ControllerKVAPI_GetFlagIfExists_Request; // get a bool from a controller's key-value store, return false if key is not found.
    } | {
        oneofKind: "cacheSetToField";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.CacheAPI.SetToField.Request cache_set_to_field = 300
         */
        cacheSetToField: CacheAPI_SetToField_Request; // store the topology info and results of the field.
    } | {
        oneofKind: "cacheDeleteExpiredRecords";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.CacheAPI.DeleteExpiredRecords.Request cache_delete_expired_records = 301
         */
        cacheDeleteExpiredRecords: CacheAPI_DeleteExpiredRecords_Request; // iterate through all records and delete expired.
    } | {
        oneofKind: "controllerFeaturesSet";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ControllerAPI.SetFeatures.Request controller_features_set = 350
         */
        controllerFeaturesSet: ControllerAPI_SetFeatures_Request; // replace list of resource features, provided by controller.
    } | {
        oneofKind: "controllerFeaturesClear";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ControllerAPI.ClearFeatures.Request controller_features_clear = 351
         */
        controllerFeaturesClear: ControllerAPI_ClearFeatures_Request; // clear list of resource features, provided by controller.
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.TxAPI.ServerMessage
 */
export interface TxAPI_ServerMessage {
    /**
     * @generated from protobuf field: uint32 request_id = 1
     */
    requestId: number;
    /**
     * Additional response message info for multi-message responses.
     * Is always empty in single-message responses.
     *
     * @generated from protobuf field: MiLaboratories.PL.API.TxAPI.ServerMessage.Multi multi_message = 2
     */
    multiMessage?: TxAPI_ServerMessage_Multi;
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "txOpen";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.TxAPI.Open.Response tx_open = 11
         */
        txOpen: TxAPI_Open_Response;
    } | {
        oneofKind: "txCommit";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.TxAPI.Commit.Response tx_commit = 12
         */
        txCommit: TxAPI_Commit_Response;
    } | {
        oneofKind: "txDiscard";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.TxAPI.Discard.Response tx_discard = 13
         */
        txDiscard: TxAPI_Discard_Response;
    } | {
        oneofKind: "resourceCreateRoot";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.CreateRoot.Response resource_create_root = 58
         */
        resourceCreateRoot: ResourceAPI_CreateRoot_Response;
    } | {
        oneofKind: "resourceRemove";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.Remove.Response resource_remove = 57
         */
        resourceRemove: ResourceAPI_Remove_Response;
    } | {
        oneofKind: "resourceCreateStruct";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.CreateStruct.Response resource_create_struct = 51
         */
        resourceCreateStruct: ResourceAPI_CreateStruct_Response;
    } | {
        oneofKind: "resourceCreateEphemeral";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.CreateEphemeral.Response resource_create_ephemeral = 62
         */
        resourceCreateEphemeral: ResourceAPI_CreateEphemeral_Response;
    } | {
        oneofKind: "resourceCreateValue";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.CreateValue.Response resource_create_value = 52
         */
        resourceCreateValue: ResourceAPI_CreateValue_Response;
    } | {
        oneofKind: "resourceGetValueId";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.GetValueID.Response resource_get_value_id = 63
         */
        resourceGetValueId: ResourceAPI_GetValueID_Response;
    } | {
        oneofKind: "resourceCreateSingleton";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.CreateSingleton.Response resource_create_singleton = 64
         */
        resourceCreateSingleton: ResourceAPI_CreateSingleton_Response;
    } | {
        oneofKind: "resourceGetSingleton";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.GetSingleton.Response resource_get_singleton = 65
         */
        resourceGetSingleton: ResourceAPI_GetSingleton_Response;
    } | {
        oneofKind: "resourceCreateChild";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.CreateChild.Response resource_create_child = 59
         */
        resourceCreateChild: ResourceAPI_CreateChild_Response;
    } | {
        oneofKind: "resourceLockInputs";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.LockInputs.Response resource_lock_inputs = 53
         */
        resourceLockInputs: ResourceAPI_LockInputs_Response;
    } | {
        oneofKind: "resourceLockOutputs";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.LockOutputs.Response resource_lock_outputs = 56
         */
        resourceLockOutputs: ResourceAPI_LockOutputs_Response;
    } | {
        oneofKind: "resourceExists";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.Exists.Response resource_exists = 54
         */
        resourceExists: ResourceAPI_Exists_Response;
    } | {
        oneofKind: "resourceGet";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.Get.Response resource_get = 55
         */
        resourceGet: ResourceAPI_Get_Response;
    } | {
        oneofKind: "resourceSetError";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.SetError.Response resource_set_error = 61
         */
        resourceSetError: ResourceAPI_SetError_Response;
    } | {
        oneofKind: "resourceListByType";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.List.ByType.Response resource_list_by_type = 60
         */
        resourceListByType: ResourceAPI_List_ByType_Response;
    } | {
        oneofKind: "resourceNameSet";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.Name.Set.Response resource_name_set = 66
         */
        resourceNameSet: ResourceAPI_Name_Set_Response;
    } | {
        oneofKind: "resourceNameGet";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.Name.Get.Response resource_name_get = 67
         */
        resourceNameGet: ResourceAPI_Name_Get_Response;
    } | {
        oneofKind: "resourceNameExists";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.Name.Exists.Response resource_name_exists = 68
         */
        resourceNameExists: ResourceAPI_Name_Exists_Response;
    } | {
        oneofKind: "resourceNameDelete";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.Name.Delete.Response resource_name_delete = 69
         */
        resourceNameDelete: ResourceAPI_Name_Delete_Response;
    } | {
        oneofKind: "resourceTree";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.Tree.Response resource_tree = 70
         */
        resourceTree: ResourceAPI_Tree_Response;
    } | {
        oneofKind: "resourceTreeSize";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceAPI.TreeSize.Response resource_tree_size = 71
         */
        resourceTreeSize: ResourceAPI_TreeSize_Response;
    } | {
        oneofKind: "fieldCreate";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.FieldAPI.Create.Response field_create = 101
         */
        fieldCreate: FieldAPI_Create_Response;
    } | {
        oneofKind: "fieldExists";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.FieldAPI.Exists.Response field_exists = 107
         */
        fieldExists: FieldAPI_Exists_Response;
    } | {
        oneofKind: "fieldSet";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.FieldAPI.Set.Response field_set = 102
         */
        fieldSet: FieldAPI_Set_Response;
    } | {
        oneofKind: "fieldSetError";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.FieldAPI.SetError.Response field_set_error = 105
         */
        fieldSetError: FieldAPI_SetError_Response;
    } | {
        oneofKind: "fieldGet";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.FieldAPI.Get.Response field_get = 103
         */
        fieldGet: FieldAPI_Get_Response;
    } | {
        oneofKind: "fieldReset";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.FieldAPI.Reset.Response field_reset = 104
         */
        fieldReset: FieldAPI_Reset_Response;
    } | {
        oneofKind: "fieldRemove";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.FieldAPI.Remove.Response field_remove = 106
         */
        fieldRemove: FieldAPI_Remove_Response;
    } | {
        oneofKind: "fieldList";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.FieldAPI.List.Response field_list = 108
         */
        fieldList: FieldAPI_List_Response;
    } | {
        oneofKind: "subscriptionCreate";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.SubscriptionAPI.CreateSubscription.Response subscription_create = 111
         */
        subscriptionCreate: SubscriptionAPI_CreateSubscription_Response;
    } | {
        oneofKind: "subscriptionCreateFilter";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.SubscriptionAPI.CreateFilter.Response subscription_create_filter = 115
         */
        subscriptionCreateFilter: SubscriptionAPI_CreateFilter_Response;
    } | {
        oneofKind: "subscriptionAttachFilter";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.SubscriptionAPI.AttachFilter.Response subscription_attach_filter = 112
         */
        subscriptionAttachFilter: SubscriptionAPI_AttachFilter_Response;
    } | {
        oneofKind: "subscriptionDetachFilter";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.SubscriptionAPI.DetachFilter.Response subscription_detach_filter = 113
         */
        subscriptionDetachFilter: SubscriptionAPI_DetachFilter_Response;
    } | {
        oneofKind: "notificationGet";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.NotificationAPI.Get.Response notification_get = 154
         */
        notificationGet: NotificationAPI_Get_Response;
    } | {
        oneofKind: "notificationAck";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.NotificationAPI.Ack.Response notification_ack = 155
         */
        notificationAck: NotificationAPI_Ack_Response;
    } | {
        oneofKind: "notificationDiscard";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.NotificationAPI.Discard.Response notification_discard = 156
         */
        notificationDiscard: NotificationAPI_Discard_Response;
    } | {
        oneofKind: "resourceKeyValueSet";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceKVAPI.Set.Response resource_key_value_set = 200
         */
        resourceKeyValueSet: ResourceKVAPI_Set_Response;
    } | {
        oneofKind: "resourceKeyValueGet";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceKVAPI.Get.Response resource_key_value_get = 201
         */
        resourceKeyValueGet: ResourceKVAPI_Get_Response;
    } | {
        oneofKind: "resourceKeyValueGetIfExists";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceKVAPI.GetIfExists.Response resource_key_value_get_if_exists = 202
         */
        resourceKeyValueGetIfExists: ResourceKVAPI_GetIfExists_Response;
    } | {
        oneofKind: "resourceKeyValueSetFlag";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceKVAPI.SetFlag.Response resource_key_value_set_flag = 203
         */
        resourceKeyValueSetFlag: ResourceKVAPI_SetFlag_Response;
    } | {
        oneofKind: "resourceKeyValueGetFlag";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceKVAPI.GetFlag.Response resource_key_value_get_flag = 204
         */
        resourceKeyValueGetFlag: ResourceKVAPI_GetFlag_Response;
    } | {
        oneofKind: "resourceKeyValueGetFlagIfExists";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceKVAPI.GetFlag.Response resource_key_value_get_flag_if_exists = 205
         */
        resourceKeyValueGetFlagIfExists: ResourceKVAPI_GetFlag_Response;
    } | {
        oneofKind: "resourceKeyValueDelete";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceKVAPI.Delete.Response resource_key_value_delete = 206
         */
        resourceKeyValueDelete: ResourceKVAPI_Delete_Response;
    } | {
        oneofKind: "resourceKeyValueList";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ResourceKVAPI.List.Response resource_key_value_list = 207
         */
        resourceKeyValueList: ResourceKVAPI_List_Response; // multi-message
    } | {
        oneofKind: "controllerKeyValueSet";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ControllerKVAPI.Set.Response controller_key_value_set = 250
         */
        controllerKeyValueSet: ControllerKVAPI_Set_Response;
    } | {
        oneofKind: "controllerKeyValueGet";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ControllerKVAPI.Get.Response controller_key_value_get = 251
         */
        controllerKeyValueGet: ControllerKVAPI_Get_Response;
    } | {
        oneofKind: "controllerKeyValueGetIfExists";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ControllerKVAPI.GetIfExists.Response controller_key_value_get_if_exists = 252
         */
        controllerKeyValueGetIfExists: ControllerKVAPI_GetIfExists_Response;
    } | {
        oneofKind: "controllerKeyValueSetFlag";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ControllerKVAPI.SetFlag.Response controller_key_value_set_flag = 253
         */
        controllerKeyValueSetFlag: ControllerKVAPI_SetFlag_Response;
    } | {
        oneofKind: "controllerKeyValueGetFlag";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ControllerKVAPI.GetFlag.Response controller_key_value_get_flag = 254
         */
        controllerKeyValueGetFlag: ControllerKVAPI_GetFlag_Response;
    } | {
        oneofKind: "controllerKeyValueGetFlagIfExists";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ControllerKVAPI.GetFlagIfExists.Response controller_key_value_get_flag_if_exists = 255
         */
        controllerKeyValueGetFlagIfExists: ControllerKVAPI_GetFlagIfExists_Response;
    } | {
        oneofKind: "cacheSetToField";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.CacheAPI.SetToField.Response cache_set_to_field = 300
         */
        cacheSetToField: CacheAPI_SetToField_Response;
    } | {
        oneofKind: "cacheDeleteExpiredRecords";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.CacheAPI.DeleteExpiredRecords.Response cache_delete_expired_records = 301
         */
        cacheDeleteExpiredRecords: CacheAPI_DeleteExpiredRecords_Response;
    } | {
        oneofKind: "controllerFeaturesSet";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ControllerAPI.SetFeatures.Response controller_features_set = 350
         */
        controllerFeaturesSet: ControllerAPI_SetFeatures_Response;
    } | {
        oneofKind: "controllerFeaturesClear";
        /**
         * @generated from protobuf field: MiLaboratories.PL.API.ControllerAPI.ClearFeatures.Response controller_features_clear = 351
         */
        controllerFeaturesClear: ControllerAPI_ClearFeatures_Response;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: google.rpc.Status error = 3
     */
    error?: Status;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.TxAPI.ServerMessage.Multi
 */
export interface TxAPI_ServerMessage_Multi {
    /**
     * Sequential message ID for multi-message response, starting from 1.
     * Caller can use 'id > 0' check as a sign of multi-message response.
     * Some API requests produce several messages in response by design (say, listings)
     * In that case, the server responses to the client with many messages, each having
     * the same <request_id> value and different <message_id> values.
     *
     * @generated from protobuf field: uint32 id = 1
     */
    id: number;
    /**
     * Sign of the last message in multi-message response.
     * Helps to wrap multi-message responses into iterators on client side.
     *
     * @generated from protobuf field: bool is_last = 2
     */
    isLast: boolean;
    /**
     * Sign of empty multi-message response. Some multi-message responses can produce nothing
     * (like listing of empty directory). In that case client still has to know that the request was
     * handled and the empty result is OK.
     *
     * @generated from protobuf field: bool is_empty = 3
     */
    isEmpty: boolean;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.TxAPI.Open
 */
export interface TxAPI_Open {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.TxAPI.Open.Request
 */
export interface TxAPI_Open_Request {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * @generated from protobuf field: MiLaboratories.PL.API.TxAPI.Open.Request.WritableTx writable = 2
     */
    writable: TxAPI_Open_Request_WritableTx;
    /**
     * @generated from protobuf field: bool enableFormattedErrors = 3
     */
    enableFormattedErrors: boolean;
}
/**
 * @generated from protobuf enum MiLaboratories.PL.API.TxAPI.Open.Request.WritableTx
 */
export enum TxAPI_Open_Request_WritableTx {
    /**
     * @generated from protobuf enum value: INVALID = 0;
     */
    INVALID = 0,
    /**
     * @generated from protobuf enum value: WRITABLE = 1;
     */
    WRITABLE = 1,
    /**
     * @generated from protobuf enum value: NOT_WRITABLE = 2;
     */
    NOT_WRITABLE = 2
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.TxAPI.Open.Response
 */
export interface TxAPI_Open_Response {
    /**
     * @generated from protobuf field: MiLaboratories.PL.API.Tx tx = 1
     */
    tx?: Tx;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.TxAPI.Commit
 */
export interface TxAPI_Commit {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.TxAPI.Commit.Request
 */
export interface TxAPI_Commit_Request {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.TxAPI.Commit.Response
 */
export interface TxAPI_Commit_Response {
    /**
     * @generated from protobuf field: bool success = 1
     */
    success: boolean;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.TxAPI.Discard
 */
export interface TxAPI_Discard {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.TxAPI.Discard.Request
 */
export interface TxAPI_Discard_Request {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.TxAPI.Discard.Response
 */
export interface TxAPI_Discard_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.TxAPI.Sync
 */
export interface TxAPI_Sync {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.TxAPI.Sync.Request
 */
export interface TxAPI_Sync_Request {
    /**
     * @generated from protobuf field: uint64 tx_id = 1
     */
    txId: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.TxAPI.Sync.Response
 */
export interface TxAPI_Sync_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI
 */
export interface ResourceAPI {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.CreateStruct
 */
export interface ResourceAPI_CreateStruct {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.CreateStruct.Request
 */
export interface ResourceAPI_CreateStruct_Request {
    /**
     * @generated from protobuf field: uint64 id = 2
     */
    id: bigint;
    /**
     * @generated from protobuf field: MiLaboratories.PL.Base.ResourceType type = 3
     */
    type?: ResourceType;
    /**
     * @generated from protobuf field: optional bytes data = 4
     */
    data?: Uint8Array;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.CreateStruct.Response
 */
export interface ResourceAPI_CreateStruct_Response {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.CreateEphemeral
 */
export interface ResourceAPI_CreateEphemeral {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.CreateEphemeral.Request
 */
export interface ResourceAPI_CreateEphemeral_Request {
    /**
     * @generated from protobuf field: uint64 id = 2
     */
    id: bigint;
    /**
     * @generated from protobuf field: MiLaboratories.PL.Base.ResourceType type = 3
     */
    type?: ResourceType;
    /**
     * @generated from protobuf field: optional bytes data = 4
     */
    data?: Uint8Array;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.CreateEphemeral.Response
 */
export interface ResourceAPI_CreateEphemeral_Response {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.CreateChild
 */
export interface ResourceAPI_CreateChild {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.CreateChild.Request
 */
export interface ResourceAPI_CreateChild_Request {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: bigint;
    /**
     * @generated from protobuf field: MiLaboratories.PL.Base.ResourceType type = 2
     */
    type?: ResourceType;
    /**
     * @generated from protobuf field: MiLaboratories.PL.Base.FieldRef parent_field = 3
     */
    parentField?: FieldRef;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.CreateChild.Response
 */
export interface ResourceAPI_CreateChild_Response {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.CreateValue
 */
export interface ResourceAPI_CreateValue {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.CreateValue.Request
 */
export interface ResourceAPI_CreateValue_Request {
    /**
     * @generated from protobuf field: uint64 id = 2
     */
    id: bigint;
    /**
     * @generated from protobuf field: MiLaboratories.PL.Base.ResourceType type = 3
     */
    type?: ResourceType;
    /**
     * @generated from protobuf field: bytes data = 6
     */
    data: Uint8Array;
    /**
     * @generated from protobuf field: bool error_if_exists = 7
     */
    errorIfExists: boolean;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.CreateValue.Response
 */
export interface ResourceAPI_CreateValue_Response {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.GetValueID
 */
export interface ResourceAPI_GetValueID {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.GetValueID.Request
 */
export interface ResourceAPI_GetValueID_Request {
    /**
     * @generated from protobuf field: MiLaboratories.PL.Base.ResourceType type = 1
     */
    type?: ResourceType;
    /**
     * @generated from protobuf field: bytes data = 2
     */
    data: Uint8Array;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.GetValueID.Response
 */
export interface ResourceAPI_GetValueID_Response {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.CreateSingleton
 */
export interface ResourceAPI_CreateSingleton {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.CreateSingleton.Request
 */
export interface ResourceAPI_CreateSingleton_Request {
    /**
     * @generated from protobuf field: uint64 id = 2
     */
    id: bigint;
    /**
     * @generated from protobuf field: MiLaboratories.PL.Base.ResourceType type = 3
     */
    type?: ResourceType;
    /**
     * @generated from protobuf field: bytes data = 6
     */
    data: Uint8Array;
    /**
     * @generated from protobuf field: bool error_if_exists = 7
     */
    errorIfExists: boolean;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.CreateSingleton.Response
 */
export interface ResourceAPI_CreateSingleton_Response {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.GetSingleton
 */
export interface ResourceAPI_GetSingleton {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.GetSingleton.Request
 */
export interface ResourceAPI_GetSingleton_Request {
    /**
     * @generated from protobuf field: MiLaboratories.PL.Base.ResourceType type = 1
     */
    type?: ResourceType;
    /**
     * @generated from protobuf field: bytes data = 2
     */
    data: Uint8Array;
    /**
     * @generated from protobuf field: bool load_fields = 3
     */
    loadFields: boolean;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.GetSingleton.Response
 */
export interface ResourceAPI_GetSingleton_Response {
    /**
     * @generated from protobuf field: MiLaboratories.PL.API.Resource resource = 1
     */
    resource?: Resource;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.LockInputs
 */
export interface ResourceAPI_LockInputs {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.LockInputs.Request
 */
export interface ResourceAPI_LockInputs_Request {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.LockInputs.Response
 */
export interface ResourceAPI_LockInputs_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.LockOutputs
 */
export interface ResourceAPI_LockOutputs {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.LockOutputs.Request
 */
export interface ResourceAPI_LockOutputs_Request {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.LockOutputs.Response
 */
export interface ResourceAPI_LockOutputs_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Exists
 */
export interface ResourceAPI_Exists {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Exists.Request
 */
export interface ResourceAPI_Exists_Request {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Exists.Response
 */
export interface ResourceAPI_Exists_Response {
    /**
     * @generated from protobuf field: bool exists = 1
     */
    exists: boolean;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.SetError
 */
export interface ResourceAPI_SetError {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.SetError.Request
 */
export interface ResourceAPI_SetError_Request {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
    /**
     * @generated from protobuf field: uint64 error_resource_id = 2
     */
    errorResourceId: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.SetError.Response
 */
export interface ResourceAPI_SetError_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Get
 */
export interface ResourceAPI_Get {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Get.Request
 */
export interface ResourceAPI_Get_Request {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
    /**
     * @generated from protobuf field: bool load_fields = 2
     */
    loadFields: boolean;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Get.Response
 */
export interface ResourceAPI_Get_Response {
    /**
     * @generated from protobuf field: MiLaboratories.PL.API.Resource resource = 1
     */
    resource?: Resource;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.List
 */
export interface ResourceAPI_List {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.List.ByType
 */
export interface ResourceAPI_List_ByType {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.List.ByType.Request
 */
export interface ResourceAPI_List_ByType_Request {
    /**
     * @generated from protobuf field: MiLaboratories.PL.Base.ResourceType resource_type = 1
     */
    resourceType?: ResourceType;
    /**
     * Non-zero value makes API to limit its responses count to at most
     * <limit> number of items.
     * Zero value makes API to return all available items.
     *
     * @generated from protobuf field: uint32 limit = 3
     */
    limit: number;
    /**
     * Start listing from given resource ID (not including this resource ID itself)
     * After == 100 means listing will NOT contain resources with ID = 100 and lower.
     *
     * @generated from protobuf field: uint64 after = 6
     */
    after: bigint;
    /**
     * True value makes API to return original resources instead of duplicates.
     *
     * @generated from protobuf field: bool resolve_duplicates = 4
     */
    resolveDuplicates: boolean;
    /**
     * Load fields for each resource in list.
     *
     * @generated from protobuf field: bool load_fields = 5
     */
    loadFields: boolean;
}
/**
 * Multi-message
 *
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.List.ByType.Response
 */
export interface ResourceAPI_List_ByType_Response {
    /**
     * @generated from protobuf field: MiLaboratories.PL.API.Resource resource = 1
     */
    resource?: Resource;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.CreateRoot
 */
export interface ResourceAPI_CreateRoot {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.CreateRoot.Request
 */
export interface ResourceAPI_CreateRoot_Request {
    /**
     * @generated from protobuf field: uint64 id = 2
     */
    id: bigint;
    /**
     * @generated from protobuf field: MiLaboratories.PL.Base.ResourceType type = 3
     */
    type?: ResourceType;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.CreateRoot.Response
 */
export interface ResourceAPI_CreateRoot_Response {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
}
// FIXME: add CreateResource method to API

/**
 * Remove any resource, that has garbage collection disabled
 *
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Remove
 */
export interface ResourceAPI_Remove {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Remove.Request
 */
export interface ResourceAPI_Remove_Request {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Remove.Response
 */
export interface ResourceAPI_Remove_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Name
 */
export interface ResourceAPI_Name {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Name.Set
 */
export interface ResourceAPI_Name_Set {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Name.Set.Request
 */
export interface ResourceAPI_Name_Set_Request {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Name.Set.Response
 */
export interface ResourceAPI_Name_Set_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Name.Get
 */
export interface ResourceAPI_Name_Get {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Name.Get.Request
 */
export interface ResourceAPI_Name_Get_Request {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Name.Get.Response
 */
export interface ResourceAPI_Name_Get_Response {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Name.Exists
 */
export interface ResourceAPI_Name_Exists {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Name.Exists.Request
 */
export interface ResourceAPI_Name_Exists_Request {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Name.Exists.Response
 */
export interface ResourceAPI_Name_Exists_Response {
    /**
     * @generated from protobuf field: bool exists = 1
     */
    exists: boolean;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Name.Delete
 */
export interface ResourceAPI_Name_Delete {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Name.Delete.Request
 */
export interface ResourceAPI_Name_Delete_Request {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Name.Delete.Response
 */
export interface ResourceAPI_Name_Delete_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Tree
 */
export interface ResourceAPI_Tree {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Tree.Request
 */
export interface ResourceAPI_Tree_Request {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
    /**
     * Limit maximum depth the tree is traversed.
     * The resource <resource_id> is considered on depth = 0, the values of its fiels
     * are on depth = 1 and so on.
     * The maximum uint32 value disables the limit at all.
     * 0 value makes API to return only single resource <resource_id> and is actually
     * equal to Get.Request
     *
     * @generated from protobuf field: optional uint32 max_depth = 2
     */
    maxDepth?: number;
}
/**
 * Multi-message
 *
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.Tree.Response
 */
export interface ResourceAPI_Tree_Response {
    /**
     * @generated from protobuf field: MiLaboratories.PL.API.Resource resource = 1
     */
    resource?: Resource;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.TreeSize
 */
export interface ResourceAPI_TreeSize {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.TreeSize.Request
 */
export interface ResourceAPI_TreeSize_Request {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceAPI.TreeSize.Response
 */
export interface ResourceAPI_TreeSize_Response {
    /**
     * size of all tree resources in bytes
     * could change between call regarding compression algorithm
     *
     * @generated from protobuf field: uint64 size = 1
     */
    size: bigint;
    /**
     * @generated from protobuf field: uint64 resource_count = 2
     */
    resourceCount: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI
 */
export interface FieldAPI {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI.Create
 */
export interface FieldAPI_Create {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI.Create.Request
 */
export interface FieldAPI_Create_Request {
    /**
     * @generated from protobuf field: MiLaboratories.PL.Base.FieldType type = 1
     */
    type: FieldType;
    /**
     * field ID is always combination of parent resource ID and field name
     *
     * @generated from protobuf field: MiLaboratories.PL.Base.FieldRef id = 2
     */
    id?: FieldRef;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI.Create.Response
 */
export interface FieldAPI_Create_Response {
    /**
     * @generated from protobuf field: MiLaboratories.PL.Base.FieldRef global_id = 1
     */
    globalId?: FieldRef;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI.Exists
 */
export interface FieldAPI_Exists {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI.Exists.Request
 */
export interface FieldAPI_Exists_Request {
    /**
     * @generated from protobuf field: MiLaboratories.PL.Base.FieldRef field = 1
     */
    field?: FieldRef;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI.Exists.Response
 */
export interface FieldAPI_Exists_Response {
    /**
     * @generated from protobuf field: bool exists = 1
     */
    exists: boolean;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI.Set
 */
export interface FieldAPI_Set {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI.Set.Request
 */
export interface FieldAPI_Set_Request {
    /**
     * @generated from protobuf field: MiLaboratories.PL.Base.FieldRef field = 1
     */
    field?: FieldRef;
    /**
     * @generated from protobuf field: MiLaboratories.PL.Base.FieldRef value = 2
     */
    value?: FieldRef;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI.Set.Response
 */
export interface FieldAPI_Set_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI.SetError
 */
export interface FieldAPI_SetError {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI.SetError.Request
 */
export interface FieldAPI_SetError_Request {
    /**
     * @generated from protobuf field: MiLaboratories.PL.Base.FieldRef field = 1
     */
    field?: FieldRef;
    /**
     * @generated from protobuf field: uint64 err_resource_id = 2
     */
    errResourceId: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI.SetError.Response
 */
export interface FieldAPI_SetError_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI.Get
 */
export interface FieldAPI_Get {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI.Get.Request
 */
export interface FieldAPI_Get_Request {
    /**
     * @generated from protobuf field: MiLaboratories.PL.Base.FieldRef field = 1
     */
    field?: FieldRef;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI.Get.Response
 */
export interface FieldAPI_Get_Response {
    /**
     * @generated from protobuf field: MiLaboratories.PL.API.Field field = 1
     */
    field?: Field;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI.Reset
 */
export interface FieldAPI_Reset {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI.Reset.Request
 */
export interface FieldAPI_Reset_Request {
    /**
     * @generated from protobuf field: MiLaboratories.PL.Base.FieldRef field = 1
     */
    field?: FieldRef;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI.Reset.Response
 */
export interface FieldAPI_Reset_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI.Remove
 */
export interface FieldAPI_Remove {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI.Remove.Request
 */
export interface FieldAPI_Remove_Request {
    /**
     * @generated from protobuf field: MiLaboratories.PL.Base.FieldRef field = 1
     */
    field?: FieldRef;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI.Remove.Response
 */
export interface FieldAPI_Remove_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI.List
 */
export interface FieldAPI_List {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI.List.Request
 */
export interface FieldAPI_List_Request {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
    /**
     * Start the listing from given position, returning first field with
     * name >= start_from.
     *
     * @generated from protobuf field: string start_from = 2
     */
    startFrom: string;
    /**
     * Non-zero value makes API to limit number of returned fields to at
     * most <limit>.
     * Zero value makes API to return all available fields of the resource.
     *
     * @generated from protobuf field: uint32 limit = 3
     */
    limit: number;
}
/**
 * Multi-message
 *
 * @generated from protobuf message MiLaboratories.PL.API.FieldAPI.List.Response
 */
export interface FieldAPI_List_Response {
    /**
     * @generated from protobuf field: MiLaboratories.PL.API.Field field = 1
     */
    field?: Field;
    /**
     * The name of field next to the current one.
     *
     * Is not empty only for the last message in the current listing, when <limit> was > 0 in List.Request AND
     * there is more items to read (the listing was stopped because of that limit)
     *
     * Use <next> value as <start_from> in the List.Request to continue listing.
     *
     * @generated from protobuf field: string next = 4
     */
    next: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.NotificationAPI
 */
export interface NotificationAPI {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.NotificationAPI.Get
 */
export interface NotificationAPI_Get {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.NotificationAPI.Get.Request
 */
export interface NotificationAPI_Get_Request {
    /**
     * @generated from protobuf field: uint64 subscription = 1
     */
    subscription: bigint;
    /**
     * @generated from protobuf field: uint32 max_notifications = 2
     */
    maxNotifications: number;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.NotificationAPI.Get.Response
 */
export interface NotificationAPI_Get_Response {
    /**
     * @generated from protobuf field: repeated MiLaboratories.PL.API.Notification notifications = 1
     */
    notifications: Notification[];
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.NotificationAPI.Ack
 */
export interface NotificationAPI_Ack {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.NotificationAPI.Ack.Request
 */
export interface NotificationAPI_Ack_Request {
    /**
     * @generated from protobuf field: uint64 subscription_id = 1
     */
    subscriptionId: bigint;
    /**
     * @generated from protobuf field: uint64 event_id = 2
     */
    eventId: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.NotificationAPI.Ack.Response
 */
export interface NotificationAPI_Ack_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.NotificationAPI.Discard
 */
export interface NotificationAPI_Discard {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.NotificationAPI.Discard.Request
 */
export interface NotificationAPI_Discard_Request {
    /**
     * @generated from protobuf field: uint64 subscription_id = 1
     */
    subscriptionId: bigint;
    /**
     * @generated from protobuf field: uint64 event_id = 2
     */
    eventId: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.NotificationAPI.Discard.Response
 */
export interface NotificationAPI_Discard_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.SubscriptionAPI
 */
export interface SubscriptionAPI {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.SubscriptionAPI.CreateSubscription
 */
export interface SubscriptionAPI_CreateSubscription {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.SubscriptionAPI.CreateSubscription.Request
 */
export interface SubscriptionAPI_CreateSubscription_Request {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: bigint;
    /**
     * @generated from protobuf field: bool blocking = 2
     */
    blocking: boolean;
    /**
     * @generated from protobuf field: bool gc = 3
     */
    gc: boolean;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.SubscriptionAPI.CreateSubscription.Response
 */
export interface SubscriptionAPI_CreateSubscription_Response {
    /**
     * @generated from protobuf field: uint64 subscription_id = 1
     */
    subscriptionId: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.SubscriptionAPI.CreateFilter
 */
export interface SubscriptionAPI_CreateFilter {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.SubscriptionAPI.CreateFilter.Request
 */
export interface SubscriptionAPI_CreateFilter_Request {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: bigint;
    /**
     * @generated from protobuf field: MiLaboratories.PL.RTypes.NotificationFilter filter = 2
     */
    filter?: NotificationFilter;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.SubscriptionAPI.CreateFilter.Response
 */
export interface SubscriptionAPI_CreateFilter_Response {
    /**
     * @generated from protobuf field: uint64 filter_id = 1
     */
    filterId: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.SubscriptionAPI.ListSubscriptions
 */
export interface SubscriptionAPI_ListSubscriptions {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.SubscriptionAPI.ListSubscriptions.SubscriptionInfo
 */
export interface SubscriptionAPI_ListSubscriptions_SubscriptionInfo {
    /**
     * @generated from protobuf field: MiLaboratories.PL.API.Subscription subscription = 1
     */
    subscription?: Subscription;
    /**
     * TS of the moment someone last read notifications from subscription.
     * old time = stale (lost) subscription
     *
     * @generated from protobuf field: uint64 last_read_time = 2
     */
    lastReadTime: bigint;
    /**
     * number of not-yet-read notifications in subscription queue
     * (notifications subscriber is expected to get on next reads)
     *
     * @generated from protobuf field: uint64 notification_queue_size = 3
     */
    notificationQueueSize: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.SubscriptionAPI.ListSubscriptions.Request
 */
export interface SubscriptionAPI_ListSubscriptions_Request {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.SubscriptionAPI.ListSubscriptions.Response
 */
export interface SubscriptionAPI_ListSubscriptions_Response {
    /**
     * @generated from protobuf field: repeated MiLaboratories.PL.API.SubscriptionAPI.ListSubscriptions.SubscriptionInfo subscriptions = 1
     */
    subscriptions: SubscriptionAPI_ListSubscriptions_SubscriptionInfo[];
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.SubscriptionAPI.AttachFilter
 */
export interface SubscriptionAPI_AttachFilter {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.SubscriptionAPI.AttachFilter.Request
 */
export interface SubscriptionAPI_AttachFilter_Request {
    /**
     * @generated from protobuf field: uint64 subscription_id = 1
     */
    subscriptionId: bigint;
    /**
     * @generated from protobuf field: string filter_name = 2
     */
    filterName: string;
    /**
     * @generated from protobuf field: uint64 filter_id = 3
     */
    filterId: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.SubscriptionAPI.AttachFilter.Response
 */
export interface SubscriptionAPI_AttachFilter_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.SubscriptionAPI.DetachFilter
 */
export interface SubscriptionAPI_DetachFilter {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.SubscriptionAPI.DetachFilter.Request
 */
export interface SubscriptionAPI_DetachFilter_Request {
    /**
     * @generated from protobuf field: uint64 subscription_id = 1
     */
    subscriptionId: bigint;
    /**
     * @generated from protobuf field: string filter_name = 2
     */
    filterName: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.SubscriptionAPI.DetachFilter.Response
 */
export interface SubscriptionAPI_DetachFilter_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI
 */
export interface ControllerAPI {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.Register
 */
export interface ControllerAPI_Register {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.Register.Request
 */
export interface ControllerAPI_Register_Request {
    /**
     * @generated from protobuf field: string controller_type = 1
     */
    controllerType: string;
    /**
     * @generated from protobuf field: map<string, MiLaboratories.PL.RTypes.NotificationFilter> filters = 2
     */
    filters: {
        [key: string]: NotificationFilter;
    };
    /**
     * @generated from protobuf field: repeated MiLaboratories.PL.API.ResourceSchema resource_schemas = 3
     */
    resourceSchemas: ResourceSchema[];
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.Register.Response
 */
export interface ControllerAPI_Register_Response {
    /**
     * @generated from protobuf field: uint64 controller_id = 1
     */
    controllerId: bigint;
    /**
     * @generated from protobuf field: uint64 subscription_id = 2
     */
    subscriptionId: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.Exists
 */
export interface ControllerAPI_Exists {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.Exists.Request
 */
export interface ControllerAPI_Exists_Request {
    /**
     * @generated from protobuf field: string controller_type = 1
     */
    controllerType: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.Exists.Response
 */
export interface ControllerAPI_Exists_Response {
    /**
     * @generated from protobuf field: bool exists = 1
     */
    exists: boolean;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.Update
 */
export interface ControllerAPI_Update {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.Update.Request
 */
export interface ControllerAPI_Update_Request {
    /**
     * @generated from protobuf field: string controller_type = 1
     */
    controllerType: string;
    /**
     * @generated from protobuf field: map<string, MiLaboratories.PL.RTypes.NotificationFilter> filters = 2
     */
    filters: {
        [key: string]: NotificationFilter;
    };
    /**
     * @generated from protobuf field: repeated MiLaboratories.PL.API.ResourceSchema resource_schemas = 3
     */
    resourceSchemas: ResourceSchema[];
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.Update.Response
 */
export interface ControllerAPI_Update_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.Deregister
 */
export interface ControllerAPI_Deregister {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.Deregister.Request
 */
export interface ControllerAPI_Deregister_Request {
    /**
     * @generated from protobuf field: string controller_type = 1
     */
    controllerType: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.Deregister.Response
 */
export interface ControllerAPI_Deregister_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.Create
 */
export interface ControllerAPI_Create {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.Create.Request
 */
export interface ControllerAPI_Create_Request {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: bigint;
    /**
     * @generated from protobuf field: string controller_type = 2
     */
    controllerType: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.Create.Response
 */
export interface ControllerAPI_Create_Response {
    /**
     * @generated from protobuf field: uint64 controller_id = 1
     */
    controllerId: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.Get
 */
export interface ControllerAPI_Get {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.Get.Request
 */
export interface ControllerAPI_Get_Request {
    /**
     * @generated from protobuf field: string controller_type = 1
     */
    controllerType: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.Get.Response
 */
export interface ControllerAPI_Get_Response {
    /**
     * @generated from protobuf field: MiLaboratories.PL.API.Controller controller = 1
     */
    controller?: Controller;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.AttachSubscription
 */
export interface ControllerAPI_AttachSubscription {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.AttachSubscription.Request
 */
export interface ControllerAPI_AttachSubscription_Request {
    /**
     * @generated from protobuf field: uint64 controller_id = 1
     */
    controllerId: bigint;
    /**
     * @generated from protobuf field: uint64 subscription_id = 2
     */
    subscriptionId: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.AttachSubscription.Response
 */
export interface ControllerAPI_AttachSubscription_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.GetNotifications
 */
export interface ControllerAPI_GetNotifications {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.GetNotifications.Request
 */
export interface ControllerAPI_GetNotifications_Request {
    /**
     * @generated from protobuf field: string controller_type = 1
     */
    controllerType: string;
    /**
     * @generated from protobuf field: uint32 max_notifications = 2
     */
    maxNotifications: number;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.GetNotifications.Response
 */
export interface ControllerAPI_GetNotifications_Response {
    /**
     * @generated from protobuf field: repeated MiLaboratories.PL.API.Notification notifications = 1
     */
    notifications: Notification[];
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.WriteAliasesAndUrls
 */
export interface ControllerAPI_WriteAliasesAndUrls {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.WriteAliasesAndUrls.Request
 */
export interface ControllerAPI_WriteAliasesAndUrls_Request {
    /**
     * @generated from protobuf field: string controller_type = 1
     */
    controllerType: string;
    /**
     * @generated from protobuf field: map<string, string> aliases_to_urls = 2
     */
    aliasesToUrls: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.WriteAliasesAndUrls.Response
 */
export interface ControllerAPI_WriteAliasesAndUrls_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.GetUrl
 */
export interface ControllerAPI_GetUrl {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.GetUrl.Request
 */
export interface ControllerAPI_GetUrl_Request {
    /**
     * @generated from protobuf field: string controller_alias = 1
     */
    controllerAlias: string;
    /**
     * @generated from protobuf field: uint64 resource_id = 2
     */
    resourceId: bigint;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.GetUrl.Response
 */
export interface ControllerAPI_GetUrl_Response {
    /**
     * @generated from protobuf field: string controller_url = 2
     */
    controllerUrl: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.RemoveAliasesAndUrls
 */
export interface ControllerAPI_RemoveAliasesAndUrls {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.RemoveAliasesAndUrls.Request
 */
export interface ControllerAPI_RemoveAliasesAndUrls_Request {
    /**
     * @generated from protobuf field: string controller_type = 1
     */
    controllerType: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.RemoveAliasesAndUrls.Response
 */
export interface ControllerAPI_RemoveAliasesAndUrls_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.SetFeatures
 */
export interface ControllerAPI_SetFeatures {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.SetFeatures.Request
 */
export interface ControllerAPI_SetFeatures_Request {
    /**
     * @generated from protobuf field: repeated MiLaboratories.PL.API.ResourceAPIFeature features = 2
     */
    features: ResourceAPIFeature[];
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.SetFeatures.Response
 */
export interface ControllerAPI_SetFeatures_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.ClearFeatures
 */
export interface ControllerAPI_ClearFeatures {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.ClearFeatures.Request
 */
export interface ControllerAPI_ClearFeatures_Request {
    /**
     * @generated from protobuf field: string controller_type = 1
     */
    controllerType: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerAPI.ClearFeatures.Response
 */
export interface ControllerAPI_ClearFeatures_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceKVAPI
 */
export interface ResourceKVAPI {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceKVAPI.List
 */
export interface ResourceKVAPI_List {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceKVAPI.List.Request
 */
export interface ResourceKVAPI_List_Request {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
    /**
     * Start the listing from given position, returning first item with
     * key >= start_from.
     *
     * @generated from protobuf field: string start_from = 2
     */
    startFrom: string;
    /**
     * Non-zero value makes API to limit its responses count to at most
     * <limit> number of items.
     * Zero value makes API to return all available items.
     *
     * @generated from protobuf field: uint32 limit = 3
     */
    limit: number;
}
/**
 * Multi-message
 *
 * @generated from protobuf message MiLaboratories.PL.API.ResourceKVAPI.List.Response
 */
export interface ResourceKVAPI_List_Response {
    /**
     * @generated from protobuf field: MiLaboratories.PL.API.ResourceKVAPI.List.Response.KV record = 1
     */
    record?: ResourceKVAPI_List_Response_KV;
    /**
     * The key of the KV item next to the last returned item.
     *
     * Is not empty only for the last message in the current listing, when <limit> was > 0 in List.Request AND
     * there is more items to read (the listing was stopped because of that limit)
     *
     * Use <next> value as <start_from> of the List.Request to continue listing.
     *
     * @generated from protobuf field: string next = 4
     */
    next: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceKVAPI.List.Response.KV
 */
export interface ResourceKVAPI_List_Response_KV {
    /**
     * @generated from protobuf field: string key = 2
     */
    key: string;
    /**
     * @generated from protobuf field: bytes value = 3
     */
    value: Uint8Array;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceKVAPI.Set
 */
export interface ResourceKVAPI_Set {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceKVAPI.Set.Request
 */
export interface ResourceKVAPI_Set_Request {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
    /**
     * @generated from protobuf field: string key = 2
     */
    key: string;
    /**
     * @generated from protobuf field: bytes value = 3
     */
    value: Uint8Array;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceKVAPI.Set.Response
 */
export interface ResourceKVAPI_Set_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceKVAPI.Get
 */
export interface ResourceKVAPI_Get {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceKVAPI.Get.Request
 */
export interface ResourceKVAPI_Get_Request {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
    /**
     * @generated from protobuf field: string key = 2
     */
    key: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceKVAPI.Get.Response
 */
export interface ResourceKVAPI_Get_Response {
    /**
     * @generated from protobuf field: bytes value = 1
     */
    value: Uint8Array;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceKVAPI.GetIfExists
 */
export interface ResourceKVAPI_GetIfExists {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceKVAPI.GetIfExists.Request
 */
export interface ResourceKVAPI_GetIfExists_Request {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
    /**
     * @generated from protobuf field: string key = 2
     */
    key: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceKVAPI.GetIfExists.Response
 */
export interface ResourceKVAPI_GetIfExists_Response {
    /**
     * @generated from protobuf field: bytes value = 1
     */
    value: Uint8Array;
    /**
     * @generated from protobuf field: bool exists = 2
     */
    exists: boolean;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceKVAPI.Delete
 */
export interface ResourceKVAPI_Delete {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceKVAPI.Delete.Request
 */
export interface ResourceKVAPI_Delete_Request {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
    /**
     * @generated from protobuf field: string key = 2
     */
    key: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceKVAPI.Delete.Response
 */
export interface ResourceKVAPI_Delete_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceKVAPI.SetFlag
 */
export interface ResourceKVAPI_SetFlag {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceKVAPI.SetFlag.Request
 */
export interface ResourceKVAPI_SetFlag_Request {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
    /**
     * @generated from protobuf field: string key = 2
     */
    key: string;
    /**
     * @generated from protobuf field: bool value = 3
     */
    value: boolean;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceKVAPI.SetFlag.Response
 */
export interface ResourceKVAPI_SetFlag_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceKVAPI.GetFlag
 */
export interface ResourceKVAPI_GetFlag {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceKVAPI.GetFlag.Request
 */
export interface ResourceKVAPI_GetFlag_Request {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
    /**
     * @generated from protobuf field: string key = 2
     */
    key: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ResourceKVAPI.GetFlag.Response
 */
export interface ResourceKVAPI_GetFlag_Response {
    /**
     * @generated from protobuf field: bool value = 1
     */
    value: boolean;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerKVAPI
 */
export interface ControllerKVAPI {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerKVAPI.Set
 */
export interface ControllerKVAPI_Set {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerKVAPI.Set.Request
 */
export interface ControllerKVAPI_Set_Request {
    /**
     * @generated from protobuf field: string controller_type = 1
     */
    controllerType: string;
    /**
     * @generated from protobuf field: string key = 2
     */
    key: string;
    /**
     * @generated from protobuf field: bytes value = 3
     */
    value: Uint8Array;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerKVAPI.Set.Response
 */
export interface ControllerKVAPI_Set_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerKVAPI.Get
 */
export interface ControllerKVAPI_Get {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerKVAPI.Get.Request
 */
export interface ControllerKVAPI_Get_Request {
    /**
     * @generated from protobuf field: string controller_type = 1
     */
    controllerType: string;
    /**
     * @generated from protobuf field: string key = 2
     */
    key: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerKVAPI.Get.Response
 */
export interface ControllerKVAPI_Get_Response {
    /**
     * @generated from protobuf field: bytes value = 1
     */
    value: Uint8Array;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerKVAPI.GetIfExists
 */
export interface ControllerKVAPI_GetIfExists {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerKVAPI.GetIfExists.Request
 */
export interface ControllerKVAPI_GetIfExists_Request {
    /**
     * @generated from protobuf field: string controller_type = 1
     */
    controllerType: string;
    /**
     * @generated from protobuf field: string key = 2
     */
    key: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerKVAPI.GetIfExists.Response
 */
export interface ControllerKVAPI_GetIfExists_Response {
    /**
     * @generated from protobuf field: bytes value = 1
     */
    value: Uint8Array;
    /**
     * @generated from protobuf field: bool exists = 2
     */
    exists: boolean;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerKVAPI.SetFlag
 */
export interface ControllerKVAPI_SetFlag {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerKVAPI.SetFlag.Request
 */
export interface ControllerKVAPI_SetFlag_Request {
    /**
     * @generated from protobuf field: string controller_type = 1
     */
    controllerType: string;
    /**
     * @generated from protobuf field: string key = 2
     */
    key: string;
    /**
     * @generated from protobuf field: bool value = 3
     */
    value: boolean;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerKVAPI.SetFlag.Response
 */
export interface ControllerKVAPI_SetFlag_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerKVAPI.GetFlag
 */
export interface ControllerKVAPI_GetFlag {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerKVAPI.GetFlag.Request
 */
export interface ControllerKVAPI_GetFlag_Request {
    /**
     * @generated from protobuf field: string controller_type = 1
     */
    controllerType: string;
    /**
     * @generated from protobuf field: string key = 2
     */
    key: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerKVAPI.GetFlag.Response
 */
export interface ControllerKVAPI_GetFlag_Response {
    /**
     * @generated from protobuf field: bool value = 1
     */
    value: boolean;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerKVAPI.GetFlagIfExists
 */
export interface ControllerKVAPI_GetFlagIfExists {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerKVAPI.GetFlagIfExists.Request
 */
export interface ControllerKVAPI_GetFlagIfExists_Request {
    /**
     * @generated from protobuf field: string controller_type = 1
     */
    controllerType: string;
    /**
     * @generated from protobuf field: string key = 2
     */
    key: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.ControllerKVAPI.GetFlagIfExists.Response
 */
export interface ControllerKVAPI_GetFlagIfExists_Response {
    /**
     * @generated from protobuf field: bool value = 1
     */
    value: boolean;
    /**
     * @generated from protobuf field: bool exists = 2
     */
    exists: boolean;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.CacheAPI
 */
export interface CacheAPI {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.CacheAPI.SetToField
 */
export interface CacheAPI_SetToField {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.CacheAPI.SetToField.Request
 */
export interface CacheAPI_SetToField_Request {
    /**
     * @generated from protobuf field: MiLaboratories.PL.Base.FieldRef id = 1
     */
    id?: FieldRef;
    /**
     * @generated from protobuf field: google.protobuf.Duration period = 2
     */
    period?: Duration;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.CacheAPI.SetToField.Response
 */
export interface CacheAPI_SetToField_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.CacheAPI.DeleteExpiredRecords
 */
export interface CacheAPI_DeleteExpiredRecords {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.CacheAPI.DeleteExpiredRecords.Request
 */
export interface CacheAPI_DeleteExpiredRecords_Request {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.CacheAPI.DeleteExpiredRecords.Response
 */
export interface CacheAPI_DeleteExpiredRecords_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.LocksAPI
 */
export interface LocksAPI {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.LocksAPI.Lease
 */
export interface LocksAPI_Lease {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.LocksAPI.Lease.Create
 */
export interface LocksAPI_Lease_Create {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.LocksAPI.Lease.Create.Request
 */
export interface LocksAPI_Lease_Create_Request {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
    /**
     * @generated from protobuf field: google.protobuf.Duration timeout = 3
     */
    timeout?: Duration;
    /**
     * @generated from protobuf field: string name = 4
     */
    name: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.LocksAPI.Lease.Create.Response
 */
export interface LocksAPI_Lease_Create_Response {
    /**
     * @generated from protobuf field: bytes lease_id = 1
     */
    leaseId: Uint8Array;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.LocksAPI.Lease.Update
 */
export interface LocksAPI_Lease_Update {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.LocksAPI.Lease.Update.Request
 */
export interface LocksAPI_Lease_Update_Request {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
    /**
     * @generated from protobuf field: bytes lease_id = 2
     */
    leaseId: Uint8Array;
    /**
     * @generated from protobuf field: google.protobuf.Duration timeout = 3
     */
    timeout?: Duration;
    /**
     * @generated from protobuf field: string name = 4
     */
    name: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.LocksAPI.Lease.Update.Response
 */
export interface LocksAPI_Lease_Update_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.LocksAPI.Lease.Release
 */
export interface LocksAPI_Lease_Release {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.LocksAPI.Lease.Release.Request
 */
export interface LocksAPI_Lease_Release_Request {
    /**
     * @generated from protobuf field: uint64 resource_id = 1
     */
    resourceId: bigint;
    /**
     * @generated from protobuf field: bytes lease_id = 2
     */
    leaseId: Uint8Array;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.LocksAPI.Lease.Release.Response
 */
export interface LocksAPI_Lease_Release_Response {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.AuthAPI
 */
export interface AuthAPI {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.AuthAPI.ListMethods
 */
export interface AuthAPI_ListMethods {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.AuthAPI.ListMethods.Request
 */
export interface AuthAPI_ListMethods_Request {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.AuthAPI.ListMethods.Response
 */
export interface AuthAPI_ListMethods_Response {
    /**
     * @generated from protobuf field: repeated MiLaboratories.PL.API.AuthAPI.ListMethods.MethodInfo methods = 1
     */
    methods: AuthAPI_ListMethods_MethodInfo[];
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.AuthAPI.ListMethods.MethodInfo
 */
export interface AuthAPI_ListMethods_MethodInfo {
    /**
     * @generated from protobuf field: string type = 1
     */
    type: string;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: map<string, string> info = 3
     */
    info: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.AuthAPI.GetJWTToken
 */
export interface AuthAPI_GetJWTToken {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.AuthAPI.GetJWTToken.Request
 */
export interface AuthAPI_GetJWTToken_Request {
    /**
     * @generated from protobuf field: google.protobuf.Duration expiration = 1
     */
    expiration?: Duration;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.AuthAPI.GetJWTToken.Response
 */
export interface AuthAPI_GetJWTToken_Response {
    /**
     * @generated from protobuf field: string token = 1
     */
    token: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.MiscAPI
 */
export interface MiscAPI {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.MiscAPI.ListResourceTypes
 */
export interface MiscAPI_ListResourceTypes {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.MiscAPI.ListResourceTypes.Request
 */
export interface MiscAPI_ListResourceTypes_Request {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.MiscAPI.ListResourceTypes.Response
 */
export interface MiscAPI_ListResourceTypes_Response {
    /**
     * @generated from protobuf field: repeated MiLaboratories.PL.Base.ResourceType types = 1
     */
    types: ResourceType[];
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.MaintenanceAPI
 */
export interface MaintenanceAPI {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.MaintenanceAPI.Ping
 */
export interface MaintenanceAPI_Ping {
}
/**
 * Early connection check
 *
 * @generated from protobuf message MiLaboratories.PL.API.MaintenanceAPI.Ping.Request
 */
export interface MaintenanceAPI_Ping_Request {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.MaintenanceAPI.Ping.Response
 */
export interface MaintenanceAPI_Ping_Response {
    /**
     * @generated from protobuf field: string core_version = 1
     */
    coreVersion: string;
    /**
     * @generated from protobuf field: string core_full_version = 2
     */
    coreFullVersion: string;
    /**
     * @generated from protobuf field: string server_info = 3
     */
    serverInfo: string;
    /**
     * @generated from protobuf field: MiLaboratories.PL.API.MaintenanceAPI.Ping.Response.Compression compression = 4
     */
    compression: MaintenanceAPI_Ping_Response_Compression;
    /**
     * instanceID is a unique ID that changes when we reset DB state.
     * If we reset a state and a database, but the address of the backend is still the same,
     * without instanceID we are not sure if it's the same state or not,
     * and UI can't detect it and clear its state (e.g. caches of drivers).
     *
     * @generated from protobuf field: string instance_id = 5
     */
    instanceId: string;
    /**
     * @generated from protobuf field: string platform = 6
     */
    platform: string; // <os>-<arch>
    /**
     * @generated from protobuf field: string os = 7
     */
    os: string; // linux / windows / macosx
    /**
     * @generated from protobuf field: string arch = 8
     */
    arch: string; // x64 / aarch64
}
/**
 * @generated from protobuf enum MiLaboratories.PL.API.MaintenanceAPI.Ping.Response.Compression
 */
export enum MaintenanceAPI_Ping_Response_Compression {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: GZIP = 1;
     */
    GZIP = 1
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.MaintenanceAPI.License
 */
export interface MaintenanceAPI_License {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.MaintenanceAPI.License.Request
 */
export interface MaintenanceAPI_License_Request {
}
/**
 * @generated from protobuf message MiLaboratories.PL.API.MaintenanceAPI.License.Response
 */
export interface MaintenanceAPI_License_Response {
    /**
     * @generated from protobuf field: int32 status = 1
     */
    status: number; // HTTP status code of the last valid response from license server.
    /**
     * @generated from protobuf field: bool is_ok = 2
     */
    isOk: boolean; // true if status is 200
    /**
     * Raw response body as it was received from the license server.
     *
     * @generated from protobuf field: bytes response_body = 3
     */
    responseBody: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class TxAPI$Type extends MessageType<TxAPI> {
    constructor() {
        super("MiLaboratories.PL.API.TxAPI", []);
    }
    create(value?: PartialMessage<TxAPI>): TxAPI {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TxAPI>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TxAPI): TxAPI {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TxAPI, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.TxAPI
 */
export const TxAPI = new TxAPI$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TxAPI_ClientMessage$Type extends MessageType<TxAPI_ClientMessage> {
    constructor() {
        super("MiLaboratories.PL.API.TxAPI.ClientMessage", [
            { no: 1, name: "request_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "tx_open", kind: "message", oneof: "request", T: () => TxAPI_Open_Request },
            { no: 12, name: "tx_commit", kind: "message", oneof: "request", T: () => TxAPI_Commit_Request },
            { no: 13, name: "tx_discard", kind: "message", oneof: "request", T: () => TxAPI_Discard_Request },
            { no: 58, name: "resource_create_root", kind: "message", oneof: "request", T: () => ResourceAPI_CreateRoot_Request },
            { no: 57, name: "resource_remove", kind: "message", oneof: "request", T: () => ResourceAPI_Remove_Request },
            { no: 51, name: "resource_create_struct", kind: "message", oneof: "request", T: () => ResourceAPI_CreateStruct_Request },
            { no: 62, name: "resource_create_ephemeral", kind: "message", oneof: "request", T: () => ResourceAPI_CreateEphemeral_Request },
            { no: 52, name: "resource_create_value", kind: "message", oneof: "request", T: () => ResourceAPI_CreateValue_Request },
            { no: 63, name: "resource_get_value_id", kind: "message", oneof: "request", T: () => ResourceAPI_GetValueID_Request },
            { no: 64, name: "resource_create_singleton", kind: "message", oneof: "request", T: () => ResourceAPI_CreateSingleton_Request },
            { no: 65, name: "resource_get_singleton", kind: "message", oneof: "request", T: () => ResourceAPI_GetSingleton_Request },
            { no: 59, name: "resource_create_child", kind: "message", oneof: "request", T: () => ResourceAPI_CreateChild_Request },
            { no: 53, name: "resource_lock_inputs", kind: "message", oneof: "request", T: () => ResourceAPI_LockInputs_Request },
            { no: 56, name: "resource_lock_outputs", kind: "message", oneof: "request", T: () => ResourceAPI_LockOutputs_Request },
            { no: 54, name: "resource_exists", kind: "message", oneof: "request", T: () => ResourceAPI_Exists_Request },
            { no: 55, name: "resource_get", kind: "message", oneof: "request", T: () => ResourceAPI_Get_Request },
            { no: 61, name: "resource_set_error", kind: "message", oneof: "request", T: () => ResourceAPI_SetError_Request },
            { no: 60, name: "resource_list_by_type", kind: "message", oneof: "request", T: () => ResourceAPI_List_ByType_Request },
            { no: 66, name: "resource_name_set", kind: "message", oneof: "request", T: () => ResourceAPI_Name_Set_Request },
            { no: 67, name: "resource_name_get", kind: "message", oneof: "request", T: () => ResourceAPI_Name_Get_Request },
            { no: 68, name: "resource_name_exists", kind: "message", oneof: "request", T: () => ResourceAPI_Name_Exists_Request },
            { no: 69, name: "resource_name_delete", kind: "message", oneof: "request", T: () => ResourceAPI_Name_Delete_Request },
            { no: 70, name: "resource_tree", kind: "message", oneof: "request", T: () => ResourceAPI_Tree_Request },
            { no: 71, name: "resource_tree_size", kind: "message", oneof: "request", T: () => ResourceAPI_TreeSize_Request },
            { no: 101, name: "field_create", kind: "message", oneof: "request", T: () => FieldAPI_Create_Request },
            { no: 107, name: "field_exists", kind: "message", oneof: "request", T: () => FieldAPI_Exists_Request },
            { no: 102, name: "field_set", kind: "message", oneof: "request", T: () => FieldAPI_Set_Request },
            { no: 105, name: "field_set_error", kind: "message", oneof: "request", T: () => FieldAPI_SetError_Request },
            { no: 103, name: "field_get", kind: "message", oneof: "request", T: () => FieldAPI_Get_Request },
            { no: 104, name: "field_reset", kind: "message", oneof: "request", T: () => FieldAPI_Reset_Request },
            { no: 106, name: "field_remove", kind: "message", oneof: "request", T: () => FieldAPI_Remove_Request },
            { no: 108, name: "field_list", kind: "message", oneof: "request", T: () => FieldAPI_List_Request },
            { no: 111, name: "subscription_create", kind: "message", oneof: "request", T: () => SubscriptionAPI_CreateSubscription_Request },
            { no: 112, name: "subscription_attach_filter", kind: "message", oneof: "request", T: () => SubscriptionAPI_AttachFilter_Request },
            { no: 113, name: "subscription_detach_filter", kind: "message", oneof: "request", T: () => SubscriptionAPI_DetachFilter_Request },
            { no: 115, name: "subscription_create_filter", kind: "message", oneof: "request", T: () => SubscriptionAPI_CreateFilter_Request },
            { no: 154, name: "notification_get", kind: "message", oneof: "request", T: () => NotificationAPI_Get_Request },
            { no: 155, name: "notification_ack", kind: "message", oneof: "request", T: () => NotificationAPI_Ack_Request },
            { no: 156, name: "notification_discard", kind: "message", oneof: "request", T: () => NotificationAPI_Discard_Request },
            { no: 200, name: "resource_key_value_set", kind: "message", oneof: "request", T: () => ResourceKVAPI_Set_Request },
            { no: 201, name: "resource_key_value_get", kind: "message", oneof: "request", T: () => ResourceKVAPI_Get_Request },
            { no: 202, name: "resource_key_value_get_if_exists", kind: "message", oneof: "request", T: () => ResourceKVAPI_GetIfExists_Request },
            { no: 203, name: "resource_key_value_set_flag", kind: "message", oneof: "request", T: () => ResourceKVAPI_SetFlag_Request },
            { no: 204, name: "resource_key_value_get_flag", kind: "message", oneof: "request", T: () => ResourceKVAPI_GetFlag_Request },
            { no: 205, name: "resource_key_value_get_flag_if_exists", kind: "message", oneof: "request", T: () => ResourceKVAPI_GetFlag_Request },
            { no: 206, name: "resource_key_value_delete", kind: "message", oneof: "request", T: () => ResourceKVAPI_Delete_Request },
            { no: 207, name: "resource_key_value_list", kind: "message", oneof: "request", T: () => ResourceKVAPI_List_Request },
            { no: 250, name: "controller_key_value_set", kind: "message", oneof: "request", T: () => ControllerKVAPI_Set_Request },
            { no: 251, name: "controller_key_value_get", kind: "message", oneof: "request", T: () => ControllerKVAPI_Get_Request },
            { no: 252, name: "controller_key_value_get_if_exists", kind: "message", oneof: "request", T: () => ControllerKVAPI_GetIfExists_Request },
            { no: 253, name: "controller_key_value_set_flag", kind: "message", oneof: "request", T: () => ControllerKVAPI_SetFlag_Request },
            { no: 254, name: "controller_key_value_get_flag", kind: "message", oneof: "request", T: () => ControllerKVAPI_GetFlag_Request },
            { no: 255, name: "controller_key_value_get_flag_if_exists", kind: "message", oneof: "request", T: () => ControllerKVAPI_GetFlagIfExists_Request },
            { no: 300, name: "cache_set_to_field", kind: "message", oneof: "request", T: () => CacheAPI_SetToField_Request },
            { no: 301, name: "cache_delete_expired_records", kind: "message", oneof: "request", T: () => CacheAPI_DeleteExpiredRecords_Request },
            { no: 350, name: "controller_features_set", kind: "message", oneof: "request", T: () => ControllerAPI_SetFeatures_Request },
            { no: 351, name: "controller_features_clear", kind: "message", oneof: "request", T: () => ControllerAPI_ClearFeatures_Request }
        ]);
    }
    create(value?: PartialMessage<TxAPI_ClientMessage>): TxAPI_ClientMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requestId = 0;
        message.request = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<TxAPI_ClientMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TxAPI_ClientMessage): TxAPI_ClientMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 request_id */ 1:
                    message.requestId = reader.uint32();
                    break;
                case /* MiLaboratories.PL.API.TxAPI.Open.Request tx_open */ 11:
                    message.request = {
                        oneofKind: "txOpen",
                        txOpen: TxAPI_Open_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).txOpen)
                    };
                    break;
                case /* MiLaboratories.PL.API.TxAPI.Commit.Request tx_commit */ 12:
                    message.request = {
                        oneofKind: "txCommit",
                        txCommit: TxAPI_Commit_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).txCommit)
                    };
                    break;
                case /* MiLaboratories.PL.API.TxAPI.Discard.Request tx_discard */ 13:
                    message.request = {
                        oneofKind: "txDiscard",
                        txDiscard: TxAPI_Discard_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).txDiscard)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.CreateRoot.Request resource_create_root */ 58:
                    message.request = {
                        oneofKind: "resourceCreateRoot",
                        resourceCreateRoot: ResourceAPI_CreateRoot_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceCreateRoot)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.Remove.Request resource_remove */ 57:
                    message.request = {
                        oneofKind: "resourceRemove",
                        resourceRemove: ResourceAPI_Remove_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceRemove)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.CreateStruct.Request resource_create_struct */ 51:
                    message.request = {
                        oneofKind: "resourceCreateStruct",
                        resourceCreateStruct: ResourceAPI_CreateStruct_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceCreateStruct)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.CreateEphemeral.Request resource_create_ephemeral */ 62:
                    message.request = {
                        oneofKind: "resourceCreateEphemeral",
                        resourceCreateEphemeral: ResourceAPI_CreateEphemeral_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceCreateEphemeral)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.CreateValue.Request resource_create_value */ 52:
                    message.request = {
                        oneofKind: "resourceCreateValue",
                        resourceCreateValue: ResourceAPI_CreateValue_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceCreateValue)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.GetValueID.Request resource_get_value_id */ 63:
                    message.request = {
                        oneofKind: "resourceGetValueId",
                        resourceGetValueId: ResourceAPI_GetValueID_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceGetValueId)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.CreateSingleton.Request resource_create_singleton */ 64:
                    message.request = {
                        oneofKind: "resourceCreateSingleton",
                        resourceCreateSingleton: ResourceAPI_CreateSingleton_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceCreateSingleton)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.GetSingleton.Request resource_get_singleton */ 65:
                    message.request = {
                        oneofKind: "resourceGetSingleton",
                        resourceGetSingleton: ResourceAPI_GetSingleton_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceGetSingleton)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.CreateChild.Request resource_create_child */ 59:
                    message.request = {
                        oneofKind: "resourceCreateChild",
                        resourceCreateChild: ResourceAPI_CreateChild_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceCreateChild)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.LockInputs.Request resource_lock_inputs */ 53:
                    message.request = {
                        oneofKind: "resourceLockInputs",
                        resourceLockInputs: ResourceAPI_LockInputs_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceLockInputs)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.LockOutputs.Request resource_lock_outputs */ 56:
                    message.request = {
                        oneofKind: "resourceLockOutputs",
                        resourceLockOutputs: ResourceAPI_LockOutputs_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceLockOutputs)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.Exists.Request resource_exists */ 54:
                    message.request = {
                        oneofKind: "resourceExists",
                        resourceExists: ResourceAPI_Exists_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceExists)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.Get.Request resource_get */ 55:
                    message.request = {
                        oneofKind: "resourceGet",
                        resourceGet: ResourceAPI_Get_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceGet)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.SetError.Request resource_set_error */ 61:
                    message.request = {
                        oneofKind: "resourceSetError",
                        resourceSetError: ResourceAPI_SetError_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceSetError)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.List.ByType.Request resource_list_by_type */ 60:
                    message.request = {
                        oneofKind: "resourceListByType",
                        resourceListByType: ResourceAPI_List_ByType_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceListByType)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.Name.Set.Request resource_name_set */ 66:
                    message.request = {
                        oneofKind: "resourceNameSet",
                        resourceNameSet: ResourceAPI_Name_Set_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceNameSet)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.Name.Get.Request resource_name_get */ 67:
                    message.request = {
                        oneofKind: "resourceNameGet",
                        resourceNameGet: ResourceAPI_Name_Get_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceNameGet)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.Name.Exists.Request resource_name_exists */ 68:
                    message.request = {
                        oneofKind: "resourceNameExists",
                        resourceNameExists: ResourceAPI_Name_Exists_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceNameExists)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.Name.Delete.Request resource_name_delete */ 69:
                    message.request = {
                        oneofKind: "resourceNameDelete",
                        resourceNameDelete: ResourceAPI_Name_Delete_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceNameDelete)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.Tree.Request resource_tree */ 70:
                    message.request = {
                        oneofKind: "resourceTree",
                        resourceTree: ResourceAPI_Tree_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceTree)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.TreeSize.Request resource_tree_size */ 71:
                    message.request = {
                        oneofKind: "resourceTreeSize",
                        resourceTreeSize: ResourceAPI_TreeSize_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceTreeSize)
                    };
                    break;
                case /* MiLaboratories.PL.API.FieldAPI.Create.Request field_create */ 101:
                    message.request = {
                        oneofKind: "fieldCreate",
                        fieldCreate: FieldAPI_Create_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).fieldCreate)
                    };
                    break;
                case /* MiLaboratories.PL.API.FieldAPI.Exists.Request field_exists */ 107:
                    message.request = {
                        oneofKind: "fieldExists",
                        fieldExists: FieldAPI_Exists_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).fieldExists)
                    };
                    break;
                case /* MiLaboratories.PL.API.FieldAPI.Set.Request field_set */ 102:
                    message.request = {
                        oneofKind: "fieldSet",
                        fieldSet: FieldAPI_Set_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).fieldSet)
                    };
                    break;
                case /* MiLaboratories.PL.API.FieldAPI.SetError.Request field_set_error */ 105:
                    message.request = {
                        oneofKind: "fieldSetError",
                        fieldSetError: FieldAPI_SetError_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).fieldSetError)
                    };
                    break;
                case /* MiLaboratories.PL.API.FieldAPI.Get.Request field_get */ 103:
                    message.request = {
                        oneofKind: "fieldGet",
                        fieldGet: FieldAPI_Get_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).fieldGet)
                    };
                    break;
                case /* MiLaboratories.PL.API.FieldAPI.Reset.Request field_reset */ 104:
                    message.request = {
                        oneofKind: "fieldReset",
                        fieldReset: FieldAPI_Reset_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).fieldReset)
                    };
                    break;
                case /* MiLaboratories.PL.API.FieldAPI.Remove.Request field_remove */ 106:
                    message.request = {
                        oneofKind: "fieldRemove",
                        fieldRemove: FieldAPI_Remove_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).fieldRemove)
                    };
                    break;
                case /* MiLaboratories.PL.API.FieldAPI.List.Request field_list */ 108:
                    message.request = {
                        oneofKind: "fieldList",
                        fieldList: FieldAPI_List_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).fieldList)
                    };
                    break;
                case /* MiLaboratories.PL.API.SubscriptionAPI.CreateSubscription.Request subscription_create */ 111:
                    message.request = {
                        oneofKind: "subscriptionCreate",
                        subscriptionCreate: SubscriptionAPI_CreateSubscription_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).subscriptionCreate)
                    };
                    break;
                case /* MiLaboratories.PL.API.SubscriptionAPI.AttachFilter.Request subscription_attach_filter */ 112:
                    message.request = {
                        oneofKind: "subscriptionAttachFilter",
                        subscriptionAttachFilter: SubscriptionAPI_AttachFilter_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).subscriptionAttachFilter)
                    };
                    break;
                case /* MiLaboratories.PL.API.SubscriptionAPI.DetachFilter.Request subscription_detach_filter */ 113:
                    message.request = {
                        oneofKind: "subscriptionDetachFilter",
                        subscriptionDetachFilter: SubscriptionAPI_DetachFilter_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).subscriptionDetachFilter)
                    };
                    break;
                case /* MiLaboratories.PL.API.SubscriptionAPI.CreateFilter.Request subscription_create_filter */ 115:
                    message.request = {
                        oneofKind: "subscriptionCreateFilter",
                        subscriptionCreateFilter: SubscriptionAPI_CreateFilter_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).subscriptionCreateFilter)
                    };
                    break;
                case /* MiLaboratories.PL.API.NotificationAPI.Get.Request notification_get */ 154:
                    message.request = {
                        oneofKind: "notificationGet",
                        notificationGet: NotificationAPI_Get_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).notificationGet)
                    };
                    break;
                case /* MiLaboratories.PL.API.NotificationAPI.Ack.Request notification_ack */ 155:
                    message.request = {
                        oneofKind: "notificationAck",
                        notificationAck: NotificationAPI_Ack_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).notificationAck)
                    };
                    break;
                case /* MiLaboratories.PL.API.NotificationAPI.Discard.Request notification_discard */ 156:
                    message.request = {
                        oneofKind: "notificationDiscard",
                        notificationDiscard: NotificationAPI_Discard_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).notificationDiscard)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceKVAPI.Set.Request resource_key_value_set */ 200:
                    message.request = {
                        oneofKind: "resourceKeyValueSet",
                        resourceKeyValueSet: ResourceKVAPI_Set_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceKeyValueSet)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceKVAPI.Get.Request resource_key_value_get */ 201:
                    message.request = {
                        oneofKind: "resourceKeyValueGet",
                        resourceKeyValueGet: ResourceKVAPI_Get_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceKeyValueGet)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceKVAPI.GetIfExists.Request resource_key_value_get_if_exists */ 202:
                    message.request = {
                        oneofKind: "resourceKeyValueGetIfExists",
                        resourceKeyValueGetIfExists: ResourceKVAPI_GetIfExists_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceKeyValueGetIfExists)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceKVAPI.SetFlag.Request resource_key_value_set_flag */ 203:
                    message.request = {
                        oneofKind: "resourceKeyValueSetFlag",
                        resourceKeyValueSetFlag: ResourceKVAPI_SetFlag_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceKeyValueSetFlag)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceKVAPI.GetFlag.Request resource_key_value_get_flag */ 204:
                    message.request = {
                        oneofKind: "resourceKeyValueGetFlag",
                        resourceKeyValueGetFlag: ResourceKVAPI_GetFlag_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceKeyValueGetFlag)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceKVAPI.GetFlag.Request resource_key_value_get_flag_if_exists */ 205:
                    message.request = {
                        oneofKind: "resourceKeyValueGetFlagIfExists",
                        resourceKeyValueGetFlagIfExists: ResourceKVAPI_GetFlag_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceKeyValueGetFlagIfExists)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceKVAPI.Delete.Request resource_key_value_delete */ 206:
                    message.request = {
                        oneofKind: "resourceKeyValueDelete",
                        resourceKeyValueDelete: ResourceKVAPI_Delete_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceKeyValueDelete)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceKVAPI.List.Request resource_key_value_list */ 207:
                    message.request = {
                        oneofKind: "resourceKeyValueList",
                        resourceKeyValueList: ResourceKVAPI_List_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resourceKeyValueList)
                    };
                    break;
                case /* MiLaboratories.PL.API.ControllerKVAPI.Set.Request controller_key_value_set */ 250:
                    message.request = {
                        oneofKind: "controllerKeyValueSet",
                        controllerKeyValueSet: ControllerKVAPI_Set_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).controllerKeyValueSet)
                    };
                    break;
                case /* MiLaboratories.PL.API.ControllerKVAPI.Get.Request controller_key_value_get */ 251:
                    message.request = {
                        oneofKind: "controllerKeyValueGet",
                        controllerKeyValueGet: ControllerKVAPI_Get_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).controllerKeyValueGet)
                    };
                    break;
                case /* MiLaboratories.PL.API.ControllerKVAPI.GetIfExists.Request controller_key_value_get_if_exists */ 252:
                    message.request = {
                        oneofKind: "controllerKeyValueGetIfExists",
                        controllerKeyValueGetIfExists: ControllerKVAPI_GetIfExists_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).controllerKeyValueGetIfExists)
                    };
                    break;
                case /* MiLaboratories.PL.API.ControllerKVAPI.SetFlag.Request controller_key_value_set_flag */ 253:
                    message.request = {
                        oneofKind: "controllerKeyValueSetFlag",
                        controllerKeyValueSetFlag: ControllerKVAPI_SetFlag_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).controllerKeyValueSetFlag)
                    };
                    break;
                case /* MiLaboratories.PL.API.ControllerKVAPI.GetFlag.Request controller_key_value_get_flag */ 254:
                    message.request = {
                        oneofKind: "controllerKeyValueGetFlag",
                        controllerKeyValueGetFlag: ControllerKVAPI_GetFlag_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).controllerKeyValueGetFlag)
                    };
                    break;
                case /* MiLaboratories.PL.API.ControllerKVAPI.GetFlagIfExists.Request controller_key_value_get_flag_if_exists */ 255:
                    message.request = {
                        oneofKind: "controllerKeyValueGetFlagIfExists",
                        controllerKeyValueGetFlagIfExists: ControllerKVAPI_GetFlagIfExists_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).controllerKeyValueGetFlagIfExists)
                    };
                    break;
                case /* MiLaboratories.PL.API.CacheAPI.SetToField.Request cache_set_to_field */ 300:
                    message.request = {
                        oneofKind: "cacheSetToField",
                        cacheSetToField: CacheAPI_SetToField_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).cacheSetToField)
                    };
                    break;
                case /* MiLaboratories.PL.API.CacheAPI.DeleteExpiredRecords.Request cache_delete_expired_records */ 301:
                    message.request = {
                        oneofKind: "cacheDeleteExpiredRecords",
                        cacheDeleteExpiredRecords: CacheAPI_DeleteExpiredRecords_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).cacheDeleteExpiredRecords)
                    };
                    break;
                case /* MiLaboratories.PL.API.ControllerAPI.SetFeatures.Request controller_features_set */ 350:
                    message.request = {
                        oneofKind: "controllerFeaturesSet",
                        controllerFeaturesSet: ControllerAPI_SetFeatures_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).controllerFeaturesSet)
                    };
                    break;
                case /* MiLaboratories.PL.API.ControllerAPI.ClearFeatures.Request controller_features_clear */ 351:
                    message.request = {
                        oneofKind: "controllerFeaturesClear",
                        controllerFeaturesClear: ControllerAPI_ClearFeatures_Request.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).controllerFeaturesClear)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TxAPI_ClientMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 request_id = 1; */
        if (message.requestId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.requestId);
        /* MiLaboratories.PL.API.TxAPI.Open.Request tx_open = 11; */
        if (message.request.oneofKind === "txOpen")
            TxAPI_Open_Request.internalBinaryWrite(message.request.txOpen, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.TxAPI.Commit.Request tx_commit = 12; */
        if (message.request.oneofKind === "txCommit")
            TxAPI_Commit_Request.internalBinaryWrite(message.request.txCommit, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.TxAPI.Discard.Request tx_discard = 13; */
        if (message.request.oneofKind === "txDiscard")
            TxAPI_Discard_Request.internalBinaryWrite(message.request.txDiscard, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.CreateStruct.Request resource_create_struct = 51; */
        if (message.request.oneofKind === "resourceCreateStruct")
            ResourceAPI_CreateStruct_Request.internalBinaryWrite(message.request.resourceCreateStruct, writer.tag(51, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.CreateValue.Request resource_create_value = 52; */
        if (message.request.oneofKind === "resourceCreateValue")
            ResourceAPI_CreateValue_Request.internalBinaryWrite(message.request.resourceCreateValue, writer.tag(52, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.LockInputs.Request resource_lock_inputs = 53; */
        if (message.request.oneofKind === "resourceLockInputs")
            ResourceAPI_LockInputs_Request.internalBinaryWrite(message.request.resourceLockInputs, writer.tag(53, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.Exists.Request resource_exists = 54; */
        if (message.request.oneofKind === "resourceExists")
            ResourceAPI_Exists_Request.internalBinaryWrite(message.request.resourceExists, writer.tag(54, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.Get.Request resource_get = 55; */
        if (message.request.oneofKind === "resourceGet")
            ResourceAPI_Get_Request.internalBinaryWrite(message.request.resourceGet, writer.tag(55, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.LockOutputs.Request resource_lock_outputs = 56; */
        if (message.request.oneofKind === "resourceLockOutputs")
            ResourceAPI_LockOutputs_Request.internalBinaryWrite(message.request.resourceLockOutputs, writer.tag(56, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.Remove.Request resource_remove = 57; */
        if (message.request.oneofKind === "resourceRemove")
            ResourceAPI_Remove_Request.internalBinaryWrite(message.request.resourceRemove, writer.tag(57, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.CreateRoot.Request resource_create_root = 58; */
        if (message.request.oneofKind === "resourceCreateRoot")
            ResourceAPI_CreateRoot_Request.internalBinaryWrite(message.request.resourceCreateRoot, writer.tag(58, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.CreateChild.Request resource_create_child = 59; */
        if (message.request.oneofKind === "resourceCreateChild")
            ResourceAPI_CreateChild_Request.internalBinaryWrite(message.request.resourceCreateChild, writer.tag(59, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.List.ByType.Request resource_list_by_type = 60; */
        if (message.request.oneofKind === "resourceListByType")
            ResourceAPI_List_ByType_Request.internalBinaryWrite(message.request.resourceListByType, writer.tag(60, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.SetError.Request resource_set_error = 61; */
        if (message.request.oneofKind === "resourceSetError")
            ResourceAPI_SetError_Request.internalBinaryWrite(message.request.resourceSetError, writer.tag(61, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.CreateEphemeral.Request resource_create_ephemeral = 62; */
        if (message.request.oneofKind === "resourceCreateEphemeral")
            ResourceAPI_CreateEphemeral_Request.internalBinaryWrite(message.request.resourceCreateEphemeral, writer.tag(62, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.GetValueID.Request resource_get_value_id = 63; */
        if (message.request.oneofKind === "resourceGetValueId")
            ResourceAPI_GetValueID_Request.internalBinaryWrite(message.request.resourceGetValueId, writer.tag(63, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.CreateSingleton.Request resource_create_singleton = 64; */
        if (message.request.oneofKind === "resourceCreateSingleton")
            ResourceAPI_CreateSingleton_Request.internalBinaryWrite(message.request.resourceCreateSingleton, writer.tag(64, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.GetSingleton.Request resource_get_singleton = 65; */
        if (message.request.oneofKind === "resourceGetSingleton")
            ResourceAPI_GetSingleton_Request.internalBinaryWrite(message.request.resourceGetSingleton, writer.tag(65, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.Name.Set.Request resource_name_set = 66; */
        if (message.request.oneofKind === "resourceNameSet")
            ResourceAPI_Name_Set_Request.internalBinaryWrite(message.request.resourceNameSet, writer.tag(66, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.Name.Get.Request resource_name_get = 67; */
        if (message.request.oneofKind === "resourceNameGet")
            ResourceAPI_Name_Get_Request.internalBinaryWrite(message.request.resourceNameGet, writer.tag(67, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.Name.Exists.Request resource_name_exists = 68; */
        if (message.request.oneofKind === "resourceNameExists")
            ResourceAPI_Name_Exists_Request.internalBinaryWrite(message.request.resourceNameExists, writer.tag(68, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.Name.Delete.Request resource_name_delete = 69; */
        if (message.request.oneofKind === "resourceNameDelete")
            ResourceAPI_Name_Delete_Request.internalBinaryWrite(message.request.resourceNameDelete, writer.tag(69, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.Tree.Request resource_tree = 70; */
        if (message.request.oneofKind === "resourceTree")
            ResourceAPI_Tree_Request.internalBinaryWrite(message.request.resourceTree, writer.tag(70, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.TreeSize.Request resource_tree_size = 71; */
        if (message.request.oneofKind === "resourceTreeSize")
            ResourceAPI_TreeSize_Request.internalBinaryWrite(message.request.resourceTreeSize, writer.tag(71, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.FieldAPI.Create.Request field_create = 101; */
        if (message.request.oneofKind === "fieldCreate")
            FieldAPI_Create_Request.internalBinaryWrite(message.request.fieldCreate, writer.tag(101, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.FieldAPI.Set.Request field_set = 102; */
        if (message.request.oneofKind === "fieldSet")
            FieldAPI_Set_Request.internalBinaryWrite(message.request.fieldSet, writer.tag(102, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.FieldAPI.Get.Request field_get = 103; */
        if (message.request.oneofKind === "fieldGet")
            FieldAPI_Get_Request.internalBinaryWrite(message.request.fieldGet, writer.tag(103, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.FieldAPI.Reset.Request field_reset = 104; */
        if (message.request.oneofKind === "fieldReset")
            FieldAPI_Reset_Request.internalBinaryWrite(message.request.fieldReset, writer.tag(104, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.FieldAPI.SetError.Request field_set_error = 105; */
        if (message.request.oneofKind === "fieldSetError")
            FieldAPI_SetError_Request.internalBinaryWrite(message.request.fieldSetError, writer.tag(105, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.FieldAPI.Remove.Request field_remove = 106; */
        if (message.request.oneofKind === "fieldRemove")
            FieldAPI_Remove_Request.internalBinaryWrite(message.request.fieldRemove, writer.tag(106, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.FieldAPI.Exists.Request field_exists = 107; */
        if (message.request.oneofKind === "fieldExists")
            FieldAPI_Exists_Request.internalBinaryWrite(message.request.fieldExists, writer.tag(107, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.FieldAPI.List.Request field_list = 108; */
        if (message.request.oneofKind === "fieldList")
            FieldAPI_List_Request.internalBinaryWrite(message.request.fieldList, writer.tag(108, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.SubscriptionAPI.CreateSubscription.Request subscription_create = 111; */
        if (message.request.oneofKind === "subscriptionCreate")
            SubscriptionAPI_CreateSubscription_Request.internalBinaryWrite(message.request.subscriptionCreate, writer.tag(111, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.SubscriptionAPI.AttachFilter.Request subscription_attach_filter = 112; */
        if (message.request.oneofKind === "subscriptionAttachFilter")
            SubscriptionAPI_AttachFilter_Request.internalBinaryWrite(message.request.subscriptionAttachFilter, writer.tag(112, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.SubscriptionAPI.DetachFilter.Request subscription_detach_filter = 113; */
        if (message.request.oneofKind === "subscriptionDetachFilter")
            SubscriptionAPI_DetachFilter_Request.internalBinaryWrite(message.request.subscriptionDetachFilter, writer.tag(113, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.SubscriptionAPI.CreateFilter.Request subscription_create_filter = 115; */
        if (message.request.oneofKind === "subscriptionCreateFilter")
            SubscriptionAPI_CreateFilter_Request.internalBinaryWrite(message.request.subscriptionCreateFilter, writer.tag(115, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.NotificationAPI.Get.Request notification_get = 154; */
        if (message.request.oneofKind === "notificationGet")
            NotificationAPI_Get_Request.internalBinaryWrite(message.request.notificationGet, writer.tag(154, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.NotificationAPI.Ack.Request notification_ack = 155; */
        if (message.request.oneofKind === "notificationAck")
            NotificationAPI_Ack_Request.internalBinaryWrite(message.request.notificationAck, writer.tag(155, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.NotificationAPI.Discard.Request notification_discard = 156; */
        if (message.request.oneofKind === "notificationDiscard")
            NotificationAPI_Discard_Request.internalBinaryWrite(message.request.notificationDiscard, writer.tag(156, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceKVAPI.Set.Request resource_key_value_set = 200; */
        if (message.request.oneofKind === "resourceKeyValueSet")
            ResourceKVAPI_Set_Request.internalBinaryWrite(message.request.resourceKeyValueSet, writer.tag(200, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceKVAPI.Get.Request resource_key_value_get = 201; */
        if (message.request.oneofKind === "resourceKeyValueGet")
            ResourceKVAPI_Get_Request.internalBinaryWrite(message.request.resourceKeyValueGet, writer.tag(201, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceKVAPI.GetIfExists.Request resource_key_value_get_if_exists = 202; */
        if (message.request.oneofKind === "resourceKeyValueGetIfExists")
            ResourceKVAPI_GetIfExists_Request.internalBinaryWrite(message.request.resourceKeyValueGetIfExists, writer.tag(202, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceKVAPI.SetFlag.Request resource_key_value_set_flag = 203; */
        if (message.request.oneofKind === "resourceKeyValueSetFlag")
            ResourceKVAPI_SetFlag_Request.internalBinaryWrite(message.request.resourceKeyValueSetFlag, writer.tag(203, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceKVAPI.GetFlag.Request resource_key_value_get_flag = 204; */
        if (message.request.oneofKind === "resourceKeyValueGetFlag")
            ResourceKVAPI_GetFlag_Request.internalBinaryWrite(message.request.resourceKeyValueGetFlag, writer.tag(204, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceKVAPI.GetFlag.Request resource_key_value_get_flag_if_exists = 205; */
        if (message.request.oneofKind === "resourceKeyValueGetFlagIfExists")
            ResourceKVAPI_GetFlag_Request.internalBinaryWrite(message.request.resourceKeyValueGetFlagIfExists, writer.tag(205, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceKVAPI.Delete.Request resource_key_value_delete = 206; */
        if (message.request.oneofKind === "resourceKeyValueDelete")
            ResourceKVAPI_Delete_Request.internalBinaryWrite(message.request.resourceKeyValueDelete, writer.tag(206, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceKVAPI.List.Request resource_key_value_list = 207; */
        if (message.request.oneofKind === "resourceKeyValueList")
            ResourceKVAPI_List_Request.internalBinaryWrite(message.request.resourceKeyValueList, writer.tag(207, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ControllerKVAPI.Set.Request controller_key_value_set = 250; */
        if (message.request.oneofKind === "controllerKeyValueSet")
            ControllerKVAPI_Set_Request.internalBinaryWrite(message.request.controllerKeyValueSet, writer.tag(250, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ControllerKVAPI.Get.Request controller_key_value_get = 251; */
        if (message.request.oneofKind === "controllerKeyValueGet")
            ControllerKVAPI_Get_Request.internalBinaryWrite(message.request.controllerKeyValueGet, writer.tag(251, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ControllerKVAPI.GetIfExists.Request controller_key_value_get_if_exists = 252; */
        if (message.request.oneofKind === "controllerKeyValueGetIfExists")
            ControllerKVAPI_GetIfExists_Request.internalBinaryWrite(message.request.controllerKeyValueGetIfExists, writer.tag(252, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ControllerKVAPI.SetFlag.Request controller_key_value_set_flag = 253; */
        if (message.request.oneofKind === "controllerKeyValueSetFlag")
            ControllerKVAPI_SetFlag_Request.internalBinaryWrite(message.request.controllerKeyValueSetFlag, writer.tag(253, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ControllerKVAPI.GetFlag.Request controller_key_value_get_flag = 254; */
        if (message.request.oneofKind === "controllerKeyValueGetFlag")
            ControllerKVAPI_GetFlag_Request.internalBinaryWrite(message.request.controllerKeyValueGetFlag, writer.tag(254, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ControllerKVAPI.GetFlagIfExists.Request controller_key_value_get_flag_if_exists = 255; */
        if (message.request.oneofKind === "controllerKeyValueGetFlagIfExists")
            ControllerKVAPI_GetFlagIfExists_Request.internalBinaryWrite(message.request.controllerKeyValueGetFlagIfExists, writer.tag(255, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.CacheAPI.SetToField.Request cache_set_to_field = 300; */
        if (message.request.oneofKind === "cacheSetToField")
            CacheAPI_SetToField_Request.internalBinaryWrite(message.request.cacheSetToField, writer.tag(300, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.CacheAPI.DeleteExpiredRecords.Request cache_delete_expired_records = 301; */
        if (message.request.oneofKind === "cacheDeleteExpiredRecords")
            CacheAPI_DeleteExpiredRecords_Request.internalBinaryWrite(message.request.cacheDeleteExpiredRecords, writer.tag(301, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ControllerAPI.SetFeatures.Request controller_features_set = 350; */
        if (message.request.oneofKind === "controllerFeaturesSet")
            ControllerAPI_SetFeatures_Request.internalBinaryWrite(message.request.controllerFeaturesSet, writer.tag(350, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ControllerAPI.ClearFeatures.Request controller_features_clear = 351; */
        if (message.request.oneofKind === "controllerFeaturesClear")
            ControllerAPI_ClearFeatures_Request.internalBinaryWrite(message.request.controllerFeaturesClear, writer.tag(351, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.TxAPI.ClientMessage
 */
export const TxAPI_ClientMessage = new TxAPI_ClientMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TxAPI_ServerMessage$Type extends MessageType<TxAPI_ServerMessage> {
    constructor() {
        super("MiLaboratories.PL.API.TxAPI.ServerMessage", [
            { no: 1, name: "request_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "multi_message", kind: "message", T: () => TxAPI_ServerMessage_Multi },
            { no: 11, name: "tx_open", kind: "message", oneof: "response", T: () => TxAPI_Open_Response },
            { no: 12, name: "tx_commit", kind: "message", oneof: "response", T: () => TxAPI_Commit_Response },
            { no: 13, name: "tx_discard", kind: "message", oneof: "response", T: () => TxAPI_Discard_Response },
            { no: 58, name: "resource_create_root", kind: "message", oneof: "response", T: () => ResourceAPI_CreateRoot_Response },
            { no: 57, name: "resource_remove", kind: "message", oneof: "response", T: () => ResourceAPI_Remove_Response },
            { no: 51, name: "resource_create_struct", kind: "message", oneof: "response", T: () => ResourceAPI_CreateStruct_Response },
            { no: 62, name: "resource_create_ephemeral", kind: "message", oneof: "response", T: () => ResourceAPI_CreateEphemeral_Response },
            { no: 52, name: "resource_create_value", kind: "message", oneof: "response", T: () => ResourceAPI_CreateValue_Response },
            { no: 63, name: "resource_get_value_id", kind: "message", oneof: "response", T: () => ResourceAPI_GetValueID_Response },
            { no: 64, name: "resource_create_singleton", kind: "message", oneof: "response", T: () => ResourceAPI_CreateSingleton_Response },
            { no: 65, name: "resource_get_singleton", kind: "message", oneof: "response", T: () => ResourceAPI_GetSingleton_Response },
            { no: 59, name: "resource_create_child", kind: "message", oneof: "response", T: () => ResourceAPI_CreateChild_Response },
            { no: 53, name: "resource_lock_inputs", kind: "message", oneof: "response", T: () => ResourceAPI_LockInputs_Response },
            { no: 56, name: "resource_lock_outputs", kind: "message", oneof: "response", T: () => ResourceAPI_LockOutputs_Response },
            { no: 54, name: "resource_exists", kind: "message", oneof: "response", T: () => ResourceAPI_Exists_Response },
            { no: 55, name: "resource_get", kind: "message", oneof: "response", T: () => ResourceAPI_Get_Response },
            { no: 61, name: "resource_set_error", kind: "message", oneof: "response", T: () => ResourceAPI_SetError_Response },
            { no: 60, name: "resource_list_by_type", kind: "message", oneof: "response", T: () => ResourceAPI_List_ByType_Response },
            { no: 66, name: "resource_name_set", kind: "message", oneof: "response", T: () => ResourceAPI_Name_Set_Response },
            { no: 67, name: "resource_name_get", kind: "message", oneof: "response", T: () => ResourceAPI_Name_Get_Response },
            { no: 68, name: "resource_name_exists", kind: "message", oneof: "response", T: () => ResourceAPI_Name_Exists_Response },
            { no: 69, name: "resource_name_delete", kind: "message", oneof: "response", T: () => ResourceAPI_Name_Delete_Response },
            { no: 70, name: "resource_tree", kind: "message", oneof: "response", T: () => ResourceAPI_Tree_Response },
            { no: 71, name: "resource_tree_size", kind: "message", oneof: "response", T: () => ResourceAPI_TreeSize_Response },
            { no: 101, name: "field_create", kind: "message", oneof: "response", T: () => FieldAPI_Create_Response },
            { no: 107, name: "field_exists", kind: "message", oneof: "response", T: () => FieldAPI_Exists_Response },
            { no: 102, name: "field_set", kind: "message", oneof: "response", T: () => FieldAPI_Set_Response },
            { no: 105, name: "field_set_error", kind: "message", oneof: "response", T: () => FieldAPI_SetError_Response },
            { no: 103, name: "field_get", kind: "message", oneof: "response", T: () => FieldAPI_Get_Response },
            { no: 104, name: "field_reset", kind: "message", oneof: "response", T: () => FieldAPI_Reset_Response },
            { no: 106, name: "field_remove", kind: "message", oneof: "response", T: () => FieldAPI_Remove_Response },
            { no: 108, name: "field_list", kind: "message", oneof: "response", T: () => FieldAPI_List_Response },
            { no: 111, name: "subscription_create", kind: "message", oneof: "response", T: () => SubscriptionAPI_CreateSubscription_Response },
            { no: 115, name: "subscription_create_filter", kind: "message", oneof: "response", T: () => SubscriptionAPI_CreateFilter_Response },
            { no: 112, name: "subscription_attach_filter", kind: "message", oneof: "response", T: () => SubscriptionAPI_AttachFilter_Response },
            { no: 113, name: "subscription_detach_filter", kind: "message", oneof: "response", T: () => SubscriptionAPI_DetachFilter_Response },
            { no: 154, name: "notification_get", kind: "message", oneof: "response", T: () => NotificationAPI_Get_Response },
            { no: 155, name: "notification_ack", kind: "message", oneof: "response", T: () => NotificationAPI_Ack_Response },
            { no: 156, name: "notification_discard", kind: "message", oneof: "response", T: () => NotificationAPI_Discard_Response },
            { no: 200, name: "resource_key_value_set", kind: "message", oneof: "response", T: () => ResourceKVAPI_Set_Response },
            { no: 201, name: "resource_key_value_get", kind: "message", oneof: "response", T: () => ResourceKVAPI_Get_Response },
            { no: 202, name: "resource_key_value_get_if_exists", kind: "message", oneof: "response", T: () => ResourceKVAPI_GetIfExists_Response },
            { no: 203, name: "resource_key_value_set_flag", kind: "message", oneof: "response", T: () => ResourceKVAPI_SetFlag_Response },
            { no: 204, name: "resource_key_value_get_flag", kind: "message", oneof: "response", T: () => ResourceKVAPI_GetFlag_Response },
            { no: 205, name: "resource_key_value_get_flag_if_exists", kind: "message", oneof: "response", T: () => ResourceKVAPI_GetFlag_Response },
            { no: 206, name: "resource_key_value_delete", kind: "message", oneof: "response", T: () => ResourceKVAPI_Delete_Response },
            { no: 207, name: "resource_key_value_list", kind: "message", oneof: "response", T: () => ResourceKVAPI_List_Response },
            { no: 250, name: "controller_key_value_set", kind: "message", oneof: "response", T: () => ControllerKVAPI_Set_Response },
            { no: 251, name: "controller_key_value_get", kind: "message", oneof: "response", T: () => ControllerKVAPI_Get_Response },
            { no: 252, name: "controller_key_value_get_if_exists", kind: "message", oneof: "response", T: () => ControllerKVAPI_GetIfExists_Response },
            { no: 253, name: "controller_key_value_set_flag", kind: "message", oneof: "response", T: () => ControllerKVAPI_SetFlag_Response },
            { no: 254, name: "controller_key_value_get_flag", kind: "message", oneof: "response", T: () => ControllerKVAPI_GetFlag_Response },
            { no: 255, name: "controller_key_value_get_flag_if_exists", kind: "message", oneof: "response", T: () => ControllerKVAPI_GetFlagIfExists_Response },
            { no: 300, name: "cache_set_to_field", kind: "message", oneof: "response", T: () => CacheAPI_SetToField_Response },
            { no: 301, name: "cache_delete_expired_records", kind: "message", oneof: "response", T: () => CacheAPI_DeleteExpiredRecords_Response },
            { no: 350, name: "controller_features_set", kind: "message", oneof: "response", T: () => ControllerAPI_SetFeatures_Response },
            { no: 351, name: "controller_features_clear", kind: "message", oneof: "response", T: () => ControllerAPI_ClearFeatures_Response },
            { no: 3, name: "error", kind: "message", T: () => Status }
        ]);
    }
    create(value?: PartialMessage<TxAPI_ServerMessage>): TxAPI_ServerMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requestId = 0;
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<TxAPI_ServerMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TxAPI_ServerMessage): TxAPI_ServerMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 request_id */ 1:
                    message.requestId = reader.uint32();
                    break;
                case /* MiLaboratories.PL.API.TxAPI.ServerMessage.Multi multi_message */ 2:
                    message.multiMessage = TxAPI_ServerMessage_Multi.internalBinaryRead(reader, reader.uint32(), options, message.multiMessage);
                    break;
                case /* MiLaboratories.PL.API.TxAPI.Open.Response tx_open */ 11:
                    message.response = {
                        oneofKind: "txOpen",
                        txOpen: TxAPI_Open_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).txOpen)
                    };
                    break;
                case /* MiLaboratories.PL.API.TxAPI.Commit.Response tx_commit */ 12:
                    message.response = {
                        oneofKind: "txCommit",
                        txCommit: TxAPI_Commit_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).txCommit)
                    };
                    break;
                case /* MiLaboratories.PL.API.TxAPI.Discard.Response tx_discard */ 13:
                    message.response = {
                        oneofKind: "txDiscard",
                        txDiscard: TxAPI_Discard_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).txDiscard)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.CreateRoot.Response resource_create_root */ 58:
                    message.response = {
                        oneofKind: "resourceCreateRoot",
                        resourceCreateRoot: ResourceAPI_CreateRoot_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceCreateRoot)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.Remove.Response resource_remove */ 57:
                    message.response = {
                        oneofKind: "resourceRemove",
                        resourceRemove: ResourceAPI_Remove_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceRemove)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.CreateStruct.Response resource_create_struct */ 51:
                    message.response = {
                        oneofKind: "resourceCreateStruct",
                        resourceCreateStruct: ResourceAPI_CreateStruct_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceCreateStruct)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.CreateEphemeral.Response resource_create_ephemeral */ 62:
                    message.response = {
                        oneofKind: "resourceCreateEphemeral",
                        resourceCreateEphemeral: ResourceAPI_CreateEphemeral_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceCreateEphemeral)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.CreateValue.Response resource_create_value */ 52:
                    message.response = {
                        oneofKind: "resourceCreateValue",
                        resourceCreateValue: ResourceAPI_CreateValue_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceCreateValue)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.GetValueID.Response resource_get_value_id */ 63:
                    message.response = {
                        oneofKind: "resourceGetValueId",
                        resourceGetValueId: ResourceAPI_GetValueID_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceGetValueId)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.CreateSingleton.Response resource_create_singleton */ 64:
                    message.response = {
                        oneofKind: "resourceCreateSingleton",
                        resourceCreateSingleton: ResourceAPI_CreateSingleton_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceCreateSingleton)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.GetSingleton.Response resource_get_singleton */ 65:
                    message.response = {
                        oneofKind: "resourceGetSingleton",
                        resourceGetSingleton: ResourceAPI_GetSingleton_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceGetSingleton)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.CreateChild.Response resource_create_child */ 59:
                    message.response = {
                        oneofKind: "resourceCreateChild",
                        resourceCreateChild: ResourceAPI_CreateChild_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceCreateChild)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.LockInputs.Response resource_lock_inputs */ 53:
                    message.response = {
                        oneofKind: "resourceLockInputs",
                        resourceLockInputs: ResourceAPI_LockInputs_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceLockInputs)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.LockOutputs.Response resource_lock_outputs */ 56:
                    message.response = {
                        oneofKind: "resourceLockOutputs",
                        resourceLockOutputs: ResourceAPI_LockOutputs_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceLockOutputs)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.Exists.Response resource_exists */ 54:
                    message.response = {
                        oneofKind: "resourceExists",
                        resourceExists: ResourceAPI_Exists_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceExists)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.Get.Response resource_get */ 55:
                    message.response = {
                        oneofKind: "resourceGet",
                        resourceGet: ResourceAPI_Get_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceGet)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.SetError.Response resource_set_error */ 61:
                    message.response = {
                        oneofKind: "resourceSetError",
                        resourceSetError: ResourceAPI_SetError_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceSetError)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.List.ByType.Response resource_list_by_type */ 60:
                    message.response = {
                        oneofKind: "resourceListByType",
                        resourceListByType: ResourceAPI_List_ByType_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceListByType)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.Name.Set.Response resource_name_set */ 66:
                    message.response = {
                        oneofKind: "resourceNameSet",
                        resourceNameSet: ResourceAPI_Name_Set_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceNameSet)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.Name.Get.Response resource_name_get */ 67:
                    message.response = {
                        oneofKind: "resourceNameGet",
                        resourceNameGet: ResourceAPI_Name_Get_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceNameGet)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.Name.Exists.Response resource_name_exists */ 68:
                    message.response = {
                        oneofKind: "resourceNameExists",
                        resourceNameExists: ResourceAPI_Name_Exists_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceNameExists)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.Name.Delete.Response resource_name_delete */ 69:
                    message.response = {
                        oneofKind: "resourceNameDelete",
                        resourceNameDelete: ResourceAPI_Name_Delete_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceNameDelete)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.Tree.Response resource_tree */ 70:
                    message.response = {
                        oneofKind: "resourceTree",
                        resourceTree: ResourceAPI_Tree_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceTree)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceAPI.TreeSize.Response resource_tree_size */ 71:
                    message.response = {
                        oneofKind: "resourceTreeSize",
                        resourceTreeSize: ResourceAPI_TreeSize_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceTreeSize)
                    };
                    break;
                case /* MiLaboratories.PL.API.FieldAPI.Create.Response field_create */ 101:
                    message.response = {
                        oneofKind: "fieldCreate",
                        fieldCreate: FieldAPI_Create_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).fieldCreate)
                    };
                    break;
                case /* MiLaboratories.PL.API.FieldAPI.Exists.Response field_exists */ 107:
                    message.response = {
                        oneofKind: "fieldExists",
                        fieldExists: FieldAPI_Exists_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).fieldExists)
                    };
                    break;
                case /* MiLaboratories.PL.API.FieldAPI.Set.Response field_set */ 102:
                    message.response = {
                        oneofKind: "fieldSet",
                        fieldSet: FieldAPI_Set_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).fieldSet)
                    };
                    break;
                case /* MiLaboratories.PL.API.FieldAPI.SetError.Response field_set_error */ 105:
                    message.response = {
                        oneofKind: "fieldSetError",
                        fieldSetError: FieldAPI_SetError_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).fieldSetError)
                    };
                    break;
                case /* MiLaboratories.PL.API.FieldAPI.Get.Response field_get */ 103:
                    message.response = {
                        oneofKind: "fieldGet",
                        fieldGet: FieldAPI_Get_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).fieldGet)
                    };
                    break;
                case /* MiLaboratories.PL.API.FieldAPI.Reset.Response field_reset */ 104:
                    message.response = {
                        oneofKind: "fieldReset",
                        fieldReset: FieldAPI_Reset_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).fieldReset)
                    };
                    break;
                case /* MiLaboratories.PL.API.FieldAPI.Remove.Response field_remove */ 106:
                    message.response = {
                        oneofKind: "fieldRemove",
                        fieldRemove: FieldAPI_Remove_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).fieldRemove)
                    };
                    break;
                case /* MiLaboratories.PL.API.FieldAPI.List.Response field_list */ 108:
                    message.response = {
                        oneofKind: "fieldList",
                        fieldList: FieldAPI_List_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).fieldList)
                    };
                    break;
                case /* MiLaboratories.PL.API.SubscriptionAPI.CreateSubscription.Response subscription_create */ 111:
                    message.response = {
                        oneofKind: "subscriptionCreate",
                        subscriptionCreate: SubscriptionAPI_CreateSubscription_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).subscriptionCreate)
                    };
                    break;
                case /* MiLaboratories.PL.API.SubscriptionAPI.CreateFilter.Response subscription_create_filter */ 115:
                    message.response = {
                        oneofKind: "subscriptionCreateFilter",
                        subscriptionCreateFilter: SubscriptionAPI_CreateFilter_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).subscriptionCreateFilter)
                    };
                    break;
                case /* MiLaboratories.PL.API.SubscriptionAPI.AttachFilter.Response subscription_attach_filter */ 112:
                    message.response = {
                        oneofKind: "subscriptionAttachFilter",
                        subscriptionAttachFilter: SubscriptionAPI_AttachFilter_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).subscriptionAttachFilter)
                    };
                    break;
                case /* MiLaboratories.PL.API.SubscriptionAPI.DetachFilter.Response subscription_detach_filter */ 113:
                    message.response = {
                        oneofKind: "subscriptionDetachFilter",
                        subscriptionDetachFilter: SubscriptionAPI_DetachFilter_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).subscriptionDetachFilter)
                    };
                    break;
                case /* MiLaboratories.PL.API.NotificationAPI.Get.Response notification_get */ 154:
                    message.response = {
                        oneofKind: "notificationGet",
                        notificationGet: NotificationAPI_Get_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).notificationGet)
                    };
                    break;
                case /* MiLaboratories.PL.API.NotificationAPI.Ack.Response notification_ack */ 155:
                    message.response = {
                        oneofKind: "notificationAck",
                        notificationAck: NotificationAPI_Ack_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).notificationAck)
                    };
                    break;
                case /* MiLaboratories.PL.API.NotificationAPI.Discard.Response notification_discard */ 156:
                    message.response = {
                        oneofKind: "notificationDiscard",
                        notificationDiscard: NotificationAPI_Discard_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).notificationDiscard)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceKVAPI.Set.Response resource_key_value_set */ 200:
                    message.response = {
                        oneofKind: "resourceKeyValueSet",
                        resourceKeyValueSet: ResourceKVAPI_Set_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceKeyValueSet)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceKVAPI.Get.Response resource_key_value_get */ 201:
                    message.response = {
                        oneofKind: "resourceKeyValueGet",
                        resourceKeyValueGet: ResourceKVAPI_Get_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceKeyValueGet)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceKVAPI.GetIfExists.Response resource_key_value_get_if_exists */ 202:
                    message.response = {
                        oneofKind: "resourceKeyValueGetIfExists",
                        resourceKeyValueGetIfExists: ResourceKVAPI_GetIfExists_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceKeyValueGetIfExists)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceKVAPI.SetFlag.Response resource_key_value_set_flag */ 203:
                    message.response = {
                        oneofKind: "resourceKeyValueSetFlag",
                        resourceKeyValueSetFlag: ResourceKVAPI_SetFlag_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceKeyValueSetFlag)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceKVAPI.GetFlag.Response resource_key_value_get_flag */ 204:
                    message.response = {
                        oneofKind: "resourceKeyValueGetFlag",
                        resourceKeyValueGetFlag: ResourceKVAPI_GetFlag_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceKeyValueGetFlag)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceKVAPI.GetFlag.Response resource_key_value_get_flag_if_exists */ 205:
                    message.response = {
                        oneofKind: "resourceKeyValueGetFlagIfExists",
                        resourceKeyValueGetFlagIfExists: ResourceKVAPI_GetFlag_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceKeyValueGetFlagIfExists)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceKVAPI.Delete.Response resource_key_value_delete */ 206:
                    message.response = {
                        oneofKind: "resourceKeyValueDelete",
                        resourceKeyValueDelete: ResourceKVAPI_Delete_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceKeyValueDelete)
                    };
                    break;
                case /* MiLaboratories.PL.API.ResourceKVAPI.List.Response resource_key_value_list */ 207:
                    message.response = {
                        oneofKind: "resourceKeyValueList",
                        resourceKeyValueList: ResourceKVAPI_List_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).resourceKeyValueList)
                    };
                    break;
                case /* MiLaboratories.PL.API.ControllerKVAPI.Set.Response controller_key_value_set */ 250:
                    message.response = {
                        oneofKind: "controllerKeyValueSet",
                        controllerKeyValueSet: ControllerKVAPI_Set_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).controllerKeyValueSet)
                    };
                    break;
                case /* MiLaboratories.PL.API.ControllerKVAPI.Get.Response controller_key_value_get */ 251:
                    message.response = {
                        oneofKind: "controllerKeyValueGet",
                        controllerKeyValueGet: ControllerKVAPI_Get_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).controllerKeyValueGet)
                    };
                    break;
                case /* MiLaboratories.PL.API.ControllerKVAPI.GetIfExists.Response controller_key_value_get_if_exists */ 252:
                    message.response = {
                        oneofKind: "controllerKeyValueGetIfExists",
                        controllerKeyValueGetIfExists: ControllerKVAPI_GetIfExists_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).controllerKeyValueGetIfExists)
                    };
                    break;
                case /* MiLaboratories.PL.API.ControllerKVAPI.SetFlag.Response controller_key_value_set_flag */ 253:
                    message.response = {
                        oneofKind: "controllerKeyValueSetFlag",
                        controllerKeyValueSetFlag: ControllerKVAPI_SetFlag_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).controllerKeyValueSetFlag)
                    };
                    break;
                case /* MiLaboratories.PL.API.ControllerKVAPI.GetFlag.Response controller_key_value_get_flag */ 254:
                    message.response = {
                        oneofKind: "controllerKeyValueGetFlag",
                        controllerKeyValueGetFlag: ControllerKVAPI_GetFlag_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).controllerKeyValueGetFlag)
                    };
                    break;
                case /* MiLaboratories.PL.API.ControllerKVAPI.GetFlagIfExists.Response controller_key_value_get_flag_if_exists */ 255:
                    message.response = {
                        oneofKind: "controllerKeyValueGetFlagIfExists",
                        controllerKeyValueGetFlagIfExists: ControllerKVAPI_GetFlagIfExists_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).controllerKeyValueGetFlagIfExists)
                    };
                    break;
                case /* MiLaboratories.PL.API.CacheAPI.SetToField.Response cache_set_to_field */ 300:
                    message.response = {
                        oneofKind: "cacheSetToField",
                        cacheSetToField: CacheAPI_SetToField_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).cacheSetToField)
                    };
                    break;
                case /* MiLaboratories.PL.API.CacheAPI.DeleteExpiredRecords.Response cache_delete_expired_records */ 301:
                    message.response = {
                        oneofKind: "cacheDeleteExpiredRecords",
                        cacheDeleteExpiredRecords: CacheAPI_DeleteExpiredRecords_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).cacheDeleteExpiredRecords)
                    };
                    break;
                case /* MiLaboratories.PL.API.ControllerAPI.SetFeatures.Response controller_features_set */ 350:
                    message.response = {
                        oneofKind: "controllerFeaturesSet",
                        controllerFeaturesSet: ControllerAPI_SetFeatures_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).controllerFeaturesSet)
                    };
                    break;
                case /* MiLaboratories.PL.API.ControllerAPI.ClearFeatures.Response controller_features_clear */ 351:
                    message.response = {
                        oneofKind: "controllerFeaturesClear",
                        controllerFeaturesClear: ControllerAPI_ClearFeatures_Response.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).controllerFeaturesClear)
                    };
                    break;
                case /* google.rpc.Status error */ 3:
                    message.error = Status.internalBinaryRead(reader, reader.uint32(), options, message.error);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TxAPI_ServerMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 request_id = 1; */
        if (message.requestId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.requestId);
        /* MiLaboratories.PL.API.TxAPI.ServerMessage.Multi multi_message = 2; */
        if (message.multiMessage)
            TxAPI_ServerMessage_Multi.internalBinaryWrite(message.multiMessage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.rpc.Status error = 3; */
        if (message.error)
            Status.internalBinaryWrite(message.error, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.TxAPI.Open.Response tx_open = 11; */
        if (message.response.oneofKind === "txOpen")
            TxAPI_Open_Response.internalBinaryWrite(message.response.txOpen, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.TxAPI.Commit.Response tx_commit = 12; */
        if (message.response.oneofKind === "txCommit")
            TxAPI_Commit_Response.internalBinaryWrite(message.response.txCommit, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.TxAPI.Discard.Response tx_discard = 13; */
        if (message.response.oneofKind === "txDiscard")
            TxAPI_Discard_Response.internalBinaryWrite(message.response.txDiscard, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.CreateStruct.Response resource_create_struct = 51; */
        if (message.response.oneofKind === "resourceCreateStruct")
            ResourceAPI_CreateStruct_Response.internalBinaryWrite(message.response.resourceCreateStruct, writer.tag(51, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.CreateValue.Response resource_create_value = 52; */
        if (message.response.oneofKind === "resourceCreateValue")
            ResourceAPI_CreateValue_Response.internalBinaryWrite(message.response.resourceCreateValue, writer.tag(52, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.LockInputs.Response resource_lock_inputs = 53; */
        if (message.response.oneofKind === "resourceLockInputs")
            ResourceAPI_LockInputs_Response.internalBinaryWrite(message.response.resourceLockInputs, writer.tag(53, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.Exists.Response resource_exists = 54; */
        if (message.response.oneofKind === "resourceExists")
            ResourceAPI_Exists_Response.internalBinaryWrite(message.response.resourceExists, writer.tag(54, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.Get.Response resource_get = 55; */
        if (message.response.oneofKind === "resourceGet")
            ResourceAPI_Get_Response.internalBinaryWrite(message.response.resourceGet, writer.tag(55, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.LockOutputs.Response resource_lock_outputs = 56; */
        if (message.response.oneofKind === "resourceLockOutputs")
            ResourceAPI_LockOutputs_Response.internalBinaryWrite(message.response.resourceLockOutputs, writer.tag(56, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.Remove.Response resource_remove = 57; */
        if (message.response.oneofKind === "resourceRemove")
            ResourceAPI_Remove_Response.internalBinaryWrite(message.response.resourceRemove, writer.tag(57, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.CreateRoot.Response resource_create_root = 58; */
        if (message.response.oneofKind === "resourceCreateRoot")
            ResourceAPI_CreateRoot_Response.internalBinaryWrite(message.response.resourceCreateRoot, writer.tag(58, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.CreateChild.Response resource_create_child = 59; */
        if (message.response.oneofKind === "resourceCreateChild")
            ResourceAPI_CreateChild_Response.internalBinaryWrite(message.response.resourceCreateChild, writer.tag(59, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.List.ByType.Response resource_list_by_type = 60; */
        if (message.response.oneofKind === "resourceListByType")
            ResourceAPI_List_ByType_Response.internalBinaryWrite(message.response.resourceListByType, writer.tag(60, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.SetError.Response resource_set_error = 61; */
        if (message.response.oneofKind === "resourceSetError")
            ResourceAPI_SetError_Response.internalBinaryWrite(message.response.resourceSetError, writer.tag(61, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.CreateEphemeral.Response resource_create_ephemeral = 62; */
        if (message.response.oneofKind === "resourceCreateEphemeral")
            ResourceAPI_CreateEphemeral_Response.internalBinaryWrite(message.response.resourceCreateEphemeral, writer.tag(62, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.GetValueID.Response resource_get_value_id = 63; */
        if (message.response.oneofKind === "resourceGetValueId")
            ResourceAPI_GetValueID_Response.internalBinaryWrite(message.response.resourceGetValueId, writer.tag(63, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.CreateSingleton.Response resource_create_singleton = 64; */
        if (message.response.oneofKind === "resourceCreateSingleton")
            ResourceAPI_CreateSingleton_Response.internalBinaryWrite(message.response.resourceCreateSingleton, writer.tag(64, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.GetSingleton.Response resource_get_singleton = 65; */
        if (message.response.oneofKind === "resourceGetSingleton")
            ResourceAPI_GetSingleton_Response.internalBinaryWrite(message.response.resourceGetSingleton, writer.tag(65, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.Name.Set.Response resource_name_set = 66; */
        if (message.response.oneofKind === "resourceNameSet")
            ResourceAPI_Name_Set_Response.internalBinaryWrite(message.response.resourceNameSet, writer.tag(66, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.Name.Get.Response resource_name_get = 67; */
        if (message.response.oneofKind === "resourceNameGet")
            ResourceAPI_Name_Get_Response.internalBinaryWrite(message.response.resourceNameGet, writer.tag(67, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.Name.Exists.Response resource_name_exists = 68; */
        if (message.response.oneofKind === "resourceNameExists")
            ResourceAPI_Name_Exists_Response.internalBinaryWrite(message.response.resourceNameExists, writer.tag(68, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.Name.Delete.Response resource_name_delete = 69; */
        if (message.response.oneofKind === "resourceNameDelete")
            ResourceAPI_Name_Delete_Response.internalBinaryWrite(message.response.resourceNameDelete, writer.tag(69, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.Tree.Response resource_tree = 70; */
        if (message.response.oneofKind === "resourceTree")
            ResourceAPI_Tree_Response.internalBinaryWrite(message.response.resourceTree, writer.tag(70, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceAPI.TreeSize.Response resource_tree_size = 71; */
        if (message.response.oneofKind === "resourceTreeSize")
            ResourceAPI_TreeSize_Response.internalBinaryWrite(message.response.resourceTreeSize, writer.tag(71, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.FieldAPI.Create.Response field_create = 101; */
        if (message.response.oneofKind === "fieldCreate")
            FieldAPI_Create_Response.internalBinaryWrite(message.response.fieldCreate, writer.tag(101, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.FieldAPI.Set.Response field_set = 102; */
        if (message.response.oneofKind === "fieldSet")
            FieldAPI_Set_Response.internalBinaryWrite(message.response.fieldSet, writer.tag(102, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.FieldAPI.Get.Response field_get = 103; */
        if (message.response.oneofKind === "fieldGet")
            FieldAPI_Get_Response.internalBinaryWrite(message.response.fieldGet, writer.tag(103, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.FieldAPI.Reset.Response field_reset = 104; */
        if (message.response.oneofKind === "fieldReset")
            FieldAPI_Reset_Response.internalBinaryWrite(message.response.fieldReset, writer.tag(104, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.FieldAPI.SetError.Response field_set_error = 105; */
        if (message.response.oneofKind === "fieldSetError")
            FieldAPI_SetError_Response.internalBinaryWrite(message.response.fieldSetError, writer.tag(105, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.FieldAPI.Remove.Response field_remove = 106; */
        if (message.response.oneofKind === "fieldRemove")
            FieldAPI_Remove_Response.internalBinaryWrite(message.response.fieldRemove, writer.tag(106, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.FieldAPI.Exists.Response field_exists = 107; */
        if (message.response.oneofKind === "fieldExists")
            FieldAPI_Exists_Response.internalBinaryWrite(message.response.fieldExists, writer.tag(107, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.FieldAPI.List.Response field_list = 108; */
        if (message.response.oneofKind === "fieldList")
            FieldAPI_List_Response.internalBinaryWrite(message.response.fieldList, writer.tag(108, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.SubscriptionAPI.CreateSubscription.Response subscription_create = 111; */
        if (message.response.oneofKind === "subscriptionCreate")
            SubscriptionAPI_CreateSubscription_Response.internalBinaryWrite(message.response.subscriptionCreate, writer.tag(111, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.SubscriptionAPI.AttachFilter.Response subscription_attach_filter = 112; */
        if (message.response.oneofKind === "subscriptionAttachFilter")
            SubscriptionAPI_AttachFilter_Response.internalBinaryWrite(message.response.subscriptionAttachFilter, writer.tag(112, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.SubscriptionAPI.DetachFilter.Response subscription_detach_filter = 113; */
        if (message.response.oneofKind === "subscriptionDetachFilter")
            SubscriptionAPI_DetachFilter_Response.internalBinaryWrite(message.response.subscriptionDetachFilter, writer.tag(113, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.SubscriptionAPI.CreateFilter.Response subscription_create_filter = 115; */
        if (message.response.oneofKind === "subscriptionCreateFilter")
            SubscriptionAPI_CreateFilter_Response.internalBinaryWrite(message.response.subscriptionCreateFilter, writer.tag(115, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.NotificationAPI.Get.Response notification_get = 154; */
        if (message.response.oneofKind === "notificationGet")
            NotificationAPI_Get_Response.internalBinaryWrite(message.response.notificationGet, writer.tag(154, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.NotificationAPI.Ack.Response notification_ack = 155; */
        if (message.response.oneofKind === "notificationAck")
            NotificationAPI_Ack_Response.internalBinaryWrite(message.response.notificationAck, writer.tag(155, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.NotificationAPI.Discard.Response notification_discard = 156; */
        if (message.response.oneofKind === "notificationDiscard")
            NotificationAPI_Discard_Response.internalBinaryWrite(message.response.notificationDiscard, writer.tag(156, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceKVAPI.Set.Response resource_key_value_set = 200; */
        if (message.response.oneofKind === "resourceKeyValueSet")
            ResourceKVAPI_Set_Response.internalBinaryWrite(message.response.resourceKeyValueSet, writer.tag(200, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceKVAPI.Get.Response resource_key_value_get = 201; */
        if (message.response.oneofKind === "resourceKeyValueGet")
            ResourceKVAPI_Get_Response.internalBinaryWrite(message.response.resourceKeyValueGet, writer.tag(201, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceKVAPI.GetIfExists.Response resource_key_value_get_if_exists = 202; */
        if (message.response.oneofKind === "resourceKeyValueGetIfExists")
            ResourceKVAPI_GetIfExists_Response.internalBinaryWrite(message.response.resourceKeyValueGetIfExists, writer.tag(202, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceKVAPI.SetFlag.Response resource_key_value_set_flag = 203; */
        if (message.response.oneofKind === "resourceKeyValueSetFlag")
            ResourceKVAPI_SetFlag_Response.internalBinaryWrite(message.response.resourceKeyValueSetFlag, writer.tag(203, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceKVAPI.GetFlag.Response resource_key_value_get_flag = 204; */
        if (message.response.oneofKind === "resourceKeyValueGetFlag")
            ResourceKVAPI_GetFlag_Response.internalBinaryWrite(message.response.resourceKeyValueGetFlag, writer.tag(204, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceKVAPI.GetFlag.Response resource_key_value_get_flag_if_exists = 205; */
        if (message.response.oneofKind === "resourceKeyValueGetFlagIfExists")
            ResourceKVAPI_GetFlag_Response.internalBinaryWrite(message.response.resourceKeyValueGetFlagIfExists, writer.tag(205, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceKVAPI.Delete.Response resource_key_value_delete = 206; */
        if (message.response.oneofKind === "resourceKeyValueDelete")
            ResourceKVAPI_Delete_Response.internalBinaryWrite(message.response.resourceKeyValueDelete, writer.tag(206, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ResourceKVAPI.List.Response resource_key_value_list = 207; */
        if (message.response.oneofKind === "resourceKeyValueList")
            ResourceKVAPI_List_Response.internalBinaryWrite(message.response.resourceKeyValueList, writer.tag(207, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ControllerKVAPI.Set.Response controller_key_value_set = 250; */
        if (message.response.oneofKind === "controllerKeyValueSet")
            ControllerKVAPI_Set_Response.internalBinaryWrite(message.response.controllerKeyValueSet, writer.tag(250, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ControllerKVAPI.Get.Response controller_key_value_get = 251; */
        if (message.response.oneofKind === "controllerKeyValueGet")
            ControllerKVAPI_Get_Response.internalBinaryWrite(message.response.controllerKeyValueGet, writer.tag(251, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ControllerKVAPI.GetIfExists.Response controller_key_value_get_if_exists = 252; */
        if (message.response.oneofKind === "controllerKeyValueGetIfExists")
            ControllerKVAPI_GetIfExists_Response.internalBinaryWrite(message.response.controllerKeyValueGetIfExists, writer.tag(252, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ControllerKVAPI.SetFlag.Response controller_key_value_set_flag = 253; */
        if (message.response.oneofKind === "controllerKeyValueSetFlag")
            ControllerKVAPI_SetFlag_Response.internalBinaryWrite(message.response.controllerKeyValueSetFlag, writer.tag(253, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ControllerKVAPI.GetFlag.Response controller_key_value_get_flag = 254; */
        if (message.response.oneofKind === "controllerKeyValueGetFlag")
            ControllerKVAPI_GetFlag_Response.internalBinaryWrite(message.response.controllerKeyValueGetFlag, writer.tag(254, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ControllerKVAPI.GetFlagIfExists.Response controller_key_value_get_flag_if_exists = 255; */
        if (message.response.oneofKind === "controllerKeyValueGetFlagIfExists")
            ControllerKVAPI_GetFlagIfExists_Response.internalBinaryWrite(message.response.controllerKeyValueGetFlagIfExists, writer.tag(255, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.CacheAPI.SetToField.Response cache_set_to_field = 300; */
        if (message.response.oneofKind === "cacheSetToField")
            CacheAPI_SetToField_Response.internalBinaryWrite(message.response.cacheSetToField, writer.tag(300, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.CacheAPI.DeleteExpiredRecords.Response cache_delete_expired_records = 301; */
        if (message.response.oneofKind === "cacheDeleteExpiredRecords")
            CacheAPI_DeleteExpiredRecords_Response.internalBinaryWrite(message.response.cacheDeleteExpiredRecords, writer.tag(301, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ControllerAPI.SetFeatures.Response controller_features_set = 350; */
        if (message.response.oneofKind === "controllerFeaturesSet")
            ControllerAPI_SetFeatures_Response.internalBinaryWrite(message.response.controllerFeaturesSet, writer.tag(350, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.API.ControllerAPI.ClearFeatures.Response controller_features_clear = 351; */
        if (message.response.oneofKind === "controllerFeaturesClear")
            ControllerAPI_ClearFeatures_Response.internalBinaryWrite(message.response.controllerFeaturesClear, writer.tag(351, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.TxAPI.ServerMessage
 */
export const TxAPI_ServerMessage = new TxAPI_ServerMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TxAPI_ServerMessage_Multi$Type extends MessageType<TxAPI_ServerMessage_Multi> {
    constructor() {
        super("MiLaboratories.PL.API.TxAPI.ServerMessage.Multi", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "is_last", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "is_empty", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<TxAPI_ServerMessage_Multi>): TxAPI_ServerMessage_Multi {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.isLast = false;
        message.isEmpty = false;
        if (value !== undefined)
            reflectionMergePartial<TxAPI_ServerMessage_Multi>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TxAPI_ServerMessage_Multi): TxAPI_ServerMessage_Multi {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* bool is_last */ 2:
                    message.isLast = reader.bool();
                    break;
                case /* bool is_empty */ 3:
                    message.isEmpty = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TxAPI_ServerMessage_Multi, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* bool is_last = 2; */
        if (message.isLast !== false)
            writer.tag(2, WireType.Varint).bool(message.isLast);
        /* bool is_empty = 3; */
        if (message.isEmpty !== false)
            writer.tag(3, WireType.Varint).bool(message.isEmpty);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.TxAPI.ServerMessage.Multi
 */
export const TxAPI_ServerMessage_Multi = new TxAPI_ServerMessage_Multi$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TxAPI_Open$Type extends MessageType<TxAPI_Open> {
    constructor() {
        super("MiLaboratories.PL.API.TxAPI.Open", []);
    }
    create(value?: PartialMessage<TxAPI_Open>): TxAPI_Open {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TxAPI_Open>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TxAPI_Open): TxAPI_Open {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TxAPI_Open, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.TxAPI.Open
 */
export const TxAPI_Open = new TxAPI_Open$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TxAPI_Open_Request$Type extends MessageType<TxAPI_Open_Request> {
    constructor() {
        super("MiLaboratories.PL.API.TxAPI.Open.Request", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "writable", kind: "enum", T: () => ["MiLaboratories.PL.API.TxAPI.Open.Request.WritableTx", TxAPI_Open_Request_WritableTx] },
            { no: 3, name: "enableFormattedErrors", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<TxAPI_Open_Request>): TxAPI_Open_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.writable = 0;
        message.enableFormattedErrors = false;
        if (value !== undefined)
            reflectionMergePartial<TxAPI_Open_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TxAPI_Open_Request): TxAPI_Open_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* MiLaboratories.PL.API.TxAPI.Open.Request.WritableTx writable */ 2:
                    message.writable = reader.int32();
                    break;
                case /* bool enableFormattedErrors */ 3:
                    message.enableFormattedErrors = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TxAPI_Open_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* MiLaboratories.PL.API.TxAPI.Open.Request.WritableTx writable = 2; */
        if (message.writable !== 0)
            writer.tag(2, WireType.Varint).int32(message.writable);
        /* bool enableFormattedErrors = 3; */
        if (message.enableFormattedErrors !== false)
            writer.tag(3, WireType.Varint).bool(message.enableFormattedErrors);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.TxAPI.Open.Request
 */
export const TxAPI_Open_Request = new TxAPI_Open_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TxAPI_Open_Response$Type extends MessageType<TxAPI_Open_Response> {
    constructor() {
        super("MiLaboratories.PL.API.TxAPI.Open.Response", [
            { no: 1, name: "tx", kind: "message", T: () => Tx }
        ]);
    }
    create(value?: PartialMessage<TxAPI_Open_Response>): TxAPI_Open_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TxAPI_Open_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TxAPI_Open_Response): TxAPI_Open_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.PL.API.Tx tx */ 1:
                    message.tx = Tx.internalBinaryRead(reader, reader.uint32(), options, message.tx);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TxAPI_Open_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.PL.API.Tx tx = 1; */
        if (message.tx)
            Tx.internalBinaryWrite(message.tx, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.TxAPI.Open.Response
 */
export const TxAPI_Open_Response = new TxAPI_Open_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TxAPI_Commit$Type extends MessageType<TxAPI_Commit> {
    constructor() {
        super("MiLaboratories.PL.API.TxAPI.Commit", []);
    }
    create(value?: PartialMessage<TxAPI_Commit>): TxAPI_Commit {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TxAPI_Commit>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TxAPI_Commit): TxAPI_Commit {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TxAPI_Commit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.TxAPI.Commit
 */
export const TxAPI_Commit = new TxAPI_Commit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TxAPI_Commit_Request$Type extends MessageType<TxAPI_Commit_Request> {
    constructor() {
        super("MiLaboratories.PL.API.TxAPI.Commit.Request", []);
    }
    create(value?: PartialMessage<TxAPI_Commit_Request>): TxAPI_Commit_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TxAPI_Commit_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TxAPI_Commit_Request): TxAPI_Commit_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TxAPI_Commit_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.TxAPI.Commit.Request
 */
export const TxAPI_Commit_Request = new TxAPI_Commit_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TxAPI_Commit_Response$Type extends MessageType<TxAPI_Commit_Response> {
    constructor() {
        super("MiLaboratories.PL.API.TxAPI.Commit.Response", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<TxAPI_Commit_Response>): TxAPI_Commit_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<TxAPI_Commit_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TxAPI_Commit_Response): TxAPI_Commit_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TxAPI_Commit_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.TxAPI.Commit.Response
 */
export const TxAPI_Commit_Response = new TxAPI_Commit_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TxAPI_Discard$Type extends MessageType<TxAPI_Discard> {
    constructor() {
        super("MiLaboratories.PL.API.TxAPI.Discard", []);
    }
    create(value?: PartialMessage<TxAPI_Discard>): TxAPI_Discard {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TxAPI_Discard>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TxAPI_Discard): TxAPI_Discard {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TxAPI_Discard, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.TxAPI.Discard
 */
export const TxAPI_Discard = new TxAPI_Discard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TxAPI_Discard_Request$Type extends MessageType<TxAPI_Discard_Request> {
    constructor() {
        super("MiLaboratories.PL.API.TxAPI.Discard.Request", []);
    }
    create(value?: PartialMessage<TxAPI_Discard_Request>): TxAPI_Discard_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TxAPI_Discard_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TxAPI_Discard_Request): TxAPI_Discard_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TxAPI_Discard_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.TxAPI.Discard.Request
 */
export const TxAPI_Discard_Request = new TxAPI_Discard_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TxAPI_Discard_Response$Type extends MessageType<TxAPI_Discard_Response> {
    constructor() {
        super("MiLaboratories.PL.API.TxAPI.Discard.Response", []);
    }
    create(value?: PartialMessage<TxAPI_Discard_Response>): TxAPI_Discard_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TxAPI_Discard_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TxAPI_Discard_Response): TxAPI_Discard_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TxAPI_Discard_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.TxAPI.Discard.Response
 */
export const TxAPI_Discard_Response = new TxAPI_Discard_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TxAPI_Sync$Type extends MessageType<TxAPI_Sync> {
    constructor() {
        super("MiLaboratories.PL.API.TxAPI.Sync", []);
    }
    create(value?: PartialMessage<TxAPI_Sync>): TxAPI_Sync {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TxAPI_Sync>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TxAPI_Sync): TxAPI_Sync {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TxAPI_Sync, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.TxAPI.Sync
 */
export const TxAPI_Sync = new TxAPI_Sync$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TxAPI_Sync_Request$Type extends MessageType<TxAPI_Sync_Request> {
    constructor() {
        super("MiLaboratories.PL.API.TxAPI.Sync.Request", [
            { no: 1, name: "tx_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TxAPI_Sync_Request>): TxAPI_Sync_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.txId = 0n;
        if (value !== undefined)
            reflectionMergePartial<TxAPI_Sync_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TxAPI_Sync_Request): TxAPI_Sync_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 tx_id */ 1:
                    message.txId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TxAPI_Sync_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 tx_id = 1; */
        if (message.txId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.txId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.TxAPI.Sync.Request
 */
export const TxAPI_Sync_Request = new TxAPI_Sync_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TxAPI_Sync_Response$Type extends MessageType<TxAPI_Sync_Response> {
    constructor() {
        super("MiLaboratories.PL.API.TxAPI.Sync.Response", []);
    }
    create(value?: PartialMessage<TxAPI_Sync_Response>): TxAPI_Sync_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TxAPI_Sync_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TxAPI_Sync_Response): TxAPI_Sync_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TxAPI_Sync_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.TxAPI.Sync.Response
 */
export const TxAPI_Sync_Response = new TxAPI_Sync_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI$Type extends MessageType<ResourceAPI> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI", []);
    }
    create(value?: PartialMessage<ResourceAPI>): ResourceAPI {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI): ResourceAPI {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI
 */
export const ResourceAPI = new ResourceAPI$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_CreateStruct$Type extends MessageType<ResourceAPI_CreateStruct> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.CreateStruct", []);
    }
    create(value?: PartialMessage<ResourceAPI_CreateStruct>): ResourceAPI_CreateStruct {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_CreateStruct>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_CreateStruct): ResourceAPI_CreateStruct {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_CreateStruct, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.CreateStruct
 */
export const ResourceAPI_CreateStruct = new ResourceAPI_CreateStruct$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_CreateStruct_Request$Type extends MessageType<ResourceAPI_CreateStruct_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.CreateStruct.Request", [
            { no: 2, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "type", kind: "message", T: () => ResourceType },
            { no: 4, name: "data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_CreateStruct_Request>): ResourceAPI_CreateStruct_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_CreateStruct_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_CreateStruct_Request): ResourceAPI_CreateStruct_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 2:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* MiLaboratories.PL.Base.ResourceType type */ 3:
                    message.type = ResourceType.internalBinaryRead(reader, reader.uint32(), options, message.type);
                    break;
                case /* optional bytes data */ 4:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_CreateStruct_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.id);
        /* MiLaboratories.PL.Base.ResourceType type = 3; */
        if (message.type)
            ResourceType.internalBinaryWrite(message.type, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional bytes data = 4; */
        if (message.data !== undefined)
            writer.tag(4, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.CreateStruct.Request
 */
export const ResourceAPI_CreateStruct_Request = new ResourceAPI_CreateStruct_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_CreateStruct_Response$Type extends MessageType<ResourceAPI_CreateStruct_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.CreateStruct.Response", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_CreateStruct_Response>): ResourceAPI_CreateStruct_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_CreateStruct_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_CreateStruct_Response): ResourceAPI_CreateStruct_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_CreateStruct_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.CreateStruct.Response
 */
export const ResourceAPI_CreateStruct_Response = new ResourceAPI_CreateStruct_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_CreateEphemeral$Type extends MessageType<ResourceAPI_CreateEphemeral> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.CreateEphemeral", []);
    }
    create(value?: PartialMessage<ResourceAPI_CreateEphemeral>): ResourceAPI_CreateEphemeral {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_CreateEphemeral>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_CreateEphemeral): ResourceAPI_CreateEphemeral {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_CreateEphemeral, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.CreateEphemeral
 */
export const ResourceAPI_CreateEphemeral = new ResourceAPI_CreateEphemeral$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_CreateEphemeral_Request$Type extends MessageType<ResourceAPI_CreateEphemeral_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.CreateEphemeral.Request", [
            { no: 2, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "type", kind: "message", T: () => ResourceType },
            { no: 4, name: "data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_CreateEphemeral_Request>): ResourceAPI_CreateEphemeral_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_CreateEphemeral_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_CreateEphemeral_Request): ResourceAPI_CreateEphemeral_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 2:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* MiLaboratories.PL.Base.ResourceType type */ 3:
                    message.type = ResourceType.internalBinaryRead(reader, reader.uint32(), options, message.type);
                    break;
                case /* optional bytes data */ 4:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_CreateEphemeral_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.id);
        /* MiLaboratories.PL.Base.ResourceType type = 3; */
        if (message.type)
            ResourceType.internalBinaryWrite(message.type, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional bytes data = 4; */
        if (message.data !== undefined)
            writer.tag(4, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.CreateEphemeral.Request
 */
export const ResourceAPI_CreateEphemeral_Request = new ResourceAPI_CreateEphemeral_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_CreateEphemeral_Response$Type extends MessageType<ResourceAPI_CreateEphemeral_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.CreateEphemeral.Response", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_CreateEphemeral_Response>): ResourceAPI_CreateEphemeral_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_CreateEphemeral_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_CreateEphemeral_Response): ResourceAPI_CreateEphemeral_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_CreateEphemeral_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.CreateEphemeral.Response
 */
export const ResourceAPI_CreateEphemeral_Response = new ResourceAPI_CreateEphemeral_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_CreateChild$Type extends MessageType<ResourceAPI_CreateChild> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.CreateChild", []);
    }
    create(value?: PartialMessage<ResourceAPI_CreateChild>): ResourceAPI_CreateChild {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_CreateChild>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_CreateChild): ResourceAPI_CreateChild {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_CreateChild, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.CreateChild
 */
export const ResourceAPI_CreateChild = new ResourceAPI_CreateChild$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_CreateChild_Request$Type extends MessageType<ResourceAPI_CreateChild_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.CreateChild.Request", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "type", kind: "message", T: () => ResourceType },
            { no: 3, name: "parent_field", kind: "message", T: () => FieldRef }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_CreateChild_Request>): ResourceAPI_CreateChild_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_CreateChild_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_CreateChild_Request): ResourceAPI_CreateChild_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* MiLaboratories.PL.Base.ResourceType type */ 2:
                    message.type = ResourceType.internalBinaryRead(reader, reader.uint32(), options, message.type);
                    break;
                case /* MiLaboratories.PL.Base.FieldRef parent_field */ 3:
                    message.parentField = FieldRef.internalBinaryRead(reader, reader.uint32(), options, message.parentField);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_CreateChild_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* MiLaboratories.PL.Base.ResourceType type = 2; */
        if (message.type)
            ResourceType.internalBinaryWrite(message.type, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.Base.FieldRef parent_field = 3; */
        if (message.parentField)
            FieldRef.internalBinaryWrite(message.parentField, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.CreateChild.Request
 */
export const ResourceAPI_CreateChild_Request = new ResourceAPI_CreateChild_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_CreateChild_Response$Type extends MessageType<ResourceAPI_CreateChild_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.CreateChild.Response", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_CreateChild_Response>): ResourceAPI_CreateChild_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_CreateChild_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_CreateChild_Response): ResourceAPI_CreateChild_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_CreateChild_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.CreateChild.Response
 */
export const ResourceAPI_CreateChild_Response = new ResourceAPI_CreateChild_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_CreateValue$Type extends MessageType<ResourceAPI_CreateValue> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.CreateValue", []);
    }
    create(value?: PartialMessage<ResourceAPI_CreateValue>): ResourceAPI_CreateValue {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_CreateValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_CreateValue): ResourceAPI_CreateValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_CreateValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.CreateValue
 */
export const ResourceAPI_CreateValue = new ResourceAPI_CreateValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_CreateValue_Request$Type extends MessageType<ResourceAPI_CreateValue_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.CreateValue.Request", [
            { no: 2, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "type", kind: "message", T: () => ResourceType },
            { no: 6, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 7, name: "error_if_exists", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_CreateValue_Request>): ResourceAPI_CreateValue_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.data = new Uint8Array(0);
        message.errorIfExists = false;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_CreateValue_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_CreateValue_Request): ResourceAPI_CreateValue_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 2:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* MiLaboratories.PL.Base.ResourceType type */ 3:
                    message.type = ResourceType.internalBinaryRead(reader, reader.uint32(), options, message.type);
                    break;
                case /* bytes data */ 6:
                    message.data = reader.bytes();
                    break;
                case /* bool error_if_exists */ 7:
                    message.errorIfExists = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_CreateValue_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.id);
        /* MiLaboratories.PL.Base.ResourceType type = 3; */
        if (message.type)
            ResourceType.internalBinaryWrite(message.type, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bytes data = 6; */
        if (message.data.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.data);
        /* bool error_if_exists = 7; */
        if (message.errorIfExists !== false)
            writer.tag(7, WireType.Varint).bool(message.errorIfExists);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.CreateValue.Request
 */
export const ResourceAPI_CreateValue_Request = new ResourceAPI_CreateValue_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_CreateValue_Response$Type extends MessageType<ResourceAPI_CreateValue_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.CreateValue.Response", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_CreateValue_Response>): ResourceAPI_CreateValue_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_CreateValue_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_CreateValue_Response): ResourceAPI_CreateValue_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_CreateValue_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.CreateValue.Response
 */
export const ResourceAPI_CreateValue_Response = new ResourceAPI_CreateValue_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_GetValueID$Type extends MessageType<ResourceAPI_GetValueID> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.GetValueID", []);
    }
    create(value?: PartialMessage<ResourceAPI_GetValueID>): ResourceAPI_GetValueID {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_GetValueID>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_GetValueID): ResourceAPI_GetValueID {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_GetValueID, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.GetValueID
 */
export const ResourceAPI_GetValueID = new ResourceAPI_GetValueID$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_GetValueID_Request$Type extends MessageType<ResourceAPI_GetValueID_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.GetValueID.Request", [
            { no: 1, name: "type", kind: "message", T: () => ResourceType },
            { no: 2, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_GetValueID_Request>): ResourceAPI_GetValueID_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_GetValueID_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_GetValueID_Request): ResourceAPI_GetValueID_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.PL.Base.ResourceType type */ 1:
                    message.type = ResourceType.internalBinaryRead(reader, reader.uint32(), options, message.type);
                    break;
                case /* bytes data */ 2:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_GetValueID_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.PL.Base.ResourceType type = 1; */
        if (message.type)
            ResourceType.internalBinaryWrite(message.type, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes data = 2; */
        if (message.data.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.GetValueID.Request
 */
export const ResourceAPI_GetValueID_Request = new ResourceAPI_GetValueID_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_GetValueID_Response$Type extends MessageType<ResourceAPI_GetValueID_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.GetValueID.Response", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_GetValueID_Response>): ResourceAPI_GetValueID_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_GetValueID_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_GetValueID_Response): ResourceAPI_GetValueID_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_GetValueID_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.GetValueID.Response
 */
export const ResourceAPI_GetValueID_Response = new ResourceAPI_GetValueID_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_CreateSingleton$Type extends MessageType<ResourceAPI_CreateSingleton> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.CreateSingleton", []);
    }
    create(value?: PartialMessage<ResourceAPI_CreateSingleton>): ResourceAPI_CreateSingleton {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_CreateSingleton>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_CreateSingleton): ResourceAPI_CreateSingleton {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_CreateSingleton, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.CreateSingleton
 */
export const ResourceAPI_CreateSingleton = new ResourceAPI_CreateSingleton$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_CreateSingleton_Request$Type extends MessageType<ResourceAPI_CreateSingleton_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.CreateSingleton.Request", [
            { no: 2, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "type", kind: "message", T: () => ResourceType },
            { no: 6, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 7, name: "error_if_exists", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_CreateSingleton_Request>): ResourceAPI_CreateSingleton_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.data = new Uint8Array(0);
        message.errorIfExists = false;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_CreateSingleton_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_CreateSingleton_Request): ResourceAPI_CreateSingleton_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 2:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* MiLaboratories.PL.Base.ResourceType type */ 3:
                    message.type = ResourceType.internalBinaryRead(reader, reader.uint32(), options, message.type);
                    break;
                case /* bytes data */ 6:
                    message.data = reader.bytes();
                    break;
                case /* bool error_if_exists */ 7:
                    message.errorIfExists = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_CreateSingleton_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.id);
        /* MiLaboratories.PL.Base.ResourceType type = 3; */
        if (message.type)
            ResourceType.internalBinaryWrite(message.type, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bytes data = 6; */
        if (message.data.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.data);
        /* bool error_if_exists = 7; */
        if (message.errorIfExists !== false)
            writer.tag(7, WireType.Varint).bool(message.errorIfExists);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.CreateSingleton.Request
 */
export const ResourceAPI_CreateSingleton_Request = new ResourceAPI_CreateSingleton_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_CreateSingleton_Response$Type extends MessageType<ResourceAPI_CreateSingleton_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.CreateSingleton.Response", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_CreateSingleton_Response>): ResourceAPI_CreateSingleton_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_CreateSingleton_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_CreateSingleton_Response): ResourceAPI_CreateSingleton_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_CreateSingleton_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.CreateSingleton.Response
 */
export const ResourceAPI_CreateSingleton_Response = new ResourceAPI_CreateSingleton_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_GetSingleton$Type extends MessageType<ResourceAPI_GetSingleton> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.GetSingleton", []);
    }
    create(value?: PartialMessage<ResourceAPI_GetSingleton>): ResourceAPI_GetSingleton {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_GetSingleton>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_GetSingleton): ResourceAPI_GetSingleton {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_GetSingleton, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.GetSingleton
 */
export const ResourceAPI_GetSingleton = new ResourceAPI_GetSingleton$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_GetSingleton_Request$Type extends MessageType<ResourceAPI_GetSingleton_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.GetSingleton.Request", [
            { no: 1, name: "type", kind: "message", T: () => ResourceType },
            { no: 2, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "load_fields", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_GetSingleton_Request>): ResourceAPI_GetSingleton_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = new Uint8Array(0);
        message.loadFields = false;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_GetSingleton_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_GetSingleton_Request): ResourceAPI_GetSingleton_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.PL.Base.ResourceType type */ 1:
                    message.type = ResourceType.internalBinaryRead(reader, reader.uint32(), options, message.type);
                    break;
                case /* bytes data */ 2:
                    message.data = reader.bytes();
                    break;
                case /* bool load_fields */ 3:
                    message.loadFields = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_GetSingleton_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.PL.Base.ResourceType type = 1; */
        if (message.type)
            ResourceType.internalBinaryWrite(message.type, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes data = 2; */
        if (message.data.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.data);
        /* bool load_fields = 3; */
        if (message.loadFields !== false)
            writer.tag(3, WireType.Varint).bool(message.loadFields);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.GetSingleton.Request
 */
export const ResourceAPI_GetSingleton_Request = new ResourceAPI_GetSingleton_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_GetSingleton_Response$Type extends MessageType<ResourceAPI_GetSingleton_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.GetSingleton.Response", [
            { no: 1, name: "resource", kind: "message", T: () => Resource }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_GetSingleton_Response>): ResourceAPI_GetSingleton_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_GetSingleton_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_GetSingleton_Response): ResourceAPI_GetSingleton_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.PL.API.Resource resource */ 1:
                    message.resource = Resource.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_GetSingleton_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.PL.API.Resource resource = 1; */
        if (message.resource)
            Resource.internalBinaryWrite(message.resource, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.GetSingleton.Response
 */
export const ResourceAPI_GetSingleton_Response = new ResourceAPI_GetSingleton_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_LockInputs$Type extends MessageType<ResourceAPI_LockInputs> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.LockInputs", []);
    }
    create(value?: PartialMessage<ResourceAPI_LockInputs>): ResourceAPI_LockInputs {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_LockInputs>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_LockInputs): ResourceAPI_LockInputs {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_LockInputs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.LockInputs
 */
export const ResourceAPI_LockInputs = new ResourceAPI_LockInputs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_LockInputs_Request$Type extends MessageType<ResourceAPI_LockInputs_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.LockInputs.Request", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_LockInputs_Request>): ResourceAPI_LockInputs_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_LockInputs_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_LockInputs_Request): ResourceAPI_LockInputs_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_LockInputs_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.LockInputs.Request
 */
export const ResourceAPI_LockInputs_Request = new ResourceAPI_LockInputs_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_LockInputs_Response$Type extends MessageType<ResourceAPI_LockInputs_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.LockInputs.Response", []);
    }
    create(value?: PartialMessage<ResourceAPI_LockInputs_Response>): ResourceAPI_LockInputs_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_LockInputs_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_LockInputs_Response): ResourceAPI_LockInputs_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_LockInputs_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.LockInputs.Response
 */
export const ResourceAPI_LockInputs_Response = new ResourceAPI_LockInputs_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_LockOutputs$Type extends MessageType<ResourceAPI_LockOutputs> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.LockOutputs", []);
    }
    create(value?: PartialMessage<ResourceAPI_LockOutputs>): ResourceAPI_LockOutputs {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_LockOutputs>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_LockOutputs): ResourceAPI_LockOutputs {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_LockOutputs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.LockOutputs
 */
export const ResourceAPI_LockOutputs = new ResourceAPI_LockOutputs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_LockOutputs_Request$Type extends MessageType<ResourceAPI_LockOutputs_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.LockOutputs.Request", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_LockOutputs_Request>): ResourceAPI_LockOutputs_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_LockOutputs_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_LockOutputs_Request): ResourceAPI_LockOutputs_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_LockOutputs_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.LockOutputs.Request
 */
export const ResourceAPI_LockOutputs_Request = new ResourceAPI_LockOutputs_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_LockOutputs_Response$Type extends MessageType<ResourceAPI_LockOutputs_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.LockOutputs.Response", []);
    }
    create(value?: PartialMessage<ResourceAPI_LockOutputs_Response>): ResourceAPI_LockOutputs_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_LockOutputs_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_LockOutputs_Response): ResourceAPI_LockOutputs_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_LockOutputs_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.LockOutputs.Response
 */
export const ResourceAPI_LockOutputs_Response = new ResourceAPI_LockOutputs_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Exists$Type extends MessageType<ResourceAPI_Exists> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Exists", []);
    }
    create(value?: PartialMessage<ResourceAPI_Exists>): ResourceAPI_Exists {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Exists>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Exists): ResourceAPI_Exists {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Exists, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Exists
 */
export const ResourceAPI_Exists = new ResourceAPI_Exists$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Exists_Request$Type extends MessageType<ResourceAPI_Exists_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Exists.Request", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_Exists_Request>): ResourceAPI_Exists_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Exists_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Exists_Request): ResourceAPI_Exists_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Exists_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Exists.Request
 */
export const ResourceAPI_Exists_Request = new ResourceAPI_Exists_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Exists_Response$Type extends MessageType<ResourceAPI_Exists_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Exists.Response", [
            { no: 1, name: "exists", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_Exists_Response>): ResourceAPI_Exists_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.exists = false;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Exists_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Exists_Response): ResourceAPI_Exists_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool exists */ 1:
                    message.exists = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Exists_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool exists = 1; */
        if (message.exists !== false)
            writer.tag(1, WireType.Varint).bool(message.exists);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Exists.Response
 */
export const ResourceAPI_Exists_Response = new ResourceAPI_Exists_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_SetError$Type extends MessageType<ResourceAPI_SetError> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.SetError", []);
    }
    create(value?: PartialMessage<ResourceAPI_SetError>): ResourceAPI_SetError {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_SetError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_SetError): ResourceAPI_SetError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_SetError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.SetError
 */
export const ResourceAPI_SetError = new ResourceAPI_SetError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_SetError_Request$Type extends MessageType<ResourceAPI_SetError_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.SetError.Request", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "error_resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_SetError_Request>): ResourceAPI_SetError_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        message.errorResourceId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_SetError_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_SetError_Request): ResourceAPI_SetError_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                case /* uint64 error_resource_id */ 2:
                    message.errorResourceId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_SetError_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        /* uint64 error_resource_id = 2; */
        if (message.errorResourceId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.errorResourceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.SetError.Request
 */
export const ResourceAPI_SetError_Request = new ResourceAPI_SetError_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_SetError_Response$Type extends MessageType<ResourceAPI_SetError_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.SetError.Response", []);
    }
    create(value?: PartialMessage<ResourceAPI_SetError_Response>): ResourceAPI_SetError_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_SetError_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_SetError_Response): ResourceAPI_SetError_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_SetError_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.SetError.Response
 */
export const ResourceAPI_SetError_Response = new ResourceAPI_SetError_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Get$Type extends MessageType<ResourceAPI_Get> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Get", []);
    }
    create(value?: PartialMessage<ResourceAPI_Get>): ResourceAPI_Get {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Get>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Get): ResourceAPI_Get {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Get, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Get
 */
export const ResourceAPI_Get = new ResourceAPI_Get$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Get_Request$Type extends MessageType<ResourceAPI_Get_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Get.Request", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "load_fields", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_Get_Request>): ResourceAPI_Get_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        message.loadFields = false;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Get_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Get_Request): ResourceAPI_Get_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                case /* bool load_fields */ 2:
                    message.loadFields = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Get_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        /* bool load_fields = 2; */
        if (message.loadFields !== false)
            writer.tag(2, WireType.Varint).bool(message.loadFields);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Get.Request
 */
export const ResourceAPI_Get_Request = new ResourceAPI_Get_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Get_Response$Type extends MessageType<ResourceAPI_Get_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Get.Response", [
            { no: 1, name: "resource", kind: "message", T: () => Resource }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_Get_Response>): ResourceAPI_Get_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Get_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Get_Response): ResourceAPI_Get_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.PL.API.Resource resource */ 1:
                    message.resource = Resource.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Get_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.PL.API.Resource resource = 1; */
        if (message.resource)
            Resource.internalBinaryWrite(message.resource, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Get.Response
 */
export const ResourceAPI_Get_Response = new ResourceAPI_Get_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_List$Type extends MessageType<ResourceAPI_List> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.List", []);
    }
    create(value?: PartialMessage<ResourceAPI_List>): ResourceAPI_List {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_List>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_List): ResourceAPI_List {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_List, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.List
 */
export const ResourceAPI_List = new ResourceAPI_List$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_List_ByType$Type extends MessageType<ResourceAPI_List_ByType> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.List.ByType", []);
    }
    create(value?: PartialMessage<ResourceAPI_List_ByType>): ResourceAPI_List_ByType {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_List_ByType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_List_ByType): ResourceAPI_List_ByType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_List_ByType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.List.ByType
 */
export const ResourceAPI_List_ByType = new ResourceAPI_List_ByType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_List_ByType_Request$Type extends MessageType<ResourceAPI_List_ByType_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.List.ByType.Request", [
            { no: 1, name: "resource_type", kind: "message", T: () => ResourceType },
            { no: 3, name: "limit", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "after", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "resolve_duplicates", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "load_fields", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_List_ByType_Request>): ResourceAPI_List_ByType_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.limit = 0;
        message.after = 0n;
        message.resolveDuplicates = false;
        message.loadFields = false;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_List_ByType_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_List_ByType_Request): ResourceAPI_List_ByType_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.PL.Base.ResourceType resource_type */ 1:
                    message.resourceType = ResourceType.internalBinaryRead(reader, reader.uint32(), options, message.resourceType);
                    break;
                case /* uint32 limit */ 3:
                    message.limit = reader.uint32();
                    break;
                case /* uint64 after */ 6:
                    message.after = reader.uint64().toBigInt();
                    break;
                case /* bool resolve_duplicates */ 4:
                    message.resolveDuplicates = reader.bool();
                    break;
                case /* bool load_fields */ 5:
                    message.loadFields = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_List_ByType_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.PL.Base.ResourceType resource_type = 1; */
        if (message.resourceType)
            ResourceType.internalBinaryWrite(message.resourceType, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 limit = 3; */
        if (message.limit !== 0)
            writer.tag(3, WireType.Varint).uint32(message.limit);
        /* bool resolve_duplicates = 4; */
        if (message.resolveDuplicates !== false)
            writer.tag(4, WireType.Varint).bool(message.resolveDuplicates);
        /* bool load_fields = 5; */
        if (message.loadFields !== false)
            writer.tag(5, WireType.Varint).bool(message.loadFields);
        /* uint64 after = 6; */
        if (message.after !== 0n)
            writer.tag(6, WireType.Varint).uint64(message.after);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.List.ByType.Request
 */
export const ResourceAPI_List_ByType_Request = new ResourceAPI_List_ByType_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_List_ByType_Response$Type extends MessageType<ResourceAPI_List_ByType_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.List.ByType.Response", [
            { no: 1, name: "resource", kind: "message", T: () => Resource }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_List_ByType_Response>): ResourceAPI_List_ByType_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_List_ByType_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_List_ByType_Response): ResourceAPI_List_ByType_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.PL.API.Resource resource */ 1:
                    message.resource = Resource.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_List_ByType_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.PL.API.Resource resource = 1; */
        if (message.resource)
            Resource.internalBinaryWrite(message.resource, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.List.ByType.Response
 */
export const ResourceAPI_List_ByType_Response = new ResourceAPI_List_ByType_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_CreateRoot$Type extends MessageType<ResourceAPI_CreateRoot> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.CreateRoot", []);
    }
    create(value?: PartialMessage<ResourceAPI_CreateRoot>): ResourceAPI_CreateRoot {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_CreateRoot>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_CreateRoot): ResourceAPI_CreateRoot {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_CreateRoot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.CreateRoot
 */
export const ResourceAPI_CreateRoot = new ResourceAPI_CreateRoot$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_CreateRoot_Request$Type extends MessageType<ResourceAPI_CreateRoot_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.CreateRoot.Request", [
            { no: 2, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "type", kind: "message", T: () => ResourceType }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_CreateRoot_Request>): ResourceAPI_CreateRoot_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_CreateRoot_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_CreateRoot_Request): ResourceAPI_CreateRoot_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 2:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* MiLaboratories.PL.Base.ResourceType type */ 3:
                    message.type = ResourceType.internalBinaryRead(reader, reader.uint32(), options, message.type);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_CreateRoot_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.id);
        /* MiLaboratories.PL.Base.ResourceType type = 3; */
        if (message.type)
            ResourceType.internalBinaryWrite(message.type, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.CreateRoot.Request
 */
export const ResourceAPI_CreateRoot_Request = new ResourceAPI_CreateRoot_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_CreateRoot_Response$Type extends MessageType<ResourceAPI_CreateRoot_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.CreateRoot.Response", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_CreateRoot_Response>): ResourceAPI_CreateRoot_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_CreateRoot_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_CreateRoot_Response): ResourceAPI_CreateRoot_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_CreateRoot_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.CreateRoot.Response
 */
export const ResourceAPI_CreateRoot_Response = new ResourceAPI_CreateRoot_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Remove$Type extends MessageType<ResourceAPI_Remove> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Remove", []);
    }
    create(value?: PartialMessage<ResourceAPI_Remove>): ResourceAPI_Remove {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Remove>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Remove): ResourceAPI_Remove {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Remove, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Remove
 */
export const ResourceAPI_Remove = new ResourceAPI_Remove$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Remove_Request$Type extends MessageType<ResourceAPI_Remove_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Remove.Request", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_Remove_Request>): ResourceAPI_Remove_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Remove_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Remove_Request): ResourceAPI_Remove_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Remove_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Remove.Request
 */
export const ResourceAPI_Remove_Request = new ResourceAPI_Remove_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Remove_Response$Type extends MessageType<ResourceAPI_Remove_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Remove.Response", []);
    }
    create(value?: PartialMessage<ResourceAPI_Remove_Response>): ResourceAPI_Remove_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Remove_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Remove_Response): ResourceAPI_Remove_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Remove_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Remove.Response
 */
export const ResourceAPI_Remove_Response = new ResourceAPI_Remove_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Name$Type extends MessageType<ResourceAPI_Name> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Name", []);
    }
    create(value?: PartialMessage<ResourceAPI_Name>): ResourceAPI_Name {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Name>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Name): ResourceAPI_Name {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Name, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Name
 */
export const ResourceAPI_Name = new ResourceAPI_Name$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Name_Set$Type extends MessageType<ResourceAPI_Name_Set> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Name.Set", []);
    }
    create(value?: PartialMessage<ResourceAPI_Name_Set>): ResourceAPI_Name_Set {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Name_Set>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Name_Set): ResourceAPI_Name_Set {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Name_Set, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Name.Set
 */
export const ResourceAPI_Name_Set = new ResourceAPI_Name_Set$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Name_Set_Request$Type extends MessageType<ResourceAPI_Name_Set_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Name.Set.Request", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_Name_Set_Request>): ResourceAPI_Name_Set_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Name_Set_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Name_Set_Request): ResourceAPI_Name_Set_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Name_Set_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Name.Set.Request
 */
export const ResourceAPI_Name_Set_Request = new ResourceAPI_Name_Set_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Name_Set_Response$Type extends MessageType<ResourceAPI_Name_Set_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Name.Set.Response", []);
    }
    create(value?: PartialMessage<ResourceAPI_Name_Set_Response>): ResourceAPI_Name_Set_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Name_Set_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Name_Set_Response): ResourceAPI_Name_Set_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Name_Set_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Name.Set.Response
 */
export const ResourceAPI_Name_Set_Response = new ResourceAPI_Name_Set_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Name_Get$Type extends MessageType<ResourceAPI_Name_Get> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Name.Get", []);
    }
    create(value?: PartialMessage<ResourceAPI_Name_Get>): ResourceAPI_Name_Get {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Name_Get>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Name_Get): ResourceAPI_Name_Get {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Name_Get, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Name.Get
 */
export const ResourceAPI_Name_Get = new ResourceAPI_Name_Get$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Name_Get_Request$Type extends MessageType<ResourceAPI_Name_Get_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Name.Get.Request", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_Name_Get_Request>): ResourceAPI_Name_Get_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Name_Get_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Name_Get_Request): ResourceAPI_Name_Get_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Name_Get_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Name.Get.Request
 */
export const ResourceAPI_Name_Get_Request = new ResourceAPI_Name_Get_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Name_Get_Response$Type extends MessageType<ResourceAPI_Name_Get_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Name.Get.Response", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_Name_Get_Response>): ResourceAPI_Name_Get_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Name_Get_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Name_Get_Response): ResourceAPI_Name_Get_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Name_Get_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Name.Get.Response
 */
export const ResourceAPI_Name_Get_Response = new ResourceAPI_Name_Get_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Name_Exists$Type extends MessageType<ResourceAPI_Name_Exists> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Name.Exists", []);
    }
    create(value?: PartialMessage<ResourceAPI_Name_Exists>): ResourceAPI_Name_Exists {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Name_Exists>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Name_Exists): ResourceAPI_Name_Exists {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Name_Exists, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Name.Exists
 */
export const ResourceAPI_Name_Exists = new ResourceAPI_Name_Exists$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Name_Exists_Request$Type extends MessageType<ResourceAPI_Name_Exists_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Name.Exists.Request", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_Name_Exists_Request>): ResourceAPI_Name_Exists_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Name_Exists_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Name_Exists_Request): ResourceAPI_Name_Exists_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Name_Exists_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Name.Exists.Request
 */
export const ResourceAPI_Name_Exists_Request = new ResourceAPI_Name_Exists_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Name_Exists_Response$Type extends MessageType<ResourceAPI_Name_Exists_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Name.Exists.Response", [
            { no: 1, name: "exists", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_Name_Exists_Response>): ResourceAPI_Name_Exists_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.exists = false;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Name_Exists_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Name_Exists_Response): ResourceAPI_Name_Exists_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool exists */ 1:
                    message.exists = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Name_Exists_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool exists = 1; */
        if (message.exists !== false)
            writer.tag(1, WireType.Varint).bool(message.exists);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Name.Exists.Response
 */
export const ResourceAPI_Name_Exists_Response = new ResourceAPI_Name_Exists_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Name_Delete$Type extends MessageType<ResourceAPI_Name_Delete> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Name.Delete", []);
    }
    create(value?: PartialMessage<ResourceAPI_Name_Delete>): ResourceAPI_Name_Delete {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Name_Delete>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Name_Delete): ResourceAPI_Name_Delete {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Name_Delete, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Name.Delete
 */
export const ResourceAPI_Name_Delete = new ResourceAPI_Name_Delete$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Name_Delete_Request$Type extends MessageType<ResourceAPI_Name_Delete_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Name.Delete.Request", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_Name_Delete_Request>): ResourceAPI_Name_Delete_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Name_Delete_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Name_Delete_Request): ResourceAPI_Name_Delete_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Name_Delete_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Name.Delete.Request
 */
export const ResourceAPI_Name_Delete_Request = new ResourceAPI_Name_Delete_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Name_Delete_Response$Type extends MessageType<ResourceAPI_Name_Delete_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Name.Delete.Response", []);
    }
    create(value?: PartialMessage<ResourceAPI_Name_Delete_Response>): ResourceAPI_Name_Delete_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Name_Delete_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Name_Delete_Response): ResourceAPI_Name_Delete_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Name_Delete_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Name.Delete.Response
 */
export const ResourceAPI_Name_Delete_Response = new ResourceAPI_Name_Delete_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Tree$Type extends MessageType<ResourceAPI_Tree> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Tree", []);
    }
    create(value?: PartialMessage<ResourceAPI_Tree>): ResourceAPI_Tree {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Tree>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Tree): ResourceAPI_Tree {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Tree, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Tree
 */
export const ResourceAPI_Tree = new ResourceAPI_Tree$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Tree_Request$Type extends MessageType<ResourceAPI_Tree_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Tree.Request", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "max_depth", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_Tree_Request>): ResourceAPI_Tree_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Tree_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Tree_Request): ResourceAPI_Tree_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 max_depth */ 2:
                    message.maxDepth = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Tree_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        /* optional uint32 max_depth = 2; */
        if (message.maxDepth !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.maxDepth);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Tree.Request
 */
export const ResourceAPI_Tree_Request = new ResourceAPI_Tree_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_Tree_Response$Type extends MessageType<ResourceAPI_Tree_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.Tree.Response", [
            { no: 1, name: "resource", kind: "message", T: () => Resource }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_Tree_Response>): ResourceAPI_Tree_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_Tree_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_Tree_Response): ResourceAPI_Tree_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.PL.API.Resource resource */ 1:
                    message.resource = Resource.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_Tree_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.PL.API.Resource resource = 1; */
        if (message.resource)
            Resource.internalBinaryWrite(message.resource, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.Tree.Response
 */
export const ResourceAPI_Tree_Response = new ResourceAPI_Tree_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_TreeSize$Type extends MessageType<ResourceAPI_TreeSize> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.TreeSize", []);
    }
    create(value?: PartialMessage<ResourceAPI_TreeSize>): ResourceAPI_TreeSize {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_TreeSize>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_TreeSize): ResourceAPI_TreeSize {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_TreeSize, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.TreeSize
 */
export const ResourceAPI_TreeSize = new ResourceAPI_TreeSize$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_TreeSize_Request$Type extends MessageType<ResourceAPI_TreeSize_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.TreeSize.Request", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_TreeSize_Request>): ResourceAPI_TreeSize_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_TreeSize_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_TreeSize_Request): ResourceAPI_TreeSize_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_TreeSize_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.TreeSize.Request
 */
export const ResourceAPI_TreeSize_Request = new ResourceAPI_TreeSize_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceAPI_TreeSize_Response$Type extends MessageType<ResourceAPI_TreeSize_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceAPI.TreeSize.Response", [
            { no: 1, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "resource_count", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceAPI_TreeSize_Response>): ResourceAPI_TreeSize_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.size = 0n;
        message.resourceCount = 0n;
        if (value !== undefined)
            reflectionMergePartial<ResourceAPI_TreeSize_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceAPI_TreeSize_Response): ResourceAPI_TreeSize_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 size */ 1:
                    message.size = reader.uint64().toBigInt();
                    break;
                case /* uint64 resource_count */ 2:
                    message.resourceCount = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceAPI_TreeSize_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 size = 1; */
        if (message.size !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.size);
        /* uint64 resource_count = 2; */
        if (message.resourceCount !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.resourceCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceAPI.TreeSize.Response
 */
export const ResourceAPI_TreeSize_Response = new ResourceAPI_TreeSize_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI$Type extends MessageType<FieldAPI> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI", []);
    }
    create(value?: PartialMessage<FieldAPI>): FieldAPI {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldAPI>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI): FieldAPI {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI
 */
export const FieldAPI = new FieldAPI$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI_Create$Type extends MessageType<FieldAPI_Create> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI.Create", []);
    }
    create(value?: PartialMessage<FieldAPI_Create>): FieldAPI_Create {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldAPI_Create>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI_Create): FieldAPI_Create {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI_Create, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI.Create
 */
export const FieldAPI_Create = new FieldAPI_Create$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI_Create_Request$Type extends MessageType<FieldAPI_Create_Request> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI.Create.Request", [
            { no: 1, name: "type", kind: "enum", T: () => ["MiLaboratories.PL.Base.FieldType", FieldType] },
            { no: 2, name: "id", kind: "message", T: () => FieldRef }
        ]);
    }
    create(value?: PartialMessage<FieldAPI_Create_Request>): FieldAPI_Create_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<FieldAPI_Create_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI_Create_Request): FieldAPI_Create_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.PL.Base.FieldType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* MiLaboratories.PL.Base.FieldRef id */ 2:
                    message.id = FieldRef.internalBinaryRead(reader, reader.uint32(), options, message.id);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI_Create_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.PL.Base.FieldType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* MiLaboratories.PL.Base.FieldRef id = 2; */
        if (message.id)
            FieldRef.internalBinaryWrite(message.id, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI.Create.Request
 */
export const FieldAPI_Create_Request = new FieldAPI_Create_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI_Create_Response$Type extends MessageType<FieldAPI_Create_Response> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI.Create.Response", [
            { no: 1, name: "global_id", kind: "message", T: () => FieldRef }
        ]);
    }
    create(value?: PartialMessage<FieldAPI_Create_Response>): FieldAPI_Create_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldAPI_Create_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI_Create_Response): FieldAPI_Create_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.PL.Base.FieldRef global_id */ 1:
                    message.globalId = FieldRef.internalBinaryRead(reader, reader.uint32(), options, message.globalId);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI_Create_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.PL.Base.FieldRef global_id = 1; */
        if (message.globalId)
            FieldRef.internalBinaryWrite(message.globalId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI.Create.Response
 */
export const FieldAPI_Create_Response = new FieldAPI_Create_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI_Exists$Type extends MessageType<FieldAPI_Exists> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI.Exists", []);
    }
    create(value?: PartialMessage<FieldAPI_Exists>): FieldAPI_Exists {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldAPI_Exists>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI_Exists): FieldAPI_Exists {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI_Exists, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI.Exists
 */
export const FieldAPI_Exists = new FieldAPI_Exists$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI_Exists_Request$Type extends MessageType<FieldAPI_Exists_Request> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI.Exists.Request", [
            { no: 1, name: "field", kind: "message", T: () => FieldRef }
        ]);
    }
    create(value?: PartialMessage<FieldAPI_Exists_Request>): FieldAPI_Exists_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldAPI_Exists_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI_Exists_Request): FieldAPI_Exists_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.PL.Base.FieldRef field */ 1:
                    message.field = FieldRef.internalBinaryRead(reader, reader.uint32(), options, message.field);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI_Exists_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.PL.Base.FieldRef field = 1; */
        if (message.field)
            FieldRef.internalBinaryWrite(message.field, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI.Exists.Request
 */
export const FieldAPI_Exists_Request = new FieldAPI_Exists_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI_Exists_Response$Type extends MessageType<FieldAPI_Exists_Response> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI.Exists.Response", [
            { no: 1, name: "exists", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<FieldAPI_Exists_Response>): FieldAPI_Exists_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.exists = false;
        if (value !== undefined)
            reflectionMergePartial<FieldAPI_Exists_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI_Exists_Response): FieldAPI_Exists_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool exists */ 1:
                    message.exists = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI_Exists_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool exists = 1; */
        if (message.exists !== false)
            writer.tag(1, WireType.Varint).bool(message.exists);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI.Exists.Response
 */
export const FieldAPI_Exists_Response = new FieldAPI_Exists_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI_Set$Type extends MessageType<FieldAPI_Set> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI.Set", []);
    }
    create(value?: PartialMessage<FieldAPI_Set>): FieldAPI_Set {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldAPI_Set>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI_Set): FieldAPI_Set {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI_Set, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI.Set
 */
export const FieldAPI_Set = new FieldAPI_Set$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI_Set_Request$Type extends MessageType<FieldAPI_Set_Request> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI.Set.Request", [
            { no: 1, name: "field", kind: "message", T: () => FieldRef },
            { no: 2, name: "value", kind: "message", T: () => FieldRef }
        ]);
    }
    create(value?: PartialMessage<FieldAPI_Set_Request>): FieldAPI_Set_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldAPI_Set_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI_Set_Request): FieldAPI_Set_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.PL.Base.FieldRef field */ 1:
                    message.field = FieldRef.internalBinaryRead(reader, reader.uint32(), options, message.field);
                    break;
                case /* MiLaboratories.PL.Base.FieldRef value */ 2:
                    message.value = FieldRef.internalBinaryRead(reader, reader.uint32(), options, message.value);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI_Set_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.PL.Base.FieldRef field = 1; */
        if (message.field)
            FieldRef.internalBinaryWrite(message.field, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.Base.FieldRef value = 2; */
        if (message.value)
            FieldRef.internalBinaryWrite(message.value, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI.Set.Request
 */
export const FieldAPI_Set_Request = new FieldAPI_Set_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI_Set_Response$Type extends MessageType<FieldAPI_Set_Response> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI.Set.Response", []);
    }
    create(value?: PartialMessage<FieldAPI_Set_Response>): FieldAPI_Set_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldAPI_Set_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI_Set_Response): FieldAPI_Set_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI_Set_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI.Set.Response
 */
export const FieldAPI_Set_Response = new FieldAPI_Set_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI_SetError$Type extends MessageType<FieldAPI_SetError> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI.SetError", []);
    }
    create(value?: PartialMessage<FieldAPI_SetError>): FieldAPI_SetError {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldAPI_SetError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI_SetError): FieldAPI_SetError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI_SetError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI.SetError
 */
export const FieldAPI_SetError = new FieldAPI_SetError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI_SetError_Request$Type extends MessageType<FieldAPI_SetError_Request> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI.SetError.Request", [
            { no: 1, name: "field", kind: "message", T: () => FieldRef },
            { no: 2, name: "err_resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<FieldAPI_SetError_Request>): FieldAPI_SetError_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.errResourceId = 0n;
        if (value !== undefined)
            reflectionMergePartial<FieldAPI_SetError_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI_SetError_Request): FieldAPI_SetError_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.PL.Base.FieldRef field */ 1:
                    message.field = FieldRef.internalBinaryRead(reader, reader.uint32(), options, message.field);
                    break;
                case /* uint64 err_resource_id */ 2:
                    message.errResourceId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI_SetError_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.PL.Base.FieldRef field = 1; */
        if (message.field)
            FieldRef.internalBinaryWrite(message.field, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 err_resource_id = 2; */
        if (message.errResourceId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.errResourceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI.SetError.Request
 */
export const FieldAPI_SetError_Request = new FieldAPI_SetError_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI_SetError_Response$Type extends MessageType<FieldAPI_SetError_Response> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI.SetError.Response", []);
    }
    create(value?: PartialMessage<FieldAPI_SetError_Response>): FieldAPI_SetError_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldAPI_SetError_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI_SetError_Response): FieldAPI_SetError_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI_SetError_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI.SetError.Response
 */
export const FieldAPI_SetError_Response = new FieldAPI_SetError_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI_Get$Type extends MessageType<FieldAPI_Get> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI.Get", []);
    }
    create(value?: PartialMessage<FieldAPI_Get>): FieldAPI_Get {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldAPI_Get>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI_Get): FieldAPI_Get {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI_Get, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI.Get
 */
export const FieldAPI_Get = new FieldAPI_Get$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI_Get_Request$Type extends MessageType<FieldAPI_Get_Request> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI.Get.Request", [
            { no: 1, name: "field", kind: "message", T: () => FieldRef }
        ]);
    }
    create(value?: PartialMessage<FieldAPI_Get_Request>): FieldAPI_Get_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldAPI_Get_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI_Get_Request): FieldAPI_Get_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.PL.Base.FieldRef field */ 1:
                    message.field = FieldRef.internalBinaryRead(reader, reader.uint32(), options, message.field);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI_Get_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.PL.Base.FieldRef field = 1; */
        if (message.field)
            FieldRef.internalBinaryWrite(message.field, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI.Get.Request
 */
export const FieldAPI_Get_Request = new FieldAPI_Get_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI_Get_Response$Type extends MessageType<FieldAPI_Get_Response> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI.Get.Response", [
            { no: 1, name: "field", kind: "message", T: () => Field }
        ]);
    }
    create(value?: PartialMessage<FieldAPI_Get_Response>): FieldAPI_Get_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldAPI_Get_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI_Get_Response): FieldAPI_Get_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.PL.API.Field field */ 1:
                    message.field = Field.internalBinaryRead(reader, reader.uint32(), options, message.field);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI_Get_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.PL.API.Field field = 1; */
        if (message.field)
            Field.internalBinaryWrite(message.field, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI.Get.Response
 */
export const FieldAPI_Get_Response = new FieldAPI_Get_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI_Reset$Type extends MessageType<FieldAPI_Reset> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI.Reset", []);
    }
    create(value?: PartialMessage<FieldAPI_Reset>): FieldAPI_Reset {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldAPI_Reset>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI_Reset): FieldAPI_Reset {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI_Reset, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI.Reset
 */
export const FieldAPI_Reset = new FieldAPI_Reset$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI_Reset_Request$Type extends MessageType<FieldAPI_Reset_Request> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI.Reset.Request", [
            { no: 1, name: "field", kind: "message", T: () => FieldRef }
        ]);
    }
    create(value?: PartialMessage<FieldAPI_Reset_Request>): FieldAPI_Reset_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldAPI_Reset_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI_Reset_Request): FieldAPI_Reset_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.PL.Base.FieldRef field */ 1:
                    message.field = FieldRef.internalBinaryRead(reader, reader.uint32(), options, message.field);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI_Reset_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.PL.Base.FieldRef field = 1; */
        if (message.field)
            FieldRef.internalBinaryWrite(message.field, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI.Reset.Request
 */
export const FieldAPI_Reset_Request = new FieldAPI_Reset_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI_Reset_Response$Type extends MessageType<FieldAPI_Reset_Response> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI.Reset.Response", []);
    }
    create(value?: PartialMessage<FieldAPI_Reset_Response>): FieldAPI_Reset_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldAPI_Reset_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI_Reset_Response): FieldAPI_Reset_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI_Reset_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI.Reset.Response
 */
export const FieldAPI_Reset_Response = new FieldAPI_Reset_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI_Remove$Type extends MessageType<FieldAPI_Remove> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI.Remove", []);
    }
    create(value?: PartialMessage<FieldAPI_Remove>): FieldAPI_Remove {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldAPI_Remove>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI_Remove): FieldAPI_Remove {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI_Remove, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI.Remove
 */
export const FieldAPI_Remove = new FieldAPI_Remove$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI_Remove_Request$Type extends MessageType<FieldAPI_Remove_Request> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI.Remove.Request", [
            { no: 1, name: "field", kind: "message", T: () => FieldRef }
        ]);
    }
    create(value?: PartialMessage<FieldAPI_Remove_Request>): FieldAPI_Remove_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldAPI_Remove_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI_Remove_Request): FieldAPI_Remove_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.PL.Base.FieldRef field */ 1:
                    message.field = FieldRef.internalBinaryRead(reader, reader.uint32(), options, message.field);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI_Remove_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.PL.Base.FieldRef field = 1; */
        if (message.field)
            FieldRef.internalBinaryWrite(message.field, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI.Remove.Request
 */
export const FieldAPI_Remove_Request = new FieldAPI_Remove_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI_Remove_Response$Type extends MessageType<FieldAPI_Remove_Response> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI.Remove.Response", []);
    }
    create(value?: PartialMessage<FieldAPI_Remove_Response>): FieldAPI_Remove_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldAPI_Remove_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI_Remove_Response): FieldAPI_Remove_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI_Remove_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI.Remove.Response
 */
export const FieldAPI_Remove_Response = new FieldAPI_Remove_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI_List$Type extends MessageType<FieldAPI_List> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI.List", []);
    }
    create(value?: PartialMessage<FieldAPI_List>): FieldAPI_List {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldAPI_List>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI_List): FieldAPI_List {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI_List, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI.List
 */
export const FieldAPI_List = new FieldAPI_List$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI_List_Request$Type extends MessageType<FieldAPI_List_Request> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI.List.Request", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "start_from", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "limit", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FieldAPI_List_Request>): FieldAPI_List_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        message.startFrom = "";
        message.limit = 0;
        if (value !== undefined)
            reflectionMergePartial<FieldAPI_List_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI_List_Request): FieldAPI_List_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                case /* string start_from */ 2:
                    message.startFrom = reader.string();
                    break;
                case /* uint32 limit */ 3:
                    message.limit = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI_List_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        /* string start_from = 2; */
        if (message.startFrom !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.startFrom);
        /* uint32 limit = 3; */
        if (message.limit !== 0)
            writer.tag(3, WireType.Varint).uint32(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI.List.Request
 */
export const FieldAPI_List_Request = new FieldAPI_List_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldAPI_List_Response$Type extends MessageType<FieldAPI_List_Response> {
    constructor() {
        super("MiLaboratories.PL.API.FieldAPI.List.Response", [
            { no: 1, name: "field", kind: "message", T: () => Field },
            { no: 4, name: "next", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FieldAPI_List_Response>): FieldAPI_List_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.next = "";
        if (value !== undefined)
            reflectionMergePartial<FieldAPI_List_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldAPI_List_Response): FieldAPI_List_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.PL.API.Field field */ 1:
                    message.field = Field.internalBinaryRead(reader, reader.uint32(), options, message.field);
                    break;
                case /* string next */ 4:
                    message.next = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldAPI_List_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.PL.API.Field field = 1; */
        if (message.field)
            Field.internalBinaryWrite(message.field, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string next = 4; */
        if (message.next !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.next);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.FieldAPI.List.Response
 */
export const FieldAPI_List_Response = new FieldAPI_List_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationAPI$Type extends MessageType<NotificationAPI> {
    constructor() {
        super("MiLaboratories.PL.API.NotificationAPI", []);
    }
    create(value?: PartialMessage<NotificationAPI>): NotificationAPI {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<NotificationAPI>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationAPI): NotificationAPI {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationAPI, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.NotificationAPI
 */
export const NotificationAPI = new NotificationAPI$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationAPI_Get$Type extends MessageType<NotificationAPI_Get> {
    constructor() {
        super("MiLaboratories.PL.API.NotificationAPI.Get", []);
    }
    create(value?: PartialMessage<NotificationAPI_Get>): NotificationAPI_Get {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<NotificationAPI_Get>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationAPI_Get): NotificationAPI_Get {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationAPI_Get, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.NotificationAPI.Get
 */
export const NotificationAPI_Get = new NotificationAPI_Get$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationAPI_Get_Request$Type extends MessageType<NotificationAPI_Get_Request> {
    constructor() {
        super("MiLaboratories.PL.API.NotificationAPI.Get.Request", [
            { no: 1, name: "subscription", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "max_notifications", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<NotificationAPI_Get_Request>): NotificationAPI_Get_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.subscription = 0n;
        message.maxNotifications = 0;
        if (value !== undefined)
            reflectionMergePartial<NotificationAPI_Get_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationAPI_Get_Request): NotificationAPI_Get_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 subscription */ 1:
                    message.subscription = reader.uint64().toBigInt();
                    break;
                case /* uint32 max_notifications */ 2:
                    message.maxNotifications = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationAPI_Get_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 subscription = 1; */
        if (message.subscription !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.subscription);
        /* uint32 max_notifications = 2; */
        if (message.maxNotifications !== 0)
            writer.tag(2, WireType.Varint).uint32(message.maxNotifications);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.NotificationAPI.Get.Request
 */
export const NotificationAPI_Get_Request = new NotificationAPI_Get_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationAPI_Get_Response$Type extends MessageType<NotificationAPI_Get_Response> {
    constructor() {
        super("MiLaboratories.PL.API.NotificationAPI.Get.Response", [
            { no: 1, name: "notifications", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Notification }
        ]);
    }
    create(value?: PartialMessage<NotificationAPI_Get_Response>): NotificationAPI_Get_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.notifications = [];
        if (value !== undefined)
            reflectionMergePartial<NotificationAPI_Get_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationAPI_Get_Response): NotificationAPI_Get_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated MiLaboratories.PL.API.Notification notifications */ 1:
                    message.notifications.push(Notification.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationAPI_Get_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated MiLaboratories.PL.API.Notification notifications = 1; */
        for (let i = 0; i < message.notifications.length; i++)
            Notification.internalBinaryWrite(message.notifications[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.NotificationAPI.Get.Response
 */
export const NotificationAPI_Get_Response = new NotificationAPI_Get_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationAPI_Ack$Type extends MessageType<NotificationAPI_Ack> {
    constructor() {
        super("MiLaboratories.PL.API.NotificationAPI.Ack", []);
    }
    create(value?: PartialMessage<NotificationAPI_Ack>): NotificationAPI_Ack {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<NotificationAPI_Ack>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationAPI_Ack): NotificationAPI_Ack {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationAPI_Ack, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.NotificationAPI.Ack
 */
export const NotificationAPI_Ack = new NotificationAPI_Ack$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationAPI_Ack_Request$Type extends MessageType<NotificationAPI_Ack_Request> {
    constructor() {
        super("MiLaboratories.PL.API.NotificationAPI.Ack.Request", [
            { no: 1, name: "subscription_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "event_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<NotificationAPI_Ack_Request>): NotificationAPI_Ack_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.subscriptionId = 0n;
        message.eventId = 0n;
        if (value !== undefined)
            reflectionMergePartial<NotificationAPI_Ack_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationAPI_Ack_Request): NotificationAPI_Ack_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 subscription_id */ 1:
                    message.subscriptionId = reader.uint64().toBigInt();
                    break;
                case /* uint64 event_id */ 2:
                    message.eventId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationAPI_Ack_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 subscription_id = 1; */
        if (message.subscriptionId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.subscriptionId);
        /* uint64 event_id = 2; */
        if (message.eventId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.eventId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.NotificationAPI.Ack.Request
 */
export const NotificationAPI_Ack_Request = new NotificationAPI_Ack_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationAPI_Ack_Response$Type extends MessageType<NotificationAPI_Ack_Response> {
    constructor() {
        super("MiLaboratories.PL.API.NotificationAPI.Ack.Response", []);
    }
    create(value?: PartialMessage<NotificationAPI_Ack_Response>): NotificationAPI_Ack_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<NotificationAPI_Ack_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationAPI_Ack_Response): NotificationAPI_Ack_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationAPI_Ack_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.NotificationAPI.Ack.Response
 */
export const NotificationAPI_Ack_Response = new NotificationAPI_Ack_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationAPI_Discard$Type extends MessageType<NotificationAPI_Discard> {
    constructor() {
        super("MiLaboratories.PL.API.NotificationAPI.Discard", []);
    }
    create(value?: PartialMessage<NotificationAPI_Discard>): NotificationAPI_Discard {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<NotificationAPI_Discard>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationAPI_Discard): NotificationAPI_Discard {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationAPI_Discard, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.NotificationAPI.Discard
 */
export const NotificationAPI_Discard = new NotificationAPI_Discard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationAPI_Discard_Request$Type extends MessageType<NotificationAPI_Discard_Request> {
    constructor() {
        super("MiLaboratories.PL.API.NotificationAPI.Discard.Request", [
            { no: 1, name: "subscription_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "event_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<NotificationAPI_Discard_Request>): NotificationAPI_Discard_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.subscriptionId = 0n;
        message.eventId = 0n;
        if (value !== undefined)
            reflectionMergePartial<NotificationAPI_Discard_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationAPI_Discard_Request): NotificationAPI_Discard_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 subscription_id */ 1:
                    message.subscriptionId = reader.uint64().toBigInt();
                    break;
                case /* uint64 event_id */ 2:
                    message.eventId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationAPI_Discard_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 subscription_id = 1; */
        if (message.subscriptionId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.subscriptionId);
        /* uint64 event_id = 2; */
        if (message.eventId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.eventId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.NotificationAPI.Discard.Request
 */
export const NotificationAPI_Discard_Request = new NotificationAPI_Discard_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationAPI_Discard_Response$Type extends MessageType<NotificationAPI_Discard_Response> {
    constructor() {
        super("MiLaboratories.PL.API.NotificationAPI.Discard.Response", []);
    }
    create(value?: PartialMessage<NotificationAPI_Discard_Response>): NotificationAPI_Discard_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<NotificationAPI_Discard_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationAPI_Discard_Response): NotificationAPI_Discard_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationAPI_Discard_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.NotificationAPI.Discard.Response
 */
export const NotificationAPI_Discard_Response = new NotificationAPI_Discard_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscriptionAPI$Type extends MessageType<SubscriptionAPI> {
    constructor() {
        super("MiLaboratories.PL.API.SubscriptionAPI", []);
    }
    create(value?: PartialMessage<SubscriptionAPI>): SubscriptionAPI {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscriptionAPI>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscriptionAPI): SubscriptionAPI {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscriptionAPI, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.SubscriptionAPI
 */
export const SubscriptionAPI = new SubscriptionAPI$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscriptionAPI_CreateSubscription$Type extends MessageType<SubscriptionAPI_CreateSubscription> {
    constructor() {
        super("MiLaboratories.PL.API.SubscriptionAPI.CreateSubscription", []);
    }
    create(value?: PartialMessage<SubscriptionAPI_CreateSubscription>): SubscriptionAPI_CreateSubscription {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscriptionAPI_CreateSubscription>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscriptionAPI_CreateSubscription): SubscriptionAPI_CreateSubscription {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscriptionAPI_CreateSubscription, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.SubscriptionAPI.CreateSubscription
 */
export const SubscriptionAPI_CreateSubscription = new SubscriptionAPI_CreateSubscription$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscriptionAPI_CreateSubscription_Request$Type extends MessageType<SubscriptionAPI_CreateSubscription_Request> {
    constructor() {
        super("MiLaboratories.PL.API.SubscriptionAPI.CreateSubscription.Request", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "blocking", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "gc", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SubscriptionAPI_CreateSubscription_Request>): SubscriptionAPI_CreateSubscription_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.blocking = false;
        message.gc = false;
        if (value !== undefined)
            reflectionMergePartial<SubscriptionAPI_CreateSubscription_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscriptionAPI_CreateSubscription_Request): SubscriptionAPI_CreateSubscription_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* bool blocking */ 2:
                    message.blocking = reader.bool();
                    break;
                case /* bool gc */ 3:
                    message.gc = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscriptionAPI_CreateSubscription_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* bool blocking = 2; */
        if (message.blocking !== false)
            writer.tag(2, WireType.Varint).bool(message.blocking);
        /* bool gc = 3; */
        if (message.gc !== false)
            writer.tag(3, WireType.Varint).bool(message.gc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.SubscriptionAPI.CreateSubscription.Request
 */
export const SubscriptionAPI_CreateSubscription_Request = new SubscriptionAPI_CreateSubscription_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscriptionAPI_CreateSubscription_Response$Type extends MessageType<SubscriptionAPI_CreateSubscription_Response> {
    constructor() {
        super("MiLaboratories.PL.API.SubscriptionAPI.CreateSubscription.Response", [
            { no: 1, name: "subscription_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SubscriptionAPI_CreateSubscription_Response>): SubscriptionAPI_CreateSubscription_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.subscriptionId = 0n;
        if (value !== undefined)
            reflectionMergePartial<SubscriptionAPI_CreateSubscription_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscriptionAPI_CreateSubscription_Response): SubscriptionAPI_CreateSubscription_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 subscription_id */ 1:
                    message.subscriptionId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscriptionAPI_CreateSubscription_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 subscription_id = 1; */
        if (message.subscriptionId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.subscriptionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.SubscriptionAPI.CreateSubscription.Response
 */
export const SubscriptionAPI_CreateSubscription_Response = new SubscriptionAPI_CreateSubscription_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscriptionAPI_CreateFilter$Type extends MessageType<SubscriptionAPI_CreateFilter> {
    constructor() {
        super("MiLaboratories.PL.API.SubscriptionAPI.CreateFilter", []);
    }
    create(value?: PartialMessage<SubscriptionAPI_CreateFilter>): SubscriptionAPI_CreateFilter {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscriptionAPI_CreateFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscriptionAPI_CreateFilter): SubscriptionAPI_CreateFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscriptionAPI_CreateFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.SubscriptionAPI.CreateFilter
 */
export const SubscriptionAPI_CreateFilter = new SubscriptionAPI_CreateFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscriptionAPI_CreateFilter_Request$Type extends MessageType<SubscriptionAPI_CreateFilter_Request> {
    constructor() {
        super("MiLaboratories.PL.API.SubscriptionAPI.CreateFilter.Request", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "filter", kind: "message", T: () => NotificationFilter }
        ]);
    }
    create(value?: PartialMessage<SubscriptionAPI_CreateFilter_Request>): SubscriptionAPI_CreateFilter_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<SubscriptionAPI_CreateFilter_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscriptionAPI_CreateFilter_Request): SubscriptionAPI_CreateFilter_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* MiLaboratories.PL.RTypes.NotificationFilter filter */ 2:
                    message.filter = NotificationFilter.internalBinaryRead(reader, reader.uint32(), options, message.filter);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscriptionAPI_CreateFilter_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* MiLaboratories.PL.RTypes.NotificationFilter filter = 2; */
        if (message.filter)
            NotificationFilter.internalBinaryWrite(message.filter, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.SubscriptionAPI.CreateFilter.Request
 */
export const SubscriptionAPI_CreateFilter_Request = new SubscriptionAPI_CreateFilter_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscriptionAPI_CreateFilter_Response$Type extends MessageType<SubscriptionAPI_CreateFilter_Response> {
    constructor() {
        super("MiLaboratories.PL.API.SubscriptionAPI.CreateFilter.Response", [
            { no: 1, name: "filter_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SubscriptionAPI_CreateFilter_Response>): SubscriptionAPI_CreateFilter_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.filterId = 0n;
        if (value !== undefined)
            reflectionMergePartial<SubscriptionAPI_CreateFilter_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscriptionAPI_CreateFilter_Response): SubscriptionAPI_CreateFilter_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 filter_id */ 1:
                    message.filterId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscriptionAPI_CreateFilter_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 filter_id = 1; */
        if (message.filterId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.filterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.SubscriptionAPI.CreateFilter.Response
 */
export const SubscriptionAPI_CreateFilter_Response = new SubscriptionAPI_CreateFilter_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscriptionAPI_ListSubscriptions$Type extends MessageType<SubscriptionAPI_ListSubscriptions> {
    constructor() {
        super("MiLaboratories.PL.API.SubscriptionAPI.ListSubscriptions", []);
    }
    create(value?: PartialMessage<SubscriptionAPI_ListSubscriptions>): SubscriptionAPI_ListSubscriptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscriptionAPI_ListSubscriptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscriptionAPI_ListSubscriptions): SubscriptionAPI_ListSubscriptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscriptionAPI_ListSubscriptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.SubscriptionAPI.ListSubscriptions
 */
export const SubscriptionAPI_ListSubscriptions = new SubscriptionAPI_ListSubscriptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscriptionAPI_ListSubscriptions_SubscriptionInfo$Type extends MessageType<SubscriptionAPI_ListSubscriptions_SubscriptionInfo> {
    constructor() {
        super("MiLaboratories.PL.API.SubscriptionAPI.ListSubscriptions.SubscriptionInfo", [
            { no: 1, name: "subscription", kind: "message", T: () => Subscription },
            { no: 2, name: "last_read_time", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "notification_queue_size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SubscriptionAPI_ListSubscriptions_SubscriptionInfo>): SubscriptionAPI_ListSubscriptions_SubscriptionInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lastReadTime = 0n;
        message.notificationQueueSize = 0n;
        if (value !== undefined)
            reflectionMergePartial<SubscriptionAPI_ListSubscriptions_SubscriptionInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscriptionAPI_ListSubscriptions_SubscriptionInfo): SubscriptionAPI_ListSubscriptions_SubscriptionInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.PL.API.Subscription subscription */ 1:
                    message.subscription = Subscription.internalBinaryRead(reader, reader.uint32(), options, message.subscription);
                    break;
                case /* uint64 last_read_time */ 2:
                    message.lastReadTime = reader.uint64().toBigInt();
                    break;
                case /* uint64 notification_queue_size */ 3:
                    message.notificationQueueSize = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscriptionAPI_ListSubscriptions_SubscriptionInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.PL.API.Subscription subscription = 1; */
        if (message.subscription)
            Subscription.internalBinaryWrite(message.subscription, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 last_read_time = 2; */
        if (message.lastReadTime !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.lastReadTime);
        /* uint64 notification_queue_size = 3; */
        if (message.notificationQueueSize !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.notificationQueueSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.SubscriptionAPI.ListSubscriptions.SubscriptionInfo
 */
export const SubscriptionAPI_ListSubscriptions_SubscriptionInfo = new SubscriptionAPI_ListSubscriptions_SubscriptionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscriptionAPI_ListSubscriptions_Request$Type extends MessageType<SubscriptionAPI_ListSubscriptions_Request> {
    constructor() {
        super("MiLaboratories.PL.API.SubscriptionAPI.ListSubscriptions.Request", []);
    }
    create(value?: PartialMessage<SubscriptionAPI_ListSubscriptions_Request>): SubscriptionAPI_ListSubscriptions_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscriptionAPI_ListSubscriptions_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscriptionAPI_ListSubscriptions_Request): SubscriptionAPI_ListSubscriptions_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscriptionAPI_ListSubscriptions_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.SubscriptionAPI.ListSubscriptions.Request
 */
export const SubscriptionAPI_ListSubscriptions_Request = new SubscriptionAPI_ListSubscriptions_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscriptionAPI_ListSubscriptions_Response$Type extends MessageType<SubscriptionAPI_ListSubscriptions_Response> {
    constructor() {
        super("MiLaboratories.PL.API.SubscriptionAPI.ListSubscriptions.Response", [
            { no: 1, name: "subscriptions", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SubscriptionAPI_ListSubscriptions_SubscriptionInfo }
        ]);
    }
    create(value?: PartialMessage<SubscriptionAPI_ListSubscriptions_Response>): SubscriptionAPI_ListSubscriptions_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.subscriptions = [];
        if (value !== undefined)
            reflectionMergePartial<SubscriptionAPI_ListSubscriptions_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscriptionAPI_ListSubscriptions_Response): SubscriptionAPI_ListSubscriptions_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated MiLaboratories.PL.API.SubscriptionAPI.ListSubscriptions.SubscriptionInfo subscriptions */ 1:
                    message.subscriptions.push(SubscriptionAPI_ListSubscriptions_SubscriptionInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscriptionAPI_ListSubscriptions_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated MiLaboratories.PL.API.SubscriptionAPI.ListSubscriptions.SubscriptionInfo subscriptions = 1; */
        for (let i = 0; i < message.subscriptions.length; i++)
            SubscriptionAPI_ListSubscriptions_SubscriptionInfo.internalBinaryWrite(message.subscriptions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.SubscriptionAPI.ListSubscriptions.Response
 */
export const SubscriptionAPI_ListSubscriptions_Response = new SubscriptionAPI_ListSubscriptions_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscriptionAPI_AttachFilter$Type extends MessageType<SubscriptionAPI_AttachFilter> {
    constructor() {
        super("MiLaboratories.PL.API.SubscriptionAPI.AttachFilter", []);
    }
    create(value?: PartialMessage<SubscriptionAPI_AttachFilter>): SubscriptionAPI_AttachFilter {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscriptionAPI_AttachFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscriptionAPI_AttachFilter): SubscriptionAPI_AttachFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscriptionAPI_AttachFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.SubscriptionAPI.AttachFilter
 */
export const SubscriptionAPI_AttachFilter = new SubscriptionAPI_AttachFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscriptionAPI_AttachFilter_Request$Type extends MessageType<SubscriptionAPI_AttachFilter_Request> {
    constructor() {
        super("MiLaboratories.PL.API.SubscriptionAPI.AttachFilter.Request", [
            { no: 1, name: "subscription_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "filter_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "filter_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SubscriptionAPI_AttachFilter_Request>): SubscriptionAPI_AttachFilter_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.subscriptionId = 0n;
        message.filterName = "";
        message.filterId = 0n;
        if (value !== undefined)
            reflectionMergePartial<SubscriptionAPI_AttachFilter_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscriptionAPI_AttachFilter_Request): SubscriptionAPI_AttachFilter_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 subscription_id */ 1:
                    message.subscriptionId = reader.uint64().toBigInt();
                    break;
                case /* string filter_name */ 2:
                    message.filterName = reader.string();
                    break;
                case /* uint64 filter_id */ 3:
                    message.filterId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscriptionAPI_AttachFilter_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 subscription_id = 1; */
        if (message.subscriptionId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.subscriptionId);
        /* string filter_name = 2; */
        if (message.filterName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.filterName);
        /* uint64 filter_id = 3; */
        if (message.filterId !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.filterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.SubscriptionAPI.AttachFilter.Request
 */
export const SubscriptionAPI_AttachFilter_Request = new SubscriptionAPI_AttachFilter_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscriptionAPI_AttachFilter_Response$Type extends MessageType<SubscriptionAPI_AttachFilter_Response> {
    constructor() {
        super("MiLaboratories.PL.API.SubscriptionAPI.AttachFilter.Response", []);
    }
    create(value?: PartialMessage<SubscriptionAPI_AttachFilter_Response>): SubscriptionAPI_AttachFilter_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscriptionAPI_AttachFilter_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscriptionAPI_AttachFilter_Response): SubscriptionAPI_AttachFilter_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscriptionAPI_AttachFilter_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.SubscriptionAPI.AttachFilter.Response
 */
export const SubscriptionAPI_AttachFilter_Response = new SubscriptionAPI_AttachFilter_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscriptionAPI_DetachFilter$Type extends MessageType<SubscriptionAPI_DetachFilter> {
    constructor() {
        super("MiLaboratories.PL.API.SubscriptionAPI.DetachFilter", []);
    }
    create(value?: PartialMessage<SubscriptionAPI_DetachFilter>): SubscriptionAPI_DetachFilter {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscriptionAPI_DetachFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscriptionAPI_DetachFilter): SubscriptionAPI_DetachFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscriptionAPI_DetachFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.SubscriptionAPI.DetachFilter
 */
export const SubscriptionAPI_DetachFilter = new SubscriptionAPI_DetachFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscriptionAPI_DetachFilter_Request$Type extends MessageType<SubscriptionAPI_DetachFilter_Request> {
    constructor() {
        super("MiLaboratories.PL.API.SubscriptionAPI.DetachFilter.Request", [
            { no: 1, name: "subscription_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "filter_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SubscriptionAPI_DetachFilter_Request>): SubscriptionAPI_DetachFilter_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.subscriptionId = 0n;
        message.filterName = "";
        if (value !== undefined)
            reflectionMergePartial<SubscriptionAPI_DetachFilter_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscriptionAPI_DetachFilter_Request): SubscriptionAPI_DetachFilter_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 subscription_id */ 1:
                    message.subscriptionId = reader.uint64().toBigInt();
                    break;
                case /* string filter_name */ 2:
                    message.filterName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscriptionAPI_DetachFilter_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 subscription_id = 1; */
        if (message.subscriptionId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.subscriptionId);
        /* string filter_name = 2; */
        if (message.filterName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.filterName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.SubscriptionAPI.DetachFilter.Request
 */
export const SubscriptionAPI_DetachFilter_Request = new SubscriptionAPI_DetachFilter_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscriptionAPI_DetachFilter_Response$Type extends MessageType<SubscriptionAPI_DetachFilter_Response> {
    constructor() {
        super("MiLaboratories.PL.API.SubscriptionAPI.DetachFilter.Response", []);
    }
    create(value?: PartialMessage<SubscriptionAPI_DetachFilter_Response>): SubscriptionAPI_DetachFilter_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscriptionAPI_DetachFilter_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscriptionAPI_DetachFilter_Response): SubscriptionAPI_DetachFilter_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscriptionAPI_DetachFilter_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.SubscriptionAPI.DetachFilter.Response
 */
export const SubscriptionAPI_DetachFilter_Response = new SubscriptionAPI_DetachFilter_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI$Type extends MessageType<ControllerAPI> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI", []);
    }
    create(value?: PartialMessage<ControllerAPI>): ControllerAPI {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI): ControllerAPI {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI
 */
export const ControllerAPI = new ControllerAPI$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_Register$Type extends MessageType<ControllerAPI_Register> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.Register", []);
    }
    create(value?: PartialMessage<ControllerAPI_Register>): ControllerAPI_Register {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_Register>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_Register): ControllerAPI_Register {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_Register, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.Register
 */
export const ControllerAPI_Register = new ControllerAPI_Register$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_Register_Request$Type extends MessageType<ControllerAPI_Register_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.Register.Request", [
            { no: 1, name: "controller_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "filters", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => NotificationFilter } },
            { no: 3, name: "resource_schemas", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ResourceSchema }
        ]);
    }
    create(value?: PartialMessage<ControllerAPI_Register_Request>): ControllerAPI_Register_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.controllerType = "";
        message.filters = {};
        message.resourceSchemas = [];
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_Register_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_Register_Request): ControllerAPI_Register_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string controller_type */ 1:
                    message.controllerType = reader.string();
                    break;
                case /* map<string, MiLaboratories.PL.RTypes.NotificationFilter> filters */ 2:
                    this.binaryReadMap2(message.filters, reader, options);
                    break;
                case /* repeated MiLaboratories.PL.API.ResourceSchema resource_schemas */ 3:
                    message.resourceSchemas.push(ResourceSchema.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: ControllerAPI_Register_Request["filters"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ControllerAPI_Register_Request["filters"] | undefined, val: ControllerAPI_Register_Request["filters"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = NotificationFilter.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for MiLaboratories.PL.API.ControllerAPI.Register.Request.filters");
            }
        }
        map[key ?? ""] = val ?? NotificationFilter.create();
    }
    internalBinaryWrite(message: ControllerAPI_Register_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string controller_type = 1; */
        if (message.controllerType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.controllerType);
        /* map<string, MiLaboratories.PL.RTypes.NotificationFilter> filters = 2; */
        for (let k of globalThis.Object.keys(message.filters)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            NotificationFilter.internalBinaryWrite(message.filters[k], writer, options);
            writer.join().join();
        }
        /* repeated MiLaboratories.PL.API.ResourceSchema resource_schemas = 3; */
        for (let i = 0; i < message.resourceSchemas.length; i++)
            ResourceSchema.internalBinaryWrite(message.resourceSchemas[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.Register.Request
 */
export const ControllerAPI_Register_Request = new ControllerAPI_Register_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_Register_Response$Type extends MessageType<ControllerAPI_Register_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.Register.Response", [
            { no: 1, name: "controller_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "subscription_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ControllerAPI_Register_Response>): ControllerAPI_Register_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.controllerId = 0n;
        message.subscriptionId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_Register_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_Register_Response): ControllerAPI_Register_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 controller_id */ 1:
                    message.controllerId = reader.uint64().toBigInt();
                    break;
                case /* uint64 subscription_id */ 2:
                    message.subscriptionId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_Register_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 controller_id = 1; */
        if (message.controllerId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.controllerId);
        /* uint64 subscription_id = 2; */
        if (message.subscriptionId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.subscriptionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.Register.Response
 */
export const ControllerAPI_Register_Response = new ControllerAPI_Register_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_Exists$Type extends MessageType<ControllerAPI_Exists> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.Exists", []);
    }
    create(value?: PartialMessage<ControllerAPI_Exists>): ControllerAPI_Exists {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_Exists>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_Exists): ControllerAPI_Exists {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_Exists, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.Exists
 */
export const ControllerAPI_Exists = new ControllerAPI_Exists$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_Exists_Request$Type extends MessageType<ControllerAPI_Exists_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.Exists.Request", [
            { no: 1, name: "controller_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ControllerAPI_Exists_Request>): ControllerAPI_Exists_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.controllerType = "";
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_Exists_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_Exists_Request): ControllerAPI_Exists_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string controller_type */ 1:
                    message.controllerType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_Exists_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string controller_type = 1; */
        if (message.controllerType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.controllerType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.Exists.Request
 */
export const ControllerAPI_Exists_Request = new ControllerAPI_Exists_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_Exists_Response$Type extends MessageType<ControllerAPI_Exists_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.Exists.Response", [
            { no: 1, name: "exists", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ControllerAPI_Exists_Response>): ControllerAPI_Exists_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.exists = false;
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_Exists_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_Exists_Response): ControllerAPI_Exists_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool exists */ 1:
                    message.exists = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_Exists_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool exists = 1; */
        if (message.exists !== false)
            writer.tag(1, WireType.Varint).bool(message.exists);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.Exists.Response
 */
export const ControllerAPI_Exists_Response = new ControllerAPI_Exists_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_Update$Type extends MessageType<ControllerAPI_Update> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.Update", []);
    }
    create(value?: PartialMessage<ControllerAPI_Update>): ControllerAPI_Update {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_Update>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_Update): ControllerAPI_Update {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_Update, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.Update
 */
export const ControllerAPI_Update = new ControllerAPI_Update$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_Update_Request$Type extends MessageType<ControllerAPI_Update_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.Update.Request", [
            { no: 1, name: "controller_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "filters", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => NotificationFilter } },
            { no: 3, name: "resource_schemas", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ResourceSchema }
        ]);
    }
    create(value?: PartialMessage<ControllerAPI_Update_Request>): ControllerAPI_Update_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.controllerType = "";
        message.filters = {};
        message.resourceSchemas = [];
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_Update_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_Update_Request): ControllerAPI_Update_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string controller_type */ 1:
                    message.controllerType = reader.string();
                    break;
                case /* map<string, MiLaboratories.PL.RTypes.NotificationFilter> filters */ 2:
                    this.binaryReadMap2(message.filters, reader, options);
                    break;
                case /* repeated MiLaboratories.PL.API.ResourceSchema resource_schemas */ 3:
                    message.resourceSchemas.push(ResourceSchema.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: ControllerAPI_Update_Request["filters"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ControllerAPI_Update_Request["filters"] | undefined, val: ControllerAPI_Update_Request["filters"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = NotificationFilter.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for MiLaboratories.PL.API.ControllerAPI.Update.Request.filters");
            }
        }
        map[key ?? ""] = val ?? NotificationFilter.create();
    }
    internalBinaryWrite(message: ControllerAPI_Update_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string controller_type = 1; */
        if (message.controllerType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.controllerType);
        /* map<string, MiLaboratories.PL.RTypes.NotificationFilter> filters = 2; */
        for (let k of globalThis.Object.keys(message.filters)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            NotificationFilter.internalBinaryWrite(message.filters[k], writer, options);
            writer.join().join();
        }
        /* repeated MiLaboratories.PL.API.ResourceSchema resource_schemas = 3; */
        for (let i = 0; i < message.resourceSchemas.length; i++)
            ResourceSchema.internalBinaryWrite(message.resourceSchemas[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.Update.Request
 */
export const ControllerAPI_Update_Request = new ControllerAPI_Update_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_Update_Response$Type extends MessageType<ControllerAPI_Update_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.Update.Response", []);
    }
    create(value?: PartialMessage<ControllerAPI_Update_Response>): ControllerAPI_Update_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_Update_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_Update_Response): ControllerAPI_Update_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_Update_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.Update.Response
 */
export const ControllerAPI_Update_Response = new ControllerAPI_Update_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_Deregister$Type extends MessageType<ControllerAPI_Deregister> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.Deregister", []);
    }
    create(value?: PartialMessage<ControllerAPI_Deregister>): ControllerAPI_Deregister {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_Deregister>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_Deregister): ControllerAPI_Deregister {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_Deregister, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.Deregister
 */
export const ControllerAPI_Deregister = new ControllerAPI_Deregister$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_Deregister_Request$Type extends MessageType<ControllerAPI_Deregister_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.Deregister.Request", [
            { no: 1, name: "controller_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ControllerAPI_Deregister_Request>): ControllerAPI_Deregister_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.controllerType = "";
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_Deregister_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_Deregister_Request): ControllerAPI_Deregister_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string controller_type */ 1:
                    message.controllerType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_Deregister_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string controller_type = 1; */
        if (message.controllerType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.controllerType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.Deregister.Request
 */
export const ControllerAPI_Deregister_Request = new ControllerAPI_Deregister_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_Deregister_Response$Type extends MessageType<ControllerAPI_Deregister_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.Deregister.Response", []);
    }
    create(value?: PartialMessage<ControllerAPI_Deregister_Response>): ControllerAPI_Deregister_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_Deregister_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_Deregister_Response): ControllerAPI_Deregister_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_Deregister_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.Deregister.Response
 */
export const ControllerAPI_Deregister_Response = new ControllerAPI_Deregister_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_Create$Type extends MessageType<ControllerAPI_Create> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.Create", []);
    }
    create(value?: PartialMessage<ControllerAPI_Create>): ControllerAPI_Create {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_Create>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_Create): ControllerAPI_Create {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_Create, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.Create
 */
export const ControllerAPI_Create = new ControllerAPI_Create$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_Create_Request$Type extends MessageType<ControllerAPI_Create_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.Create.Request", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "controller_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ControllerAPI_Create_Request>): ControllerAPI_Create_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.controllerType = "";
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_Create_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_Create_Request): ControllerAPI_Create_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string controller_type */ 2:
                    message.controllerType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_Create_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string controller_type = 2; */
        if (message.controllerType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.controllerType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.Create.Request
 */
export const ControllerAPI_Create_Request = new ControllerAPI_Create_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_Create_Response$Type extends MessageType<ControllerAPI_Create_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.Create.Response", [
            { no: 1, name: "controller_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ControllerAPI_Create_Response>): ControllerAPI_Create_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.controllerId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_Create_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_Create_Response): ControllerAPI_Create_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 controller_id */ 1:
                    message.controllerId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_Create_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 controller_id = 1; */
        if (message.controllerId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.controllerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.Create.Response
 */
export const ControllerAPI_Create_Response = new ControllerAPI_Create_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_Get$Type extends MessageType<ControllerAPI_Get> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.Get", []);
    }
    create(value?: PartialMessage<ControllerAPI_Get>): ControllerAPI_Get {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_Get>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_Get): ControllerAPI_Get {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_Get, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.Get
 */
export const ControllerAPI_Get = new ControllerAPI_Get$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_Get_Request$Type extends MessageType<ControllerAPI_Get_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.Get.Request", [
            { no: 1, name: "controller_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ControllerAPI_Get_Request>): ControllerAPI_Get_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.controllerType = "";
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_Get_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_Get_Request): ControllerAPI_Get_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string controller_type */ 1:
                    message.controllerType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_Get_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string controller_type = 1; */
        if (message.controllerType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.controllerType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.Get.Request
 */
export const ControllerAPI_Get_Request = new ControllerAPI_Get_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_Get_Response$Type extends MessageType<ControllerAPI_Get_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.Get.Response", [
            { no: 1, name: "controller", kind: "message", T: () => Controller }
        ]);
    }
    create(value?: PartialMessage<ControllerAPI_Get_Response>): ControllerAPI_Get_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_Get_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_Get_Response): ControllerAPI_Get_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.PL.API.Controller controller */ 1:
                    message.controller = Controller.internalBinaryRead(reader, reader.uint32(), options, message.controller);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_Get_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.PL.API.Controller controller = 1; */
        if (message.controller)
            Controller.internalBinaryWrite(message.controller, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.Get.Response
 */
export const ControllerAPI_Get_Response = new ControllerAPI_Get_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_AttachSubscription$Type extends MessageType<ControllerAPI_AttachSubscription> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.AttachSubscription", []);
    }
    create(value?: PartialMessage<ControllerAPI_AttachSubscription>): ControllerAPI_AttachSubscription {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_AttachSubscription>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_AttachSubscription): ControllerAPI_AttachSubscription {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_AttachSubscription, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.AttachSubscription
 */
export const ControllerAPI_AttachSubscription = new ControllerAPI_AttachSubscription$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_AttachSubscription_Request$Type extends MessageType<ControllerAPI_AttachSubscription_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.AttachSubscription.Request", [
            { no: 1, name: "controller_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "subscription_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ControllerAPI_AttachSubscription_Request>): ControllerAPI_AttachSubscription_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.controllerId = 0n;
        message.subscriptionId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_AttachSubscription_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_AttachSubscription_Request): ControllerAPI_AttachSubscription_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 controller_id */ 1:
                    message.controllerId = reader.uint64().toBigInt();
                    break;
                case /* uint64 subscription_id */ 2:
                    message.subscriptionId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_AttachSubscription_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 controller_id = 1; */
        if (message.controllerId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.controllerId);
        /* uint64 subscription_id = 2; */
        if (message.subscriptionId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.subscriptionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.AttachSubscription.Request
 */
export const ControllerAPI_AttachSubscription_Request = new ControllerAPI_AttachSubscription_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_AttachSubscription_Response$Type extends MessageType<ControllerAPI_AttachSubscription_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.AttachSubscription.Response", []);
    }
    create(value?: PartialMessage<ControllerAPI_AttachSubscription_Response>): ControllerAPI_AttachSubscription_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_AttachSubscription_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_AttachSubscription_Response): ControllerAPI_AttachSubscription_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_AttachSubscription_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.AttachSubscription.Response
 */
export const ControllerAPI_AttachSubscription_Response = new ControllerAPI_AttachSubscription_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_GetNotifications$Type extends MessageType<ControllerAPI_GetNotifications> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.GetNotifications", []);
    }
    create(value?: PartialMessage<ControllerAPI_GetNotifications>): ControllerAPI_GetNotifications {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_GetNotifications>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_GetNotifications): ControllerAPI_GetNotifications {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_GetNotifications, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.GetNotifications
 */
export const ControllerAPI_GetNotifications = new ControllerAPI_GetNotifications$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_GetNotifications_Request$Type extends MessageType<ControllerAPI_GetNotifications_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.GetNotifications.Request", [
            { no: 1, name: "controller_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "max_notifications", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ControllerAPI_GetNotifications_Request>): ControllerAPI_GetNotifications_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.controllerType = "";
        message.maxNotifications = 0;
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_GetNotifications_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_GetNotifications_Request): ControllerAPI_GetNotifications_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string controller_type */ 1:
                    message.controllerType = reader.string();
                    break;
                case /* uint32 max_notifications */ 2:
                    message.maxNotifications = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_GetNotifications_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string controller_type = 1; */
        if (message.controllerType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.controllerType);
        /* uint32 max_notifications = 2; */
        if (message.maxNotifications !== 0)
            writer.tag(2, WireType.Varint).uint32(message.maxNotifications);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.GetNotifications.Request
 */
export const ControllerAPI_GetNotifications_Request = new ControllerAPI_GetNotifications_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_GetNotifications_Response$Type extends MessageType<ControllerAPI_GetNotifications_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.GetNotifications.Response", [
            { no: 1, name: "notifications", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Notification }
        ]);
    }
    create(value?: PartialMessage<ControllerAPI_GetNotifications_Response>): ControllerAPI_GetNotifications_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.notifications = [];
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_GetNotifications_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_GetNotifications_Response): ControllerAPI_GetNotifications_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated MiLaboratories.PL.API.Notification notifications */ 1:
                    message.notifications.push(Notification.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_GetNotifications_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated MiLaboratories.PL.API.Notification notifications = 1; */
        for (let i = 0; i < message.notifications.length; i++)
            Notification.internalBinaryWrite(message.notifications[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.GetNotifications.Response
 */
export const ControllerAPI_GetNotifications_Response = new ControllerAPI_GetNotifications_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_WriteAliasesAndUrls$Type extends MessageType<ControllerAPI_WriteAliasesAndUrls> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.WriteAliasesAndUrls", []);
    }
    create(value?: PartialMessage<ControllerAPI_WriteAliasesAndUrls>): ControllerAPI_WriteAliasesAndUrls {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_WriteAliasesAndUrls>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_WriteAliasesAndUrls): ControllerAPI_WriteAliasesAndUrls {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_WriteAliasesAndUrls, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.WriteAliasesAndUrls
 */
export const ControllerAPI_WriteAliasesAndUrls = new ControllerAPI_WriteAliasesAndUrls$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_WriteAliasesAndUrls_Request$Type extends MessageType<ControllerAPI_WriteAliasesAndUrls_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.WriteAliasesAndUrls.Request", [
            { no: 1, name: "controller_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "aliases_to_urls", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<ControllerAPI_WriteAliasesAndUrls_Request>): ControllerAPI_WriteAliasesAndUrls_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.controllerType = "";
        message.aliasesToUrls = {};
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_WriteAliasesAndUrls_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_WriteAliasesAndUrls_Request): ControllerAPI_WriteAliasesAndUrls_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string controller_type */ 1:
                    message.controllerType = reader.string();
                    break;
                case /* map<string, string> aliases_to_urls */ 2:
                    this.binaryReadMap2(message.aliasesToUrls, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: ControllerAPI_WriteAliasesAndUrls_Request["aliasesToUrls"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ControllerAPI_WriteAliasesAndUrls_Request["aliasesToUrls"] | undefined, val: ControllerAPI_WriteAliasesAndUrls_Request["aliasesToUrls"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for MiLaboratories.PL.API.ControllerAPI.WriteAliasesAndUrls.Request.aliases_to_urls");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: ControllerAPI_WriteAliasesAndUrls_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string controller_type = 1; */
        if (message.controllerType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.controllerType);
        /* map<string, string> aliases_to_urls = 2; */
        for (let k of globalThis.Object.keys(message.aliasesToUrls))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.aliasesToUrls[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.WriteAliasesAndUrls.Request
 */
export const ControllerAPI_WriteAliasesAndUrls_Request = new ControllerAPI_WriteAliasesAndUrls_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_WriteAliasesAndUrls_Response$Type extends MessageType<ControllerAPI_WriteAliasesAndUrls_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.WriteAliasesAndUrls.Response", []);
    }
    create(value?: PartialMessage<ControllerAPI_WriteAliasesAndUrls_Response>): ControllerAPI_WriteAliasesAndUrls_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_WriteAliasesAndUrls_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_WriteAliasesAndUrls_Response): ControllerAPI_WriteAliasesAndUrls_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_WriteAliasesAndUrls_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.WriteAliasesAndUrls.Response
 */
export const ControllerAPI_WriteAliasesAndUrls_Response = new ControllerAPI_WriteAliasesAndUrls_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_GetUrl$Type extends MessageType<ControllerAPI_GetUrl> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.GetUrl", []);
    }
    create(value?: PartialMessage<ControllerAPI_GetUrl>): ControllerAPI_GetUrl {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_GetUrl>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_GetUrl): ControllerAPI_GetUrl {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_GetUrl, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.GetUrl
 */
export const ControllerAPI_GetUrl = new ControllerAPI_GetUrl$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_GetUrl_Request$Type extends MessageType<ControllerAPI_GetUrl_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.GetUrl.Request", [
            { no: 1, name: "controller_alias", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ControllerAPI_GetUrl_Request>): ControllerAPI_GetUrl_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.controllerAlias = "";
        message.resourceId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_GetUrl_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_GetUrl_Request): ControllerAPI_GetUrl_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string controller_alias */ 1:
                    message.controllerAlias = reader.string();
                    break;
                case /* uint64 resource_id */ 2:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_GetUrl_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string controller_alias = 1; */
        if (message.controllerAlias !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.controllerAlias);
        /* uint64 resource_id = 2; */
        if (message.resourceId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.resourceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.GetUrl.Request
 */
export const ControllerAPI_GetUrl_Request = new ControllerAPI_GetUrl_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_GetUrl_Response$Type extends MessageType<ControllerAPI_GetUrl_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.GetUrl.Response", [
            { no: 2, name: "controller_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ControllerAPI_GetUrl_Response>): ControllerAPI_GetUrl_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.controllerUrl = "";
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_GetUrl_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_GetUrl_Response): ControllerAPI_GetUrl_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string controller_url */ 2:
                    message.controllerUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_GetUrl_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string controller_url = 2; */
        if (message.controllerUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.controllerUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.GetUrl.Response
 */
export const ControllerAPI_GetUrl_Response = new ControllerAPI_GetUrl_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_RemoveAliasesAndUrls$Type extends MessageType<ControllerAPI_RemoveAliasesAndUrls> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.RemoveAliasesAndUrls", []);
    }
    create(value?: PartialMessage<ControllerAPI_RemoveAliasesAndUrls>): ControllerAPI_RemoveAliasesAndUrls {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_RemoveAliasesAndUrls>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_RemoveAliasesAndUrls): ControllerAPI_RemoveAliasesAndUrls {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_RemoveAliasesAndUrls, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.RemoveAliasesAndUrls
 */
export const ControllerAPI_RemoveAliasesAndUrls = new ControllerAPI_RemoveAliasesAndUrls$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_RemoveAliasesAndUrls_Request$Type extends MessageType<ControllerAPI_RemoveAliasesAndUrls_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.RemoveAliasesAndUrls.Request", [
            { no: 1, name: "controller_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ControllerAPI_RemoveAliasesAndUrls_Request>): ControllerAPI_RemoveAliasesAndUrls_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.controllerType = "";
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_RemoveAliasesAndUrls_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_RemoveAliasesAndUrls_Request): ControllerAPI_RemoveAliasesAndUrls_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string controller_type */ 1:
                    message.controllerType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_RemoveAliasesAndUrls_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string controller_type = 1; */
        if (message.controllerType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.controllerType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.RemoveAliasesAndUrls.Request
 */
export const ControllerAPI_RemoveAliasesAndUrls_Request = new ControllerAPI_RemoveAliasesAndUrls_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_RemoveAliasesAndUrls_Response$Type extends MessageType<ControllerAPI_RemoveAliasesAndUrls_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.RemoveAliasesAndUrls.Response", []);
    }
    create(value?: PartialMessage<ControllerAPI_RemoveAliasesAndUrls_Response>): ControllerAPI_RemoveAliasesAndUrls_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_RemoveAliasesAndUrls_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_RemoveAliasesAndUrls_Response): ControllerAPI_RemoveAliasesAndUrls_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_RemoveAliasesAndUrls_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.RemoveAliasesAndUrls.Response
 */
export const ControllerAPI_RemoveAliasesAndUrls_Response = new ControllerAPI_RemoveAliasesAndUrls_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_SetFeatures$Type extends MessageType<ControllerAPI_SetFeatures> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.SetFeatures", []);
    }
    create(value?: PartialMessage<ControllerAPI_SetFeatures>): ControllerAPI_SetFeatures {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_SetFeatures>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_SetFeatures): ControllerAPI_SetFeatures {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_SetFeatures, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.SetFeatures
 */
export const ControllerAPI_SetFeatures = new ControllerAPI_SetFeatures$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_SetFeatures_Request$Type extends MessageType<ControllerAPI_SetFeatures_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.SetFeatures.Request", [
            { no: 2, name: "features", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ResourceAPIFeature }
        ]);
    }
    create(value?: PartialMessage<ControllerAPI_SetFeatures_Request>): ControllerAPI_SetFeatures_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.features = [];
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_SetFeatures_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_SetFeatures_Request): ControllerAPI_SetFeatures_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated MiLaboratories.PL.API.ResourceAPIFeature features */ 2:
                    message.features.push(ResourceAPIFeature.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_SetFeatures_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated MiLaboratories.PL.API.ResourceAPIFeature features = 2; */
        for (let i = 0; i < message.features.length; i++)
            ResourceAPIFeature.internalBinaryWrite(message.features[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.SetFeatures.Request
 */
export const ControllerAPI_SetFeatures_Request = new ControllerAPI_SetFeatures_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_SetFeatures_Response$Type extends MessageType<ControllerAPI_SetFeatures_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.SetFeatures.Response", []);
    }
    create(value?: PartialMessage<ControllerAPI_SetFeatures_Response>): ControllerAPI_SetFeatures_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_SetFeatures_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_SetFeatures_Response): ControllerAPI_SetFeatures_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_SetFeatures_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.SetFeatures.Response
 */
export const ControllerAPI_SetFeatures_Response = new ControllerAPI_SetFeatures_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_ClearFeatures$Type extends MessageType<ControllerAPI_ClearFeatures> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.ClearFeatures", []);
    }
    create(value?: PartialMessage<ControllerAPI_ClearFeatures>): ControllerAPI_ClearFeatures {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_ClearFeatures>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_ClearFeatures): ControllerAPI_ClearFeatures {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_ClearFeatures, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.ClearFeatures
 */
export const ControllerAPI_ClearFeatures = new ControllerAPI_ClearFeatures$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_ClearFeatures_Request$Type extends MessageType<ControllerAPI_ClearFeatures_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.ClearFeatures.Request", [
            { no: 1, name: "controller_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ControllerAPI_ClearFeatures_Request>): ControllerAPI_ClearFeatures_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.controllerType = "";
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_ClearFeatures_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_ClearFeatures_Request): ControllerAPI_ClearFeatures_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string controller_type */ 1:
                    message.controllerType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_ClearFeatures_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string controller_type = 1; */
        if (message.controllerType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.controllerType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.ClearFeatures.Request
 */
export const ControllerAPI_ClearFeatures_Request = new ControllerAPI_ClearFeatures_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerAPI_ClearFeatures_Response$Type extends MessageType<ControllerAPI_ClearFeatures_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerAPI.ClearFeatures.Response", []);
    }
    create(value?: PartialMessage<ControllerAPI_ClearFeatures_Response>): ControllerAPI_ClearFeatures_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerAPI_ClearFeatures_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerAPI_ClearFeatures_Response): ControllerAPI_ClearFeatures_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerAPI_ClearFeatures_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerAPI.ClearFeatures.Response
 */
export const ControllerAPI_ClearFeatures_Response = new ControllerAPI_ClearFeatures_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceKVAPI$Type extends MessageType<ResourceKVAPI> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceKVAPI", []);
    }
    create(value?: PartialMessage<ResourceKVAPI>): ResourceKVAPI {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceKVAPI>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceKVAPI): ResourceKVAPI {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceKVAPI, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceKVAPI
 */
export const ResourceKVAPI = new ResourceKVAPI$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceKVAPI_List$Type extends MessageType<ResourceKVAPI_List> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceKVAPI.List", []);
    }
    create(value?: PartialMessage<ResourceKVAPI_List>): ResourceKVAPI_List {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceKVAPI_List>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceKVAPI_List): ResourceKVAPI_List {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceKVAPI_List, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceKVAPI.List
 */
export const ResourceKVAPI_List = new ResourceKVAPI_List$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceKVAPI_List_Request$Type extends MessageType<ResourceKVAPI_List_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceKVAPI.List.Request", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "start_from", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "limit", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceKVAPI_List_Request>): ResourceKVAPI_List_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        message.startFrom = "";
        message.limit = 0;
        if (value !== undefined)
            reflectionMergePartial<ResourceKVAPI_List_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceKVAPI_List_Request): ResourceKVAPI_List_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                case /* string start_from */ 2:
                    message.startFrom = reader.string();
                    break;
                case /* uint32 limit */ 3:
                    message.limit = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceKVAPI_List_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        /* string start_from = 2; */
        if (message.startFrom !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.startFrom);
        /* uint32 limit = 3; */
        if (message.limit !== 0)
            writer.tag(3, WireType.Varint).uint32(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceKVAPI.List.Request
 */
export const ResourceKVAPI_List_Request = new ResourceKVAPI_List_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceKVAPI_List_Response$Type extends MessageType<ResourceKVAPI_List_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceKVAPI.List.Response", [
            { no: 1, name: "record", kind: "message", T: () => ResourceKVAPI_List_Response_KV },
            { no: 4, name: "next", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceKVAPI_List_Response>): ResourceKVAPI_List_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.next = "";
        if (value !== undefined)
            reflectionMergePartial<ResourceKVAPI_List_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceKVAPI_List_Response): ResourceKVAPI_List_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.PL.API.ResourceKVAPI.List.Response.KV record */ 1:
                    message.record = ResourceKVAPI_List_Response_KV.internalBinaryRead(reader, reader.uint32(), options, message.record);
                    break;
                case /* string next */ 4:
                    message.next = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceKVAPI_List_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.PL.API.ResourceKVAPI.List.Response.KV record = 1; */
        if (message.record)
            ResourceKVAPI_List_Response_KV.internalBinaryWrite(message.record, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string next = 4; */
        if (message.next !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.next);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceKVAPI.List.Response
 */
export const ResourceKVAPI_List_Response = new ResourceKVAPI_List_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceKVAPI_List_Response_KV$Type extends MessageType<ResourceKVAPI_List_Response_KV> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceKVAPI.List.Response.KV", [
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceKVAPI_List_Response_KV>): ResourceKVAPI_List_Response_KV {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = "";
        message.value = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<ResourceKVAPI_List_Response_KV>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceKVAPI_List_Response_KV): ResourceKVAPI_List_Response_KV {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                case /* bytes value */ 3:
                    message.value = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceKVAPI_List_Response_KV, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        /* bytes value = 3; */
        if (message.value.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceKVAPI.List.Response.KV
 */
export const ResourceKVAPI_List_Response_KV = new ResourceKVAPI_List_Response_KV$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceKVAPI_Set$Type extends MessageType<ResourceKVAPI_Set> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceKVAPI.Set", []);
    }
    create(value?: PartialMessage<ResourceKVAPI_Set>): ResourceKVAPI_Set {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceKVAPI_Set>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceKVAPI_Set): ResourceKVAPI_Set {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceKVAPI_Set, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceKVAPI.Set
 */
export const ResourceKVAPI_Set = new ResourceKVAPI_Set$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceKVAPI_Set_Request$Type extends MessageType<ResourceKVAPI_Set_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceKVAPI.Set.Request", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceKVAPI_Set_Request>): ResourceKVAPI_Set_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        message.key = "";
        message.value = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<ResourceKVAPI_Set_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceKVAPI_Set_Request): ResourceKVAPI_Set_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                case /* bytes value */ 3:
                    message.value = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceKVAPI_Set_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        /* bytes value = 3; */
        if (message.value.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceKVAPI.Set.Request
 */
export const ResourceKVAPI_Set_Request = new ResourceKVAPI_Set_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceKVAPI_Set_Response$Type extends MessageType<ResourceKVAPI_Set_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceKVAPI.Set.Response", []);
    }
    create(value?: PartialMessage<ResourceKVAPI_Set_Response>): ResourceKVAPI_Set_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceKVAPI_Set_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceKVAPI_Set_Response): ResourceKVAPI_Set_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceKVAPI_Set_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceKVAPI.Set.Response
 */
export const ResourceKVAPI_Set_Response = new ResourceKVAPI_Set_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceKVAPI_Get$Type extends MessageType<ResourceKVAPI_Get> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceKVAPI.Get", []);
    }
    create(value?: PartialMessage<ResourceKVAPI_Get>): ResourceKVAPI_Get {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceKVAPI_Get>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceKVAPI_Get): ResourceKVAPI_Get {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceKVAPI_Get, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceKVAPI.Get
 */
export const ResourceKVAPI_Get = new ResourceKVAPI_Get$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceKVAPI_Get_Request$Type extends MessageType<ResourceKVAPI_Get_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceKVAPI.Get.Request", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceKVAPI_Get_Request>): ResourceKVAPI_Get_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        message.key = "";
        if (value !== undefined)
            reflectionMergePartial<ResourceKVAPI_Get_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceKVAPI_Get_Request): ResourceKVAPI_Get_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceKVAPI_Get_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceKVAPI.Get.Request
 */
export const ResourceKVAPI_Get_Request = new ResourceKVAPI_Get_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceKVAPI_Get_Response$Type extends MessageType<ResourceKVAPI_Get_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceKVAPI.Get.Response", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceKVAPI_Get_Response>): ResourceKVAPI_Get_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<ResourceKVAPI_Get_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceKVAPI_Get_Response): ResourceKVAPI_Get_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes value */ 1:
                    message.value = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceKVAPI_Get_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes value = 1; */
        if (message.value.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceKVAPI.Get.Response
 */
export const ResourceKVAPI_Get_Response = new ResourceKVAPI_Get_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceKVAPI_GetIfExists$Type extends MessageType<ResourceKVAPI_GetIfExists> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceKVAPI.GetIfExists", []);
    }
    create(value?: PartialMessage<ResourceKVAPI_GetIfExists>): ResourceKVAPI_GetIfExists {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceKVAPI_GetIfExists>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceKVAPI_GetIfExists): ResourceKVAPI_GetIfExists {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceKVAPI_GetIfExists, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceKVAPI.GetIfExists
 */
export const ResourceKVAPI_GetIfExists = new ResourceKVAPI_GetIfExists$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceKVAPI_GetIfExists_Request$Type extends MessageType<ResourceKVAPI_GetIfExists_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceKVAPI.GetIfExists.Request", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceKVAPI_GetIfExists_Request>): ResourceKVAPI_GetIfExists_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        message.key = "";
        if (value !== undefined)
            reflectionMergePartial<ResourceKVAPI_GetIfExists_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceKVAPI_GetIfExists_Request): ResourceKVAPI_GetIfExists_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceKVAPI_GetIfExists_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceKVAPI.GetIfExists.Request
 */
export const ResourceKVAPI_GetIfExists_Request = new ResourceKVAPI_GetIfExists_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceKVAPI_GetIfExists_Response$Type extends MessageType<ResourceKVAPI_GetIfExists_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceKVAPI.GetIfExists.Response", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "exists", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceKVAPI_GetIfExists_Response>): ResourceKVAPI_GetIfExists_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = new Uint8Array(0);
        message.exists = false;
        if (value !== undefined)
            reflectionMergePartial<ResourceKVAPI_GetIfExists_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceKVAPI_GetIfExists_Response): ResourceKVAPI_GetIfExists_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes value */ 1:
                    message.value = reader.bytes();
                    break;
                case /* bool exists */ 2:
                    message.exists = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceKVAPI_GetIfExists_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes value = 1; */
        if (message.value.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.value);
        /* bool exists = 2; */
        if (message.exists !== false)
            writer.tag(2, WireType.Varint).bool(message.exists);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceKVAPI.GetIfExists.Response
 */
export const ResourceKVAPI_GetIfExists_Response = new ResourceKVAPI_GetIfExists_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceKVAPI_Delete$Type extends MessageType<ResourceKVAPI_Delete> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceKVAPI.Delete", []);
    }
    create(value?: PartialMessage<ResourceKVAPI_Delete>): ResourceKVAPI_Delete {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceKVAPI_Delete>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceKVAPI_Delete): ResourceKVAPI_Delete {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceKVAPI_Delete, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceKVAPI.Delete
 */
export const ResourceKVAPI_Delete = new ResourceKVAPI_Delete$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceKVAPI_Delete_Request$Type extends MessageType<ResourceKVAPI_Delete_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceKVAPI.Delete.Request", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceKVAPI_Delete_Request>): ResourceKVAPI_Delete_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        message.key = "";
        if (value !== undefined)
            reflectionMergePartial<ResourceKVAPI_Delete_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceKVAPI_Delete_Request): ResourceKVAPI_Delete_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceKVAPI_Delete_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceKVAPI.Delete.Request
 */
export const ResourceKVAPI_Delete_Request = new ResourceKVAPI_Delete_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceKVAPI_Delete_Response$Type extends MessageType<ResourceKVAPI_Delete_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceKVAPI.Delete.Response", []);
    }
    create(value?: PartialMessage<ResourceKVAPI_Delete_Response>): ResourceKVAPI_Delete_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceKVAPI_Delete_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceKVAPI_Delete_Response): ResourceKVAPI_Delete_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceKVAPI_Delete_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceKVAPI.Delete.Response
 */
export const ResourceKVAPI_Delete_Response = new ResourceKVAPI_Delete_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceKVAPI_SetFlag$Type extends MessageType<ResourceKVAPI_SetFlag> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceKVAPI.SetFlag", []);
    }
    create(value?: PartialMessage<ResourceKVAPI_SetFlag>): ResourceKVAPI_SetFlag {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceKVAPI_SetFlag>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceKVAPI_SetFlag): ResourceKVAPI_SetFlag {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceKVAPI_SetFlag, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceKVAPI.SetFlag
 */
export const ResourceKVAPI_SetFlag = new ResourceKVAPI_SetFlag$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceKVAPI_SetFlag_Request$Type extends MessageType<ResourceKVAPI_SetFlag_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceKVAPI.SetFlag.Request", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceKVAPI_SetFlag_Request>): ResourceKVAPI_SetFlag_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        message.key = "";
        message.value = false;
        if (value !== undefined)
            reflectionMergePartial<ResourceKVAPI_SetFlag_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceKVAPI_SetFlag_Request): ResourceKVAPI_SetFlag_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                case /* bool value */ 3:
                    message.value = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceKVAPI_SetFlag_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        /* bool value = 3; */
        if (message.value !== false)
            writer.tag(3, WireType.Varint).bool(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceKVAPI.SetFlag.Request
 */
export const ResourceKVAPI_SetFlag_Request = new ResourceKVAPI_SetFlag_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceKVAPI_SetFlag_Response$Type extends MessageType<ResourceKVAPI_SetFlag_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceKVAPI.SetFlag.Response", []);
    }
    create(value?: PartialMessage<ResourceKVAPI_SetFlag_Response>): ResourceKVAPI_SetFlag_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceKVAPI_SetFlag_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceKVAPI_SetFlag_Response): ResourceKVAPI_SetFlag_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceKVAPI_SetFlag_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceKVAPI.SetFlag.Response
 */
export const ResourceKVAPI_SetFlag_Response = new ResourceKVAPI_SetFlag_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceKVAPI_GetFlag$Type extends MessageType<ResourceKVAPI_GetFlag> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceKVAPI.GetFlag", []);
    }
    create(value?: PartialMessage<ResourceKVAPI_GetFlag>): ResourceKVAPI_GetFlag {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResourceKVAPI_GetFlag>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceKVAPI_GetFlag): ResourceKVAPI_GetFlag {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceKVAPI_GetFlag, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceKVAPI.GetFlag
 */
export const ResourceKVAPI_GetFlag = new ResourceKVAPI_GetFlag$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceKVAPI_GetFlag_Request$Type extends MessageType<ResourceKVAPI_GetFlag_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceKVAPI.GetFlag.Request", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceKVAPI_GetFlag_Request>): ResourceKVAPI_GetFlag_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        message.key = "";
        if (value !== undefined)
            reflectionMergePartial<ResourceKVAPI_GetFlag_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceKVAPI_GetFlag_Request): ResourceKVAPI_GetFlag_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceKVAPI_GetFlag_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceKVAPI.GetFlag.Request
 */
export const ResourceKVAPI_GetFlag_Request = new ResourceKVAPI_GetFlag_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResourceKVAPI_GetFlag_Response$Type extends MessageType<ResourceKVAPI_GetFlag_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ResourceKVAPI.GetFlag.Response", [
            { no: 1, name: "value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ResourceKVAPI_GetFlag_Response>): ResourceKVAPI_GetFlag_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = false;
        if (value !== undefined)
            reflectionMergePartial<ResourceKVAPI_GetFlag_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceKVAPI_GetFlag_Response): ResourceKVAPI_GetFlag_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool value */ 1:
                    message.value = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResourceKVAPI_GetFlag_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool value = 1; */
        if (message.value !== false)
            writer.tag(1, WireType.Varint).bool(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ResourceKVAPI.GetFlag.Response
 */
export const ResourceKVAPI_GetFlag_Response = new ResourceKVAPI_GetFlag_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerKVAPI$Type extends MessageType<ControllerKVAPI> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerKVAPI", []);
    }
    create(value?: PartialMessage<ControllerKVAPI>): ControllerKVAPI {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerKVAPI>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerKVAPI): ControllerKVAPI {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerKVAPI, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerKVAPI
 */
export const ControllerKVAPI = new ControllerKVAPI$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerKVAPI_Set$Type extends MessageType<ControllerKVAPI_Set> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerKVAPI.Set", []);
    }
    create(value?: PartialMessage<ControllerKVAPI_Set>): ControllerKVAPI_Set {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerKVAPI_Set>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerKVAPI_Set): ControllerKVAPI_Set {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerKVAPI_Set, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerKVAPI.Set
 */
export const ControllerKVAPI_Set = new ControllerKVAPI_Set$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerKVAPI_Set_Request$Type extends MessageType<ControllerKVAPI_Set_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerKVAPI.Set.Request", [
            { no: 1, name: "controller_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ControllerKVAPI_Set_Request>): ControllerKVAPI_Set_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.controllerType = "";
        message.key = "";
        message.value = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<ControllerKVAPI_Set_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerKVAPI_Set_Request): ControllerKVAPI_Set_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string controller_type */ 1:
                    message.controllerType = reader.string();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                case /* bytes value */ 3:
                    message.value = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerKVAPI_Set_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string controller_type = 1; */
        if (message.controllerType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.controllerType);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        /* bytes value = 3; */
        if (message.value.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerKVAPI.Set.Request
 */
export const ControllerKVAPI_Set_Request = new ControllerKVAPI_Set_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerKVAPI_Set_Response$Type extends MessageType<ControllerKVAPI_Set_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerKVAPI.Set.Response", []);
    }
    create(value?: PartialMessage<ControllerKVAPI_Set_Response>): ControllerKVAPI_Set_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerKVAPI_Set_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerKVAPI_Set_Response): ControllerKVAPI_Set_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerKVAPI_Set_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerKVAPI.Set.Response
 */
export const ControllerKVAPI_Set_Response = new ControllerKVAPI_Set_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerKVAPI_Get$Type extends MessageType<ControllerKVAPI_Get> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerKVAPI.Get", []);
    }
    create(value?: PartialMessage<ControllerKVAPI_Get>): ControllerKVAPI_Get {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerKVAPI_Get>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerKVAPI_Get): ControllerKVAPI_Get {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerKVAPI_Get, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerKVAPI.Get
 */
export const ControllerKVAPI_Get = new ControllerKVAPI_Get$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerKVAPI_Get_Request$Type extends MessageType<ControllerKVAPI_Get_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerKVAPI.Get.Request", [
            { no: 1, name: "controller_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ControllerKVAPI_Get_Request>): ControllerKVAPI_Get_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.controllerType = "";
        message.key = "";
        if (value !== undefined)
            reflectionMergePartial<ControllerKVAPI_Get_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerKVAPI_Get_Request): ControllerKVAPI_Get_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string controller_type */ 1:
                    message.controllerType = reader.string();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerKVAPI_Get_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string controller_type = 1; */
        if (message.controllerType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.controllerType);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerKVAPI.Get.Request
 */
export const ControllerKVAPI_Get_Request = new ControllerKVAPI_Get_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerKVAPI_Get_Response$Type extends MessageType<ControllerKVAPI_Get_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerKVAPI.Get.Response", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ControllerKVAPI_Get_Response>): ControllerKVAPI_Get_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<ControllerKVAPI_Get_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerKVAPI_Get_Response): ControllerKVAPI_Get_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes value */ 1:
                    message.value = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerKVAPI_Get_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes value = 1; */
        if (message.value.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerKVAPI.Get.Response
 */
export const ControllerKVAPI_Get_Response = new ControllerKVAPI_Get_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerKVAPI_GetIfExists$Type extends MessageType<ControllerKVAPI_GetIfExists> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerKVAPI.GetIfExists", []);
    }
    create(value?: PartialMessage<ControllerKVAPI_GetIfExists>): ControllerKVAPI_GetIfExists {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerKVAPI_GetIfExists>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerKVAPI_GetIfExists): ControllerKVAPI_GetIfExists {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerKVAPI_GetIfExists, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerKVAPI.GetIfExists
 */
export const ControllerKVAPI_GetIfExists = new ControllerKVAPI_GetIfExists$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerKVAPI_GetIfExists_Request$Type extends MessageType<ControllerKVAPI_GetIfExists_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerKVAPI.GetIfExists.Request", [
            { no: 1, name: "controller_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ControllerKVAPI_GetIfExists_Request>): ControllerKVAPI_GetIfExists_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.controllerType = "";
        message.key = "";
        if (value !== undefined)
            reflectionMergePartial<ControllerKVAPI_GetIfExists_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerKVAPI_GetIfExists_Request): ControllerKVAPI_GetIfExists_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string controller_type */ 1:
                    message.controllerType = reader.string();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerKVAPI_GetIfExists_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string controller_type = 1; */
        if (message.controllerType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.controllerType);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerKVAPI.GetIfExists.Request
 */
export const ControllerKVAPI_GetIfExists_Request = new ControllerKVAPI_GetIfExists_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerKVAPI_GetIfExists_Response$Type extends MessageType<ControllerKVAPI_GetIfExists_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerKVAPI.GetIfExists.Response", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "exists", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ControllerKVAPI_GetIfExists_Response>): ControllerKVAPI_GetIfExists_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = new Uint8Array(0);
        message.exists = false;
        if (value !== undefined)
            reflectionMergePartial<ControllerKVAPI_GetIfExists_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerKVAPI_GetIfExists_Response): ControllerKVAPI_GetIfExists_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes value */ 1:
                    message.value = reader.bytes();
                    break;
                case /* bool exists */ 2:
                    message.exists = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerKVAPI_GetIfExists_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes value = 1; */
        if (message.value.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.value);
        /* bool exists = 2; */
        if (message.exists !== false)
            writer.tag(2, WireType.Varint).bool(message.exists);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerKVAPI.GetIfExists.Response
 */
export const ControllerKVAPI_GetIfExists_Response = new ControllerKVAPI_GetIfExists_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerKVAPI_SetFlag$Type extends MessageType<ControllerKVAPI_SetFlag> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerKVAPI.SetFlag", []);
    }
    create(value?: PartialMessage<ControllerKVAPI_SetFlag>): ControllerKVAPI_SetFlag {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerKVAPI_SetFlag>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerKVAPI_SetFlag): ControllerKVAPI_SetFlag {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerKVAPI_SetFlag, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerKVAPI.SetFlag
 */
export const ControllerKVAPI_SetFlag = new ControllerKVAPI_SetFlag$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerKVAPI_SetFlag_Request$Type extends MessageType<ControllerKVAPI_SetFlag_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerKVAPI.SetFlag.Request", [
            { no: 1, name: "controller_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ControllerKVAPI_SetFlag_Request>): ControllerKVAPI_SetFlag_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.controllerType = "";
        message.key = "";
        message.value = false;
        if (value !== undefined)
            reflectionMergePartial<ControllerKVAPI_SetFlag_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerKVAPI_SetFlag_Request): ControllerKVAPI_SetFlag_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string controller_type */ 1:
                    message.controllerType = reader.string();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                case /* bool value */ 3:
                    message.value = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerKVAPI_SetFlag_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string controller_type = 1; */
        if (message.controllerType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.controllerType);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        /* bool value = 3; */
        if (message.value !== false)
            writer.tag(3, WireType.Varint).bool(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerKVAPI.SetFlag.Request
 */
export const ControllerKVAPI_SetFlag_Request = new ControllerKVAPI_SetFlag_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerKVAPI_SetFlag_Response$Type extends MessageType<ControllerKVAPI_SetFlag_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerKVAPI.SetFlag.Response", []);
    }
    create(value?: PartialMessage<ControllerKVAPI_SetFlag_Response>): ControllerKVAPI_SetFlag_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerKVAPI_SetFlag_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerKVAPI_SetFlag_Response): ControllerKVAPI_SetFlag_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerKVAPI_SetFlag_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerKVAPI.SetFlag.Response
 */
export const ControllerKVAPI_SetFlag_Response = new ControllerKVAPI_SetFlag_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerKVAPI_GetFlag$Type extends MessageType<ControllerKVAPI_GetFlag> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerKVAPI.GetFlag", []);
    }
    create(value?: PartialMessage<ControllerKVAPI_GetFlag>): ControllerKVAPI_GetFlag {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerKVAPI_GetFlag>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerKVAPI_GetFlag): ControllerKVAPI_GetFlag {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerKVAPI_GetFlag, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerKVAPI.GetFlag
 */
export const ControllerKVAPI_GetFlag = new ControllerKVAPI_GetFlag$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerKVAPI_GetFlag_Request$Type extends MessageType<ControllerKVAPI_GetFlag_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerKVAPI.GetFlag.Request", [
            { no: 1, name: "controller_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ControllerKVAPI_GetFlag_Request>): ControllerKVAPI_GetFlag_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.controllerType = "";
        message.key = "";
        if (value !== undefined)
            reflectionMergePartial<ControllerKVAPI_GetFlag_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerKVAPI_GetFlag_Request): ControllerKVAPI_GetFlag_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string controller_type */ 1:
                    message.controllerType = reader.string();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerKVAPI_GetFlag_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string controller_type = 1; */
        if (message.controllerType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.controllerType);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerKVAPI.GetFlag.Request
 */
export const ControllerKVAPI_GetFlag_Request = new ControllerKVAPI_GetFlag_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerKVAPI_GetFlag_Response$Type extends MessageType<ControllerKVAPI_GetFlag_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerKVAPI.GetFlag.Response", [
            { no: 1, name: "value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ControllerKVAPI_GetFlag_Response>): ControllerKVAPI_GetFlag_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = false;
        if (value !== undefined)
            reflectionMergePartial<ControllerKVAPI_GetFlag_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerKVAPI_GetFlag_Response): ControllerKVAPI_GetFlag_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool value */ 1:
                    message.value = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerKVAPI_GetFlag_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool value = 1; */
        if (message.value !== false)
            writer.tag(1, WireType.Varint).bool(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerKVAPI.GetFlag.Response
 */
export const ControllerKVAPI_GetFlag_Response = new ControllerKVAPI_GetFlag_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerKVAPI_GetFlagIfExists$Type extends MessageType<ControllerKVAPI_GetFlagIfExists> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerKVAPI.GetFlagIfExists", []);
    }
    create(value?: PartialMessage<ControllerKVAPI_GetFlagIfExists>): ControllerKVAPI_GetFlagIfExists {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ControllerKVAPI_GetFlagIfExists>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerKVAPI_GetFlagIfExists): ControllerKVAPI_GetFlagIfExists {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerKVAPI_GetFlagIfExists, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerKVAPI.GetFlagIfExists
 */
export const ControllerKVAPI_GetFlagIfExists = new ControllerKVAPI_GetFlagIfExists$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerKVAPI_GetFlagIfExists_Request$Type extends MessageType<ControllerKVAPI_GetFlagIfExists_Request> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerKVAPI.GetFlagIfExists.Request", [
            { no: 1, name: "controller_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ControllerKVAPI_GetFlagIfExists_Request>): ControllerKVAPI_GetFlagIfExists_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.controllerType = "";
        message.key = "";
        if (value !== undefined)
            reflectionMergePartial<ControllerKVAPI_GetFlagIfExists_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerKVAPI_GetFlagIfExists_Request): ControllerKVAPI_GetFlagIfExists_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string controller_type */ 1:
                    message.controllerType = reader.string();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerKVAPI_GetFlagIfExists_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string controller_type = 1; */
        if (message.controllerType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.controllerType);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerKVAPI.GetFlagIfExists.Request
 */
export const ControllerKVAPI_GetFlagIfExists_Request = new ControllerKVAPI_GetFlagIfExists_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerKVAPI_GetFlagIfExists_Response$Type extends MessageType<ControllerKVAPI_GetFlagIfExists_Response> {
    constructor() {
        super("MiLaboratories.PL.API.ControllerKVAPI.GetFlagIfExists.Response", [
            { no: 1, name: "value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "exists", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ControllerKVAPI_GetFlagIfExists_Response>): ControllerKVAPI_GetFlagIfExists_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = false;
        message.exists = false;
        if (value !== undefined)
            reflectionMergePartial<ControllerKVAPI_GetFlagIfExists_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerKVAPI_GetFlagIfExists_Response): ControllerKVAPI_GetFlagIfExists_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool value */ 1:
                    message.value = reader.bool();
                    break;
                case /* bool exists */ 2:
                    message.exists = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerKVAPI_GetFlagIfExists_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool value = 1; */
        if (message.value !== false)
            writer.tag(1, WireType.Varint).bool(message.value);
        /* bool exists = 2; */
        if (message.exists !== false)
            writer.tag(2, WireType.Varint).bool(message.exists);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.ControllerKVAPI.GetFlagIfExists.Response
 */
export const ControllerKVAPI_GetFlagIfExists_Response = new ControllerKVAPI_GetFlagIfExists_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CacheAPI$Type extends MessageType<CacheAPI> {
    constructor() {
        super("MiLaboratories.PL.API.CacheAPI", []);
    }
    create(value?: PartialMessage<CacheAPI>): CacheAPI {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CacheAPI>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CacheAPI): CacheAPI {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CacheAPI, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.CacheAPI
 */
export const CacheAPI = new CacheAPI$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CacheAPI_SetToField$Type extends MessageType<CacheAPI_SetToField> {
    constructor() {
        super("MiLaboratories.PL.API.CacheAPI.SetToField", []);
    }
    create(value?: PartialMessage<CacheAPI_SetToField>): CacheAPI_SetToField {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CacheAPI_SetToField>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CacheAPI_SetToField): CacheAPI_SetToField {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CacheAPI_SetToField, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.CacheAPI.SetToField
 */
export const CacheAPI_SetToField = new CacheAPI_SetToField$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CacheAPI_SetToField_Request$Type extends MessageType<CacheAPI_SetToField_Request> {
    constructor() {
        super("MiLaboratories.PL.API.CacheAPI.SetToField.Request", [
            { no: 1, name: "id", kind: "message", T: () => FieldRef },
            { no: 2, name: "period", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<CacheAPI_SetToField_Request>): CacheAPI_SetToField_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CacheAPI_SetToField_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CacheAPI_SetToField_Request): CacheAPI_SetToField_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.PL.Base.FieldRef id */ 1:
                    message.id = FieldRef.internalBinaryRead(reader, reader.uint32(), options, message.id);
                    break;
                case /* google.protobuf.Duration period */ 2:
                    message.period = Duration.internalBinaryRead(reader, reader.uint32(), options, message.period);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CacheAPI_SetToField_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.PL.Base.FieldRef id = 1; */
        if (message.id)
            FieldRef.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration period = 2; */
        if (message.period)
            Duration.internalBinaryWrite(message.period, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.CacheAPI.SetToField.Request
 */
export const CacheAPI_SetToField_Request = new CacheAPI_SetToField_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CacheAPI_SetToField_Response$Type extends MessageType<CacheAPI_SetToField_Response> {
    constructor() {
        super("MiLaboratories.PL.API.CacheAPI.SetToField.Response", []);
    }
    create(value?: PartialMessage<CacheAPI_SetToField_Response>): CacheAPI_SetToField_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CacheAPI_SetToField_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CacheAPI_SetToField_Response): CacheAPI_SetToField_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CacheAPI_SetToField_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.CacheAPI.SetToField.Response
 */
export const CacheAPI_SetToField_Response = new CacheAPI_SetToField_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CacheAPI_DeleteExpiredRecords$Type extends MessageType<CacheAPI_DeleteExpiredRecords> {
    constructor() {
        super("MiLaboratories.PL.API.CacheAPI.DeleteExpiredRecords", []);
    }
    create(value?: PartialMessage<CacheAPI_DeleteExpiredRecords>): CacheAPI_DeleteExpiredRecords {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CacheAPI_DeleteExpiredRecords>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CacheAPI_DeleteExpiredRecords): CacheAPI_DeleteExpiredRecords {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CacheAPI_DeleteExpiredRecords, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.CacheAPI.DeleteExpiredRecords
 */
export const CacheAPI_DeleteExpiredRecords = new CacheAPI_DeleteExpiredRecords$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CacheAPI_DeleteExpiredRecords_Request$Type extends MessageType<CacheAPI_DeleteExpiredRecords_Request> {
    constructor() {
        super("MiLaboratories.PL.API.CacheAPI.DeleteExpiredRecords.Request", []);
    }
    create(value?: PartialMessage<CacheAPI_DeleteExpiredRecords_Request>): CacheAPI_DeleteExpiredRecords_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CacheAPI_DeleteExpiredRecords_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CacheAPI_DeleteExpiredRecords_Request): CacheAPI_DeleteExpiredRecords_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CacheAPI_DeleteExpiredRecords_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.CacheAPI.DeleteExpiredRecords.Request
 */
export const CacheAPI_DeleteExpiredRecords_Request = new CacheAPI_DeleteExpiredRecords_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CacheAPI_DeleteExpiredRecords_Response$Type extends MessageType<CacheAPI_DeleteExpiredRecords_Response> {
    constructor() {
        super("MiLaboratories.PL.API.CacheAPI.DeleteExpiredRecords.Response", []);
    }
    create(value?: PartialMessage<CacheAPI_DeleteExpiredRecords_Response>): CacheAPI_DeleteExpiredRecords_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CacheAPI_DeleteExpiredRecords_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CacheAPI_DeleteExpiredRecords_Response): CacheAPI_DeleteExpiredRecords_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CacheAPI_DeleteExpiredRecords_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.CacheAPI.DeleteExpiredRecords.Response
 */
export const CacheAPI_DeleteExpiredRecords_Response = new CacheAPI_DeleteExpiredRecords_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LocksAPI$Type extends MessageType<LocksAPI> {
    constructor() {
        super("MiLaboratories.PL.API.LocksAPI", []);
    }
    create(value?: PartialMessage<LocksAPI>): LocksAPI {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LocksAPI>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LocksAPI): LocksAPI {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LocksAPI, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.LocksAPI
 */
export const LocksAPI = new LocksAPI$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LocksAPI_Lease$Type extends MessageType<LocksAPI_Lease> {
    constructor() {
        super("MiLaboratories.PL.API.LocksAPI.Lease", []);
    }
    create(value?: PartialMessage<LocksAPI_Lease>): LocksAPI_Lease {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LocksAPI_Lease>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LocksAPI_Lease): LocksAPI_Lease {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LocksAPI_Lease, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.LocksAPI.Lease
 */
export const LocksAPI_Lease = new LocksAPI_Lease$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LocksAPI_Lease_Create$Type extends MessageType<LocksAPI_Lease_Create> {
    constructor() {
        super("MiLaboratories.PL.API.LocksAPI.Lease.Create", []);
    }
    create(value?: PartialMessage<LocksAPI_Lease_Create>): LocksAPI_Lease_Create {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LocksAPI_Lease_Create>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LocksAPI_Lease_Create): LocksAPI_Lease_Create {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LocksAPI_Lease_Create, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.LocksAPI.Lease.Create
 */
export const LocksAPI_Lease_Create = new LocksAPI_Lease_Create$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LocksAPI_Lease_Create_Request$Type extends MessageType<LocksAPI_Lease_Create_Request> {
    constructor() {
        super("MiLaboratories.PL.API.LocksAPI.Lease.Create.Request", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "timeout", kind: "message", T: () => Duration },
            { no: 4, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LocksAPI_Lease_Create_Request>): LocksAPI_Lease_Create_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<LocksAPI_Lease_Create_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LocksAPI_Lease_Create_Request): LocksAPI_Lease_Create_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                case /* google.protobuf.Duration timeout */ 3:
                    message.timeout = Duration.internalBinaryRead(reader, reader.uint32(), options, message.timeout);
                    break;
                case /* string name */ 4:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LocksAPI_Lease_Create_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        /* google.protobuf.Duration timeout = 3; */
        if (message.timeout)
            Duration.internalBinaryWrite(message.timeout, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string name = 4; */
        if (message.name !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.LocksAPI.Lease.Create.Request
 */
export const LocksAPI_Lease_Create_Request = new LocksAPI_Lease_Create_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LocksAPI_Lease_Create_Response$Type extends MessageType<LocksAPI_Lease_Create_Response> {
    constructor() {
        super("MiLaboratories.PL.API.LocksAPI.Lease.Create.Response", [
            { no: 1, name: "lease_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<LocksAPI_Lease_Create_Response>): LocksAPI_Lease_Create_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.leaseId = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<LocksAPI_Lease_Create_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LocksAPI_Lease_Create_Response): LocksAPI_Lease_Create_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes lease_id */ 1:
                    message.leaseId = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LocksAPI_Lease_Create_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes lease_id = 1; */
        if (message.leaseId.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.leaseId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.LocksAPI.Lease.Create.Response
 */
export const LocksAPI_Lease_Create_Response = new LocksAPI_Lease_Create_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LocksAPI_Lease_Update$Type extends MessageType<LocksAPI_Lease_Update> {
    constructor() {
        super("MiLaboratories.PL.API.LocksAPI.Lease.Update", []);
    }
    create(value?: PartialMessage<LocksAPI_Lease_Update>): LocksAPI_Lease_Update {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LocksAPI_Lease_Update>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LocksAPI_Lease_Update): LocksAPI_Lease_Update {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LocksAPI_Lease_Update, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.LocksAPI.Lease.Update
 */
export const LocksAPI_Lease_Update = new LocksAPI_Lease_Update$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LocksAPI_Lease_Update_Request$Type extends MessageType<LocksAPI_Lease_Update_Request> {
    constructor() {
        super("MiLaboratories.PL.API.LocksAPI.Lease.Update.Request", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "lease_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "timeout", kind: "message", T: () => Duration },
            { no: 4, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LocksAPI_Lease_Update_Request>): LocksAPI_Lease_Update_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        message.leaseId = new Uint8Array(0);
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<LocksAPI_Lease_Update_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LocksAPI_Lease_Update_Request): LocksAPI_Lease_Update_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                case /* bytes lease_id */ 2:
                    message.leaseId = reader.bytes();
                    break;
                case /* google.protobuf.Duration timeout */ 3:
                    message.timeout = Duration.internalBinaryRead(reader, reader.uint32(), options, message.timeout);
                    break;
                case /* string name */ 4:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LocksAPI_Lease_Update_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        /* bytes lease_id = 2; */
        if (message.leaseId.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.leaseId);
        /* google.protobuf.Duration timeout = 3; */
        if (message.timeout)
            Duration.internalBinaryWrite(message.timeout, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string name = 4; */
        if (message.name !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.LocksAPI.Lease.Update.Request
 */
export const LocksAPI_Lease_Update_Request = new LocksAPI_Lease_Update_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LocksAPI_Lease_Update_Response$Type extends MessageType<LocksAPI_Lease_Update_Response> {
    constructor() {
        super("MiLaboratories.PL.API.LocksAPI.Lease.Update.Response", []);
    }
    create(value?: PartialMessage<LocksAPI_Lease_Update_Response>): LocksAPI_Lease_Update_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LocksAPI_Lease_Update_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LocksAPI_Lease_Update_Response): LocksAPI_Lease_Update_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LocksAPI_Lease_Update_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.LocksAPI.Lease.Update.Response
 */
export const LocksAPI_Lease_Update_Response = new LocksAPI_Lease_Update_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LocksAPI_Lease_Release$Type extends MessageType<LocksAPI_Lease_Release> {
    constructor() {
        super("MiLaboratories.PL.API.LocksAPI.Lease.Release", []);
    }
    create(value?: PartialMessage<LocksAPI_Lease_Release>): LocksAPI_Lease_Release {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LocksAPI_Lease_Release>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LocksAPI_Lease_Release): LocksAPI_Lease_Release {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LocksAPI_Lease_Release, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.LocksAPI.Lease.Release
 */
export const LocksAPI_Lease_Release = new LocksAPI_Lease_Release$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LocksAPI_Lease_Release_Request$Type extends MessageType<LocksAPI_Lease_Release_Request> {
    constructor() {
        super("MiLaboratories.PL.API.LocksAPI.Lease.Release.Request", [
            { no: 1, name: "resource_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "lease_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<LocksAPI_Lease_Release_Request>): LocksAPI_Lease_Release_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceId = 0n;
        message.leaseId = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<LocksAPI_Lease_Release_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LocksAPI_Lease_Release_Request): LocksAPI_Lease_Release_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 resource_id */ 1:
                    message.resourceId = reader.uint64().toBigInt();
                    break;
                case /* bytes lease_id */ 2:
                    message.leaseId = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LocksAPI_Lease_Release_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 resource_id = 1; */
        if (message.resourceId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.resourceId);
        /* bytes lease_id = 2; */
        if (message.leaseId.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.leaseId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.LocksAPI.Lease.Release.Request
 */
export const LocksAPI_Lease_Release_Request = new LocksAPI_Lease_Release_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LocksAPI_Lease_Release_Response$Type extends MessageType<LocksAPI_Lease_Release_Response> {
    constructor() {
        super("MiLaboratories.PL.API.LocksAPI.Lease.Release.Response", []);
    }
    create(value?: PartialMessage<LocksAPI_Lease_Release_Response>): LocksAPI_Lease_Release_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LocksAPI_Lease_Release_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LocksAPI_Lease_Release_Response): LocksAPI_Lease_Release_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LocksAPI_Lease_Release_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.LocksAPI.Lease.Release.Response
 */
export const LocksAPI_Lease_Release_Response = new LocksAPI_Lease_Release_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthAPI$Type extends MessageType<AuthAPI> {
    constructor() {
        super("MiLaboratories.PL.API.AuthAPI", []);
    }
    create(value?: PartialMessage<AuthAPI>): AuthAPI {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AuthAPI>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthAPI): AuthAPI {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthAPI, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.AuthAPI
 */
export const AuthAPI = new AuthAPI$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthAPI_ListMethods$Type extends MessageType<AuthAPI_ListMethods> {
    constructor() {
        super("MiLaboratories.PL.API.AuthAPI.ListMethods", []);
    }
    create(value?: PartialMessage<AuthAPI_ListMethods>): AuthAPI_ListMethods {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AuthAPI_ListMethods>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthAPI_ListMethods): AuthAPI_ListMethods {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthAPI_ListMethods, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.AuthAPI.ListMethods
 */
export const AuthAPI_ListMethods = new AuthAPI_ListMethods$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthAPI_ListMethods_Request$Type extends MessageType<AuthAPI_ListMethods_Request> {
    constructor() {
        super("MiLaboratories.PL.API.AuthAPI.ListMethods.Request", []);
    }
    create(value?: PartialMessage<AuthAPI_ListMethods_Request>): AuthAPI_ListMethods_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AuthAPI_ListMethods_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthAPI_ListMethods_Request): AuthAPI_ListMethods_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthAPI_ListMethods_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.AuthAPI.ListMethods.Request
 */
export const AuthAPI_ListMethods_Request = new AuthAPI_ListMethods_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthAPI_ListMethods_Response$Type extends MessageType<AuthAPI_ListMethods_Response> {
    constructor() {
        super("MiLaboratories.PL.API.AuthAPI.ListMethods.Response", [
            { no: 1, name: "methods", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => AuthAPI_ListMethods_MethodInfo }
        ]);
    }
    create(value?: PartialMessage<AuthAPI_ListMethods_Response>): AuthAPI_ListMethods_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.methods = [];
        if (value !== undefined)
            reflectionMergePartial<AuthAPI_ListMethods_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthAPI_ListMethods_Response): AuthAPI_ListMethods_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated MiLaboratories.PL.API.AuthAPI.ListMethods.MethodInfo methods */ 1:
                    message.methods.push(AuthAPI_ListMethods_MethodInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthAPI_ListMethods_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated MiLaboratories.PL.API.AuthAPI.ListMethods.MethodInfo methods = 1; */
        for (let i = 0; i < message.methods.length; i++)
            AuthAPI_ListMethods_MethodInfo.internalBinaryWrite(message.methods[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.AuthAPI.ListMethods.Response
 */
export const AuthAPI_ListMethods_Response = new AuthAPI_ListMethods_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthAPI_ListMethods_MethodInfo$Type extends MessageType<AuthAPI_ListMethods_MethodInfo> {
    constructor() {
        super("MiLaboratories.PL.API.AuthAPI.ListMethods.MethodInfo", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "info", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<AuthAPI_ListMethods_MethodInfo>): AuthAPI_ListMethods_MethodInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = "";
        message.name = "";
        message.info = {};
        if (value !== undefined)
            reflectionMergePartial<AuthAPI_ListMethods_MethodInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthAPI_ListMethods_MethodInfo): AuthAPI_ListMethods_MethodInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* map<string, string> info */ 3:
                    this.binaryReadMap3(message.info, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: AuthAPI_ListMethods_MethodInfo["info"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof AuthAPI_ListMethods_MethodInfo["info"] | undefined, val: AuthAPI_ListMethods_MethodInfo["info"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for MiLaboratories.PL.API.AuthAPI.ListMethods.MethodInfo.info");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: AuthAPI_ListMethods_MethodInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* map<string, string> info = 3; */
        for (let k of globalThis.Object.keys(message.info))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.info[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.AuthAPI.ListMethods.MethodInfo
 */
export const AuthAPI_ListMethods_MethodInfo = new AuthAPI_ListMethods_MethodInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthAPI_GetJWTToken$Type extends MessageType<AuthAPI_GetJWTToken> {
    constructor() {
        super("MiLaboratories.PL.API.AuthAPI.GetJWTToken", []);
    }
    create(value?: PartialMessage<AuthAPI_GetJWTToken>): AuthAPI_GetJWTToken {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AuthAPI_GetJWTToken>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthAPI_GetJWTToken): AuthAPI_GetJWTToken {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthAPI_GetJWTToken, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.AuthAPI.GetJWTToken
 */
export const AuthAPI_GetJWTToken = new AuthAPI_GetJWTToken$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthAPI_GetJWTToken_Request$Type extends MessageType<AuthAPI_GetJWTToken_Request> {
    constructor() {
        super("MiLaboratories.PL.API.AuthAPI.GetJWTToken.Request", [
            { no: 1, name: "expiration", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<AuthAPI_GetJWTToken_Request>): AuthAPI_GetJWTToken_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AuthAPI_GetJWTToken_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthAPI_GetJWTToken_Request): AuthAPI_GetJWTToken_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration expiration */ 1:
                    message.expiration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.expiration);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthAPI_GetJWTToken_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Duration expiration = 1; */
        if (message.expiration)
            Duration.internalBinaryWrite(message.expiration, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.AuthAPI.GetJWTToken.Request
 */
export const AuthAPI_GetJWTToken_Request = new AuthAPI_GetJWTToken_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthAPI_GetJWTToken_Response$Type extends MessageType<AuthAPI_GetJWTToken_Response> {
    constructor() {
        super("MiLaboratories.PL.API.AuthAPI.GetJWTToken.Response", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuthAPI_GetJWTToken_Response>): AuthAPI_GetJWTToken_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = "";
        if (value !== undefined)
            reflectionMergePartial<AuthAPI_GetJWTToken_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthAPI_GetJWTToken_Response): AuthAPI_GetJWTToken_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthAPI_GetJWTToken_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.AuthAPI.GetJWTToken.Response
 */
export const AuthAPI_GetJWTToken_Response = new AuthAPI_GetJWTToken_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MiscAPI$Type extends MessageType<MiscAPI> {
    constructor() {
        super("MiLaboratories.PL.API.MiscAPI", []);
    }
    create(value?: PartialMessage<MiscAPI>): MiscAPI {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MiscAPI>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MiscAPI): MiscAPI {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MiscAPI, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.MiscAPI
 */
export const MiscAPI = new MiscAPI$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MiscAPI_ListResourceTypes$Type extends MessageType<MiscAPI_ListResourceTypes> {
    constructor() {
        super("MiLaboratories.PL.API.MiscAPI.ListResourceTypes", []);
    }
    create(value?: PartialMessage<MiscAPI_ListResourceTypes>): MiscAPI_ListResourceTypes {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MiscAPI_ListResourceTypes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MiscAPI_ListResourceTypes): MiscAPI_ListResourceTypes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MiscAPI_ListResourceTypes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.MiscAPI.ListResourceTypes
 */
export const MiscAPI_ListResourceTypes = new MiscAPI_ListResourceTypes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MiscAPI_ListResourceTypes_Request$Type extends MessageType<MiscAPI_ListResourceTypes_Request> {
    constructor() {
        super("MiLaboratories.PL.API.MiscAPI.ListResourceTypes.Request", []);
    }
    create(value?: PartialMessage<MiscAPI_ListResourceTypes_Request>): MiscAPI_ListResourceTypes_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MiscAPI_ListResourceTypes_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MiscAPI_ListResourceTypes_Request): MiscAPI_ListResourceTypes_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MiscAPI_ListResourceTypes_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.MiscAPI.ListResourceTypes.Request
 */
export const MiscAPI_ListResourceTypes_Request = new MiscAPI_ListResourceTypes_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MiscAPI_ListResourceTypes_Response$Type extends MessageType<MiscAPI_ListResourceTypes_Response> {
    constructor() {
        super("MiLaboratories.PL.API.MiscAPI.ListResourceTypes.Response", [
            { no: 1, name: "types", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ResourceType }
        ]);
    }
    create(value?: PartialMessage<MiscAPI_ListResourceTypes_Response>): MiscAPI_ListResourceTypes_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.types = [];
        if (value !== undefined)
            reflectionMergePartial<MiscAPI_ListResourceTypes_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MiscAPI_ListResourceTypes_Response): MiscAPI_ListResourceTypes_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated MiLaboratories.PL.Base.ResourceType types */ 1:
                    message.types.push(ResourceType.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MiscAPI_ListResourceTypes_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated MiLaboratories.PL.Base.ResourceType types = 1; */
        for (let i = 0; i < message.types.length; i++)
            ResourceType.internalBinaryWrite(message.types[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.MiscAPI.ListResourceTypes.Response
 */
export const MiscAPI_ListResourceTypes_Response = new MiscAPI_ListResourceTypes_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MaintenanceAPI$Type extends MessageType<MaintenanceAPI> {
    constructor() {
        super("MiLaboratories.PL.API.MaintenanceAPI", []);
    }
    create(value?: PartialMessage<MaintenanceAPI>): MaintenanceAPI {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MaintenanceAPI>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MaintenanceAPI): MaintenanceAPI {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MaintenanceAPI, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.MaintenanceAPI
 */
export const MaintenanceAPI = new MaintenanceAPI$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MaintenanceAPI_Ping$Type extends MessageType<MaintenanceAPI_Ping> {
    constructor() {
        super("MiLaboratories.PL.API.MaintenanceAPI.Ping", []);
    }
    create(value?: PartialMessage<MaintenanceAPI_Ping>): MaintenanceAPI_Ping {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MaintenanceAPI_Ping>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MaintenanceAPI_Ping): MaintenanceAPI_Ping {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MaintenanceAPI_Ping, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.MaintenanceAPI.Ping
 */
export const MaintenanceAPI_Ping = new MaintenanceAPI_Ping$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MaintenanceAPI_Ping_Request$Type extends MessageType<MaintenanceAPI_Ping_Request> {
    constructor() {
        super("MiLaboratories.PL.API.MaintenanceAPI.Ping.Request", []);
    }
    create(value?: PartialMessage<MaintenanceAPI_Ping_Request>): MaintenanceAPI_Ping_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MaintenanceAPI_Ping_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MaintenanceAPI_Ping_Request): MaintenanceAPI_Ping_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MaintenanceAPI_Ping_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.MaintenanceAPI.Ping.Request
 */
export const MaintenanceAPI_Ping_Request = new MaintenanceAPI_Ping_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MaintenanceAPI_Ping_Response$Type extends MessageType<MaintenanceAPI_Ping_Response> {
    constructor() {
        super("MiLaboratories.PL.API.MaintenanceAPI.Ping.Response", [
            { no: 1, name: "core_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "core_full_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "server_info", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "compression", kind: "enum", T: () => ["MiLaboratories.PL.API.MaintenanceAPI.Ping.Response.Compression", MaintenanceAPI_Ping_Response_Compression] },
            { no: 5, name: "instance_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "platform", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "os", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "arch", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MaintenanceAPI_Ping_Response>): MaintenanceAPI_Ping_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.coreVersion = "";
        message.coreFullVersion = "";
        message.serverInfo = "";
        message.compression = 0;
        message.instanceId = "";
        message.platform = "";
        message.os = "";
        message.arch = "";
        if (value !== undefined)
            reflectionMergePartial<MaintenanceAPI_Ping_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MaintenanceAPI_Ping_Response): MaintenanceAPI_Ping_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string core_version */ 1:
                    message.coreVersion = reader.string();
                    break;
                case /* string core_full_version */ 2:
                    message.coreFullVersion = reader.string();
                    break;
                case /* string server_info */ 3:
                    message.serverInfo = reader.string();
                    break;
                case /* MiLaboratories.PL.API.MaintenanceAPI.Ping.Response.Compression compression */ 4:
                    message.compression = reader.int32();
                    break;
                case /* string instance_id */ 5:
                    message.instanceId = reader.string();
                    break;
                case /* string platform */ 6:
                    message.platform = reader.string();
                    break;
                case /* string os */ 7:
                    message.os = reader.string();
                    break;
                case /* string arch */ 8:
                    message.arch = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MaintenanceAPI_Ping_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string core_version = 1; */
        if (message.coreVersion !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.coreVersion);
        /* string core_full_version = 2; */
        if (message.coreFullVersion !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.coreFullVersion);
        /* string server_info = 3; */
        if (message.serverInfo !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.serverInfo);
        /* MiLaboratories.PL.API.MaintenanceAPI.Ping.Response.Compression compression = 4; */
        if (message.compression !== 0)
            writer.tag(4, WireType.Varint).int32(message.compression);
        /* string instance_id = 5; */
        if (message.instanceId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.instanceId);
        /* string platform = 6; */
        if (message.platform !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.platform);
        /* string os = 7; */
        if (message.os !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.os);
        /* string arch = 8; */
        if (message.arch !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.arch);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.MaintenanceAPI.Ping.Response
 */
export const MaintenanceAPI_Ping_Response = new MaintenanceAPI_Ping_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MaintenanceAPI_License$Type extends MessageType<MaintenanceAPI_License> {
    constructor() {
        super("MiLaboratories.PL.API.MaintenanceAPI.License", []);
    }
    create(value?: PartialMessage<MaintenanceAPI_License>): MaintenanceAPI_License {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MaintenanceAPI_License>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MaintenanceAPI_License): MaintenanceAPI_License {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MaintenanceAPI_License, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.MaintenanceAPI.License
 */
export const MaintenanceAPI_License = new MaintenanceAPI_License$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MaintenanceAPI_License_Request$Type extends MessageType<MaintenanceAPI_License_Request> {
    constructor() {
        super("MiLaboratories.PL.API.MaintenanceAPI.License.Request", []);
    }
    create(value?: PartialMessage<MaintenanceAPI_License_Request>): MaintenanceAPI_License_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MaintenanceAPI_License_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MaintenanceAPI_License_Request): MaintenanceAPI_License_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MaintenanceAPI_License_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.MaintenanceAPI.License.Request
 */
export const MaintenanceAPI_License_Request = new MaintenanceAPI_License_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MaintenanceAPI_License_Response$Type extends MessageType<MaintenanceAPI_License_Response> {
    constructor() {
        super("MiLaboratories.PL.API.MaintenanceAPI.License.Response", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "is_ok", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "response_body", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<MaintenanceAPI_License_Response>): MaintenanceAPI_License_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        message.isOk = false;
        message.responseBody = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<MaintenanceAPI_License_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MaintenanceAPI_License_Response): MaintenanceAPI_License_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                case /* bool is_ok */ 2:
                    message.isOk = reader.bool();
                    break;
                case /* bytes response_body */ 3:
                    message.responseBody = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MaintenanceAPI_License_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* bool is_ok = 2; */
        if (message.isOk !== false)
            writer.tag(2, WireType.Varint).bool(message.isOk);
        /* bytes response_body = 3; */
        if (message.responseBody.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.responseBody);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.API.MaintenanceAPI.License.Response
 */
export const MaintenanceAPI_License_Response = new MaintenanceAPI_License_Response$Type();
/**
 * @generated ServiceType for protobuf service MiLaboratories.PL.API.Platform
 */
export const Platform = new ServiceType("MiLaboratories.PL.API.Platform", [
    { name: "Tx", serverStreaming: true, clientStreaming: true, options: {}, I: TxAPI_ClientMessage, O: TxAPI_ServerMessage },
    { name: "TxSync", options: {}, I: TxAPI_Sync_Request, O: TxAPI_Sync_Response },
    { name: "SubscriptionAttachFilter", options: {}, I: SubscriptionAPI_AttachFilter_Request, O: SubscriptionAPI_AttachFilter_Response },
    { name: "SubscriptionDetachFilter", options: {}, I: SubscriptionAPI_DetachFilter_Request, O: SubscriptionAPI_DetachFilter_Response },
    { name: "NotificationsGet", options: {}, I: NotificationAPI_Get_Request, O: NotificationAPI_Get_Response },
    { name: "ControllerRegister", options: {}, I: ControllerAPI_Register_Request, O: ControllerAPI_Register_Response },
    { name: "ControllerDeregister", options: {}, I: ControllerAPI_Deregister_Request, O: ControllerAPI_Deregister_Response },
    { name: "ControllerCreate", options: {}, I: ControllerAPI_Create_Request, O: ControllerAPI_Create_Response },
    { name: "ControllerExists", options: {}, I: ControllerAPI_Exists_Request, O: ControllerAPI_Exists_Response },
    { name: "ControllerGet", options: {}, I: ControllerAPI_Get_Request, O: ControllerAPI_Get_Response },
    { name: "ControllerUpdate", options: {}, I: ControllerAPI_Update_Request, O: ControllerAPI_Update_Response },
    { name: "ControllerAttachSubscription", options: {}, I: ControllerAPI_AttachSubscription_Request, O: ControllerAPI_AttachSubscription_Response },
    { name: "GetControllerNotifications", options: {}, I: ControllerAPI_GetNotifications_Request, O: ControllerAPI_GetNotifications_Response },
    { name: "WriteControllerAliasesAndUrls", options: {}, I: ControllerAPI_WriteAliasesAndUrls_Request, O: ControllerAPI_WriteAliasesAndUrls_Response },
    { name: "RemoveControllerAliasesAndUrls", options: {}, I: ControllerAPI_RemoveAliasesAndUrls_Request, O: ControllerAPI_RemoveAliasesAndUrls_Response },
    { name: "GetControllerUrl", options: {}, I: ControllerAPI_GetUrl_Request, O: ControllerAPI_GetUrl_Response },
    { name: "ControllerSetFeatures", options: {}, I: ControllerAPI_SetFeatures_Request, O: ControllerAPI_SetFeatures_Response },
    { name: "ControllerClearFeatures", options: {}, I: ControllerAPI_ClearFeatures_Request, O: ControllerAPI_ClearFeatures_Response },
    { name: "LeaseResource", options: {}, I: LocksAPI_Lease_Create_Request, O: LocksAPI_Lease_Create_Response },
    { name: "UpdateLease", options: {}, I: LocksAPI_Lease_Update_Request, O: LocksAPI_Lease_Update_Response },
    { name: "ReleaseLease", options: {}, I: LocksAPI_Lease_Release_Request, O: LocksAPI_Lease_Release_Response },
    { name: "AuthMethods", options: {}, I: AuthAPI_ListMethods_Request, O: AuthAPI_ListMethods_Response },
    { name: "GetJWTToken", options: {}, I: AuthAPI_GetJWTToken_Request, O: AuthAPI_GetJWTToken_Response },
    { name: "ListResourceTypes", options: {}, I: MiscAPI_ListResourceTypes_Request, O: MiscAPI_ListResourceTypes_Response },
    { name: "Ping", options: {}, I: MaintenanceAPI_Ping_Request, O: MaintenanceAPI_Ping_Response },
    { name: "License", options: {}, I: MaintenanceAPI_License_Request, O: MaintenanceAPI_License_Response }
]);
