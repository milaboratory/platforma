// @generated by protobuf-ts 2.11.1 with parameter client_generic,optimize_speed,generate_dependencies,force_server_none
// @generated from protobuf file "github.com/milaboratory/pl/controllers/shared/grpc/lsapi/protocol.proto" (package "MiLaboratories.Controller.Shared", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { LS } from "./protocol";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { LsAPI_List_Response } from "./protocol";
import type { LsAPI_List_Request } from "./protocol";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 *
 * LS provides access to lists of blobs (files, S3 objects and so on) is some storage.
 * This API allows clients to know, whan items are available in storages, that
 * the contorllers can access, providing clients with the ability to start indexation
 * on, say, existing sequence files from the corporate storage.
 *
 *
 * @generated from protobuf service MiLaboratories.Controller.Shared.LS
 */
export interface ILSClient {
    /**
     * @generated from protobuf rpc: List
     */
    list(input: LsAPI_List_Request, options?: RpcOptions): UnaryCall<LsAPI_List_Request, LsAPI_List_Response>;
}
/**
 *
 * LS provides access to lists of blobs (files, S3 objects and so on) is some storage.
 * This API allows clients to know, whan items are available in storages, that
 * the contorllers can access, providing clients with the ability to start indexation
 * on, say, existing sequence files from the corporate storage.
 *
 *
 * @generated from protobuf service MiLaboratories.Controller.Shared.LS
 */
export class LSClient implements ILSClient, ServiceInfo {
    typeName = LS.typeName;
    methods = LS.methods;
    options = LS.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: List
     */
    list(input: LsAPI_List_Request, options?: RpcOptions): UnaryCall<LsAPI_List_Request, LsAPI_List_Response> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<LsAPI_List_Request, LsAPI_List_Response>("unary", this._transport, method, opt, input);
    }
}
