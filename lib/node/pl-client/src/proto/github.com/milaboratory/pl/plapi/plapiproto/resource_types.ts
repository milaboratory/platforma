// @generated by protobuf-ts 2.9.6 with parameter client_generic,optimize_speed,generate_dependencies,force_server_none
// @generated from protobuf file "github.com/milaboratory/pl/plapi/plapiproto/resource_types.proto" (package "MiLaboratories.PL.RTypes", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ResourceType } from "./base_types";
/**
 * @generated from protobuf message MiLaboratories.PL.RTypes.Number
 */
export interface Number$ {
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "int32";
        /**
         * @generated from protobuf field: int32 int32 = 1;
         */
        int32: number;
    } | {
        oneofKind: "uint32";
        /**
         * @generated from protobuf field: uint32 uint32 = 2;
         */
        uint32: number;
    } | {
        oneofKind: "int64";
        /**
         * @generated from protobuf field: int64 int64 = 3;
         */
        int64: bigint;
    } | {
        oneofKind: "uint64";
        /**
         * @generated from protobuf field: uint64 uint64 = 4;
         */
        uint64: bigint;
    } | {
        oneofKind: "float";
        /**
         * @generated from protobuf field: float float = 5;
         */
        float: number;
    } | {
        oneofKind: "double";
        /**
         * @generated from protobuf field: double double = 6;
         */
        double: number;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message MiLaboratories.PL.RTypes.ControllerSettings
 */
export interface ControllerSettings {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
}
/**
 * @generated from protobuf message MiLaboratories.PL.RTypes.SubscriptionSettings
 */
export interface SubscriptionSettings {
    /**
     * @generated from protobuf field: bool blocking = 1;
     */
    blocking: boolean;
    /**
     * FIXME: drop this hack once we allow Data in Structural resources
     *
     * @generated from protobuf field: uint64 randomizer = 2;
     */
    randomizer: bigint; // dirty hack that makes subscription settings resources unique
}
/**
 * @generated from protobuf message MiLaboratories.PL.RTypes.NotificationFilter
 */
export interface NotificationFilter {
    /**
     * @generated from protobuf oneof: resource_filter
     */
    resourceFilter: {
        oneofKind: "resourceType";
        /**
         * @generated from protobuf field: MiLaboratories.PL.Base.ResourceType resource_type = 1;
         */
        resourceType: ResourceType;
    } | {
        oneofKind: "resourceId";
        /**
         * @generated from protobuf field: uint64 resource_id = 7;
         */
        resourceId: bigint;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: MiLaboratories.PL.RTypes.NotificationFilter.EventFilter event_filter = 8;
     */
    eventFilter?: NotificationFilter_EventFilter;
    /**
     * @generated from protobuf field: MiLaboratories.PL.RTypes.NotificationFilter.Payload payload = 9;
     */
    payload?: NotificationFilter_Payload;
}
/**
 * @generated from protobuf message MiLaboratories.PL.RTypes.NotificationFilter.EventFilter
 */
export interface NotificationFilter_EventFilter {
    /**
     * @generated from protobuf field: optional bool all = 1;
     */
    all?: boolean;
    // 
    // Resource events
    // 

    /**
     * @generated from protobuf field: optional bool resource_created = 2;
     */
    resourceCreated?: boolean;
    /**
     * @generated from protobuf field: optional bool resource_deleted = 3;
     */
    resourceDeleted?: boolean;
    /**
     * @generated from protobuf field: optional bool resource_ready = 5;
     */
    resourceReady?: boolean;
    /**
     * @generated from protobuf field: optional bool resource_duplicate = 6;
     */
    resourceDuplicate?: boolean;
    /**
     * @generated from protobuf field: optional bool resource_error = 16;
     */
    resourceError?: boolean;
    /**
     *
     * Field events
     *
     *
     * @generated from protobuf field: optional bool inputs_locked = 13;
     */
    inputsLocked?: boolean;
    /**
     * @generated from protobuf field: optional bool outputs_locked = 14;
     */
    outputsLocked?: boolean;
    /**
     * @generated from protobuf field: optional bool field_created = 12;
     */
    fieldCreated?: boolean;
    /**
     * @generated from protobuf field: optional bool field_got_error = 17;
     */
    fieldGotError?: boolean;
    /**
     * @generated from protobuf field: optional bool input_set = 7;
     */
    inputSet?: boolean;
    /**
     * @generated from protobuf field: optional bool all_inputs_set = 8;
     */
    allInputsSet?: boolean;
    /**
     * @generated from protobuf field: optional bool output_set = 9;
     */
    outputSet?: boolean;
    /**
     * @generated from protobuf field: optional bool all_outputs_set = 10;
     */
    allOutputsSet?: boolean;
    /**
     * @generated from protobuf field: optional bool generic_otw_set = 15;
     */
    genericOtwSet?: boolean;
    /**
     * @generated from protobuf field: optional bool dynamic_changed = 11;
     */
    dynamicChanged?: boolean;
}
/**
 * @generated from protobuf message MiLaboratories.PL.RTypes.NotificationFilter.Payload
 */
export interface NotificationFilter_Payload {
    /**
     * @generated from protobuf field: map<string, bytes> values = 1;
     */
    values: {
        [key: string]: Uint8Array;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class Number$$Type extends MessageType<Number$> {
    constructor() {
        super("MiLaboratories.PL.RTypes.Number", [
            { no: 1, name: "int32", kind: "scalar", oneof: "value", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "uint32", kind: "scalar", oneof: "value", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "int64", kind: "scalar", oneof: "value", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "uint64", kind: "scalar", oneof: "value", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "float", kind: "scalar", oneof: "value", T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "double", kind: "scalar", oneof: "value", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<Number$>): Number$ {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Number$>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Number$): Number$ {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 int32 */ 1:
                    message.value = {
                        oneofKind: "int32",
                        int32: reader.int32()
                    };
                    break;
                case /* uint32 uint32 */ 2:
                    message.value = {
                        oneofKind: "uint32",
                        uint32: reader.uint32()
                    };
                    break;
                case /* int64 int64 */ 3:
                    message.value = {
                        oneofKind: "int64",
                        int64: reader.int64().toBigInt()
                    };
                    break;
                case /* uint64 uint64 */ 4:
                    message.value = {
                        oneofKind: "uint64",
                        uint64: reader.uint64().toBigInt()
                    };
                    break;
                case /* float float */ 5:
                    message.value = {
                        oneofKind: "float",
                        float: reader.float()
                    };
                    break;
                case /* double double */ 6:
                    message.value = {
                        oneofKind: "double",
                        double: reader.double()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Number$, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 int32 = 1; */
        if (message.value.oneofKind === "int32")
            writer.tag(1, WireType.Varint).int32(message.value.int32);
        /* uint32 uint32 = 2; */
        if (message.value.oneofKind === "uint32")
            writer.tag(2, WireType.Varint).uint32(message.value.uint32);
        /* int64 int64 = 3; */
        if (message.value.oneofKind === "int64")
            writer.tag(3, WireType.Varint).int64(message.value.int64);
        /* uint64 uint64 = 4; */
        if (message.value.oneofKind === "uint64")
            writer.tag(4, WireType.Varint).uint64(message.value.uint64);
        /* float float = 5; */
        if (message.value.oneofKind === "float")
            writer.tag(5, WireType.Bit32).float(message.value.float);
        /* double double = 6; */
        if (message.value.oneofKind === "double")
            writer.tag(6, WireType.Bit64).double(message.value.double);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.RTypes.Number
 */
export const Number$ = new Number$$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControllerSettings$Type extends MessageType<ControllerSettings> {
    constructor() {
        super("MiLaboratories.PL.RTypes.ControllerSettings", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ControllerSettings>): ControllerSettings {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = "";
        if (value !== undefined)
            reflectionMergePartial<ControllerSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ControllerSettings): ControllerSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ControllerSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.RTypes.ControllerSettings
 */
export const ControllerSettings = new ControllerSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscriptionSettings$Type extends MessageType<SubscriptionSettings> {
    constructor() {
        super("MiLaboratories.PL.RTypes.SubscriptionSettings", [
            { no: 1, name: "blocking", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "randomizer", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SubscriptionSettings>): SubscriptionSettings {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.blocking = false;
        message.randomizer = 0n;
        if (value !== undefined)
            reflectionMergePartial<SubscriptionSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscriptionSettings): SubscriptionSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool blocking */ 1:
                    message.blocking = reader.bool();
                    break;
                case /* uint64 randomizer */ 2:
                    message.randomizer = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscriptionSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool blocking = 1; */
        if (message.blocking !== false)
            writer.tag(1, WireType.Varint).bool(message.blocking);
        /* uint64 randomizer = 2; */
        if (message.randomizer !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.randomizer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.RTypes.SubscriptionSettings
 */
export const SubscriptionSettings = new SubscriptionSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationFilter$Type extends MessageType<NotificationFilter> {
    constructor() {
        super("MiLaboratories.PL.RTypes.NotificationFilter", [
            { no: 1, name: "resource_type", kind: "message", oneof: "resourceFilter", T: () => ResourceType },
            { no: 7, name: "resource_id", kind: "scalar", oneof: "resourceFilter", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "event_filter", kind: "message", T: () => NotificationFilter_EventFilter },
            { no: 9, name: "payload", kind: "message", T: () => NotificationFilter_Payload }
        ]);
    }
    create(value?: PartialMessage<NotificationFilter>): NotificationFilter {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resourceFilter = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<NotificationFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationFilter): NotificationFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MiLaboratories.PL.Base.ResourceType resource_type */ 1:
                    message.resourceFilter = {
                        oneofKind: "resourceType",
                        resourceType: ResourceType.internalBinaryRead(reader, reader.uint32(), options, (message.resourceFilter as any).resourceType)
                    };
                    break;
                case /* uint64 resource_id */ 7:
                    message.resourceFilter = {
                        oneofKind: "resourceId",
                        resourceId: reader.uint64().toBigInt()
                    };
                    break;
                case /* MiLaboratories.PL.RTypes.NotificationFilter.EventFilter event_filter */ 8:
                    message.eventFilter = NotificationFilter_EventFilter.internalBinaryRead(reader, reader.uint32(), options, message.eventFilter);
                    break;
                case /* MiLaboratories.PL.RTypes.NotificationFilter.Payload payload */ 9:
                    message.payload = NotificationFilter_Payload.internalBinaryRead(reader, reader.uint32(), options, message.payload);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MiLaboratories.PL.Base.ResourceType resource_type = 1; */
        if (message.resourceFilter.oneofKind === "resourceType")
            ResourceType.internalBinaryWrite(message.resourceFilter.resourceType, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 resource_id = 7; */
        if (message.resourceFilter.oneofKind === "resourceId")
            writer.tag(7, WireType.Varint).uint64(message.resourceFilter.resourceId);
        /* MiLaboratories.PL.RTypes.NotificationFilter.EventFilter event_filter = 8; */
        if (message.eventFilter)
            NotificationFilter_EventFilter.internalBinaryWrite(message.eventFilter, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* MiLaboratories.PL.RTypes.NotificationFilter.Payload payload = 9; */
        if (message.payload)
            NotificationFilter_Payload.internalBinaryWrite(message.payload, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.RTypes.NotificationFilter
 */
export const NotificationFilter = new NotificationFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationFilter_EventFilter$Type extends MessageType<NotificationFilter_EventFilter> {
    constructor() {
        super("MiLaboratories.PL.RTypes.NotificationFilter.EventFilter", [
            { no: 1, name: "all", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "resource_created", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "resource_deleted", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "resource_ready", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "resource_duplicate", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "resource_error", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "inputs_locked", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "outputs_locked", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "field_created", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "field_got_error", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "input_set", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "all_inputs_set", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "output_set", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "all_outputs_set", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "generic_otw_set", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "dynamic_changed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<NotificationFilter_EventFilter>): NotificationFilter_EventFilter {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<NotificationFilter_EventFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationFilter_EventFilter): NotificationFilter_EventFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool all */ 1:
                    message.all = reader.bool();
                    break;
                case /* optional bool resource_created */ 2:
                    message.resourceCreated = reader.bool();
                    break;
                case /* optional bool resource_deleted */ 3:
                    message.resourceDeleted = reader.bool();
                    break;
                case /* optional bool resource_ready */ 5:
                    message.resourceReady = reader.bool();
                    break;
                case /* optional bool resource_duplicate */ 6:
                    message.resourceDuplicate = reader.bool();
                    break;
                case /* optional bool resource_error */ 16:
                    message.resourceError = reader.bool();
                    break;
                case /* optional bool inputs_locked */ 13:
                    message.inputsLocked = reader.bool();
                    break;
                case /* optional bool outputs_locked */ 14:
                    message.outputsLocked = reader.bool();
                    break;
                case /* optional bool field_created */ 12:
                    message.fieldCreated = reader.bool();
                    break;
                case /* optional bool field_got_error */ 17:
                    message.fieldGotError = reader.bool();
                    break;
                case /* optional bool input_set */ 7:
                    message.inputSet = reader.bool();
                    break;
                case /* optional bool all_inputs_set */ 8:
                    message.allInputsSet = reader.bool();
                    break;
                case /* optional bool output_set */ 9:
                    message.outputSet = reader.bool();
                    break;
                case /* optional bool all_outputs_set */ 10:
                    message.allOutputsSet = reader.bool();
                    break;
                case /* optional bool generic_otw_set */ 15:
                    message.genericOtwSet = reader.bool();
                    break;
                case /* optional bool dynamic_changed */ 11:
                    message.dynamicChanged = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationFilter_EventFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool all = 1; */
        if (message.all !== undefined)
            writer.tag(1, WireType.Varint).bool(message.all);
        /* optional bool resource_created = 2; */
        if (message.resourceCreated !== undefined)
            writer.tag(2, WireType.Varint).bool(message.resourceCreated);
        /* optional bool resource_deleted = 3; */
        if (message.resourceDeleted !== undefined)
            writer.tag(3, WireType.Varint).bool(message.resourceDeleted);
        /* optional bool resource_ready = 5; */
        if (message.resourceReady !== undefined)
            writer.tag(5, WireType.Varint).bool(message.resourceReady);
        /* optional bool resource_duplicate = 6; */
        if (message.resourceDuplicate !== undefined)
            writer.tag(6, WireType.Varint).bool(message.resourceDuplicate);
        /* optional bool resource_error = 16; */
        if (message.resourceError !== undefined)
            writer.tag(16, WireType.Varint).bool(message.resourceError);
        /* optional bool inputs_locked = 13; */
        if (message.inputsLocked !== undefined)
            writer.tag(13, WireType.Varint).bool(message.inputsLocked);
        /* optional bool outputs_locked = 14; */
        if (message.outputsLocked !== undefined)
            writer.tag(14, WireType.Varint).bool(message.outputsLocked);
        /* optional bool field_created = 12; */
        if (message.fieldCreated !== undefined)
            writer.tag(12, WireType.Varint).bool(message.fieldCreated);
        /* optional bool field_got_error = 17; */
        if (message.fieldGotError !== undefined)
            writer.tag(17, WireType.Varint).bool(message.fieldGotError);
        /* optional bool input_set = 7; */
        if (message.inputSet !== undefined)
            writer.tag(7, WireType.Varint).bool(message.inputSet);
        /* optional bool all_inputs_set = 8; */
        if (message.allInputsSet !== undefined)
            writer.tag(8, WireType.Varint).bool(message.allInputsSet);
        /* optional bool output_set = 9; */
        if (message.outputSet !== undefined)
            writer.tag(9, WireType.Varint).bool(message.outputSet);
        /* optional bool all_outputs_set = 10; */
        if (message.allOutputsSet !== undefined)
            writer.tag(10, WireType.Varint).bool(message.allOutputsSet);
        /* optional bool generic_otw_set = 15; */
        if (message.genericOtwSet !== undefined)
            writer.tag(15, WireType.Varint).bool(message.genericOtwSet);
        /* optional bool dynamic_changed = 11; */
        if (message.dynamicChanged !== undefined)
            writer.tag(11, WireType.Varint).bool(message.dynamicChanged);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.RTypes.NotificationFilter.EventFilter
 */
export const NotificationFilter_EventFilter = new NotificationFilter_EventFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationFilter_Payload$Type extends MessageType<NotificationFilter_Payload> {
    constructor() {
        super("MiLaboratories.PL.RTypes.NotificationFilter.Payload", [
            { no: 1, name: "values", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 12 /*ScalarType.BYTES*/ } }
        ]);
    }
    create(value?: PartialMessage<NotificationFilter_Payload>): NotificationFilter_Payload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.values = {};
        if (value !== undefined)
            reflectionMergePartial<NotificationFilter_Payload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationFilter_Payload): NotificationFilter_Payload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, bytes> values */ 1:
                    this.binaryReadMap1(message.values, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: NotificationFilter_Payload["values"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof NotificationFilter_Payload["values"] | undefined, val: NotificationFilter_Payload["values"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.bytes();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field MiLaboratories.PL.RTypes.NotificationFilter.Payload.values");
            }
        }
        map[key ?? ""] = val ?? new Uint8Array(0);
    }
    internalBinaryWrite(message: NotificationFilter_Payload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, bytes> values = 1; */
        for (let k of globalThis.Object.keys(message.values))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).bytes(message.values[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MiLaboratories.PL.RTypes.NotificationFilter.Payload
 */
export const NotificationFilter_Payload = new NotificationFilter_Payload$Type();
