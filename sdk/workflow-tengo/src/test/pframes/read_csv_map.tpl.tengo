// read_pf_from_csv.tpl

self := import(":tpl")
exec := import(":exec")
json := import("json")
pfc := import(":pframes.constants")
xsv := import(":pframes.xsv")
smart := import(":smart")

self.defineOutputs("pf")

self.body(func(inputs){

	// map with csv as text
	csvDataMap := inputs.csvMap

	csvMap := smart.structBuilder(pfc.RTYPE_P_COLUMN_DATA_RESOURCE_MAP, json.encode({keyLength: 1}))
	for k, csv in csvDataMap {
		e := exec.builder().
			cmd("env").
			writeFile("data.csv", csv).
			saveFile("data.csv").
			run()

		csvMap.createInputField(k).set(e.getFile("data.csv"))
	}
	csvMap = csvMap.lockAndBuild()


	// pfconv params
	params := inputs.params

	return {
		pf: xsv.importFileMap(csvMap, "csv", params)
	}
})
