/** API to retrieve assets packed with template code (like other templates). */

plapi := import("plapi")
json := import("json")
ll := import(":ll")
smart := import(":smart")


/**
 * Returns internal template identifier for loaded templates
 *
 * @param tplName: string - full name of a template, including namespace (package name).
 * Local templates (within the same package) can omit namespace part and start the name with colon:
 *  - "@company/package:someTemplateName"
 *  - ":myLocalTemplate"
 #
 * @return template id: resource id - a resource id of the template.
*/
importTemplate := func(tplName) {
	return smart.resource(plapi.getTemplateId(tplName))
}

/**
 * Returns software description suitable for 'exec' operations.
 *
 * @param swName: string - full name of the software description, including namespace (package name).
 * Local software definitions (within the same package) can omit namespace part and start the name with colon:
 *  - "@company/package:some-oftware"
 *  - ":my-local-software"
 #
 * @return softwareInfo: softwareInfo - structure with software info
*/
importSoftware := func(swName) {
	sw := plapi.getSoftwareInfo(swName)
	return {
		_type: "softwareDescriptor",

		id: sw.id,
		name: sw.name,
		version: sw.version,
		blobRef: sw.blobRef,
		descriptor: json.decode(sw.descriptor)
	}
}

export ll.toStrict({
	importTemplate: importTemplate,
	importSoftware: importSoftware
})
