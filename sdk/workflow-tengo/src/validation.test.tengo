slices := import(":slices")
ll := import(":ll")
validation := import(":validation")

assert := func(got, want, ...msg) {
	ll.assert(got == want, "got: %#v, want: %#v, msg: ", got, want, msg...)
}

TestValidateJSON := func() {
	schema := {
		"__options__,closed": "",
		"settings,omitempty": {
			"__options__,closed": "",
			"splitBy": {
				"__options__,closed": "",
				"chain,omitempty": "bool",
				"isotype,omitempty": "bool",
				"vGene,omitempty": "bool",
				"jGene,omitempty": "bool",
				"cGene,omitempty": "bool"
			}
		},
		"metrics,omitempty": [{
			"__options__,closed": "",
			"label": "string",
			"weight": `string,regex=Read|UMI|Cell`,
			"diversityMetric": `string,regex=Observed`,
			"downsampling": "any"
		}]
	}
	js := {
		settings: {
			splitBy: {
				chain: true,
				isotype: false,
				vGene: false,
				jGene: false,
				cGene: false
			}
		},
		metrics: [{
			label: "abc",
			weight: "Read",
			diversityMetric: "Observed",
			downsampling: {
				type: "DownsampleTop",
				abundanceMeasure: "Read",
				keepOutliers: true,
				topN: 10
			}
		}]
	}

	got := validation.checkJson(js, schema)

	assert(got, { result: true })
}
