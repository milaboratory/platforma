test := import(":test")
validation := import(":validation")
ll := import(":ll")

TestValidateJSONGeneral := func() {
	schema := {
		"__options__,closed": "",
		"settings,?": {
			"__options__,closed": "",
			"splitBy": {
				"__options__,closed": "",
				"chain,?": "bool",
				"isotype,?": "bool",
				"vGene,?": "bool",
				"jGene,?": "bool",
				"cGene,?": "bool"
			}
		},
		"metrics,?": [{
			"__options__,closed": "",
			"label": "string",
			"weight": `string,regex=Read|UMI|Cell`,
			"diversityMetric": `string,regex=Observed`,
			"downsampling": "any"
		}]
	}
	js := {
		settings: {
			splitBy: {
				chain: true,
				isotype: false,
				vGene: false,
				jGene: false,
				cGene: false
			}
		},
		metrics: [{
			label: "abc",
			weight: "Read",
			diversityMetric: "Observed",
			downsampling: {
				type: "DownsampleTop",
				abundanceMeasure: "Read",
				keepOutliers: true,
				topN: 10
			}
		}]
	}

	got := validation.checkJson(js, schema)

	test.isEqual(got, validation.success)
}

TestValidateJSONOrArrays := func() {
	schema := ["or", "bytes", "string", validation.reference]

	test.isEqual(validation.checkJson("aString", schema), validation.success)
	test.isEqual(validation.checkJson(bytes("bytes"), schema), validation.success)
	test.isEqual(validation.isValid(42, schema), false)
}

TestValidateJSONTree := func() {
	schema := undefined
	schema = ["or",
		{
			`type`: `string,regex=leaf`
		},
		{
			`type`: `string,regex=tree`,
			`leaves`: func(js, _, _) {
				return validation.checkJson(js, [schema])
			}
		}
		]

	js := {
		type: "tree",
		leaves: [
			{
				type: "leaf"
			},
			{
				type: "tree",
				leaves: [
					{
						type: "leaf"
					}
					]
			}
			]
	}
	test.isEqual(validation.checkJson(js, schema), validation.success)

	js = {
		type: "tree",
		leaves: [ "unknown" ]
	}
	ll.print(validation.isValid(js, schema))
	test.isFalse(validation.isValid(js, schema))
}
