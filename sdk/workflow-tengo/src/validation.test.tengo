test := import(":test")
validation := import(":validation")

TestValidateJSONGeneral := func() {
	schema := {
		"__options__,closed": "",
		"settings,?": {
			"__options__,closed": "",
			"splitBy": {
				"__options__,closed": "",
				"chain,?": "bool",
				"isotype,?": "bool",
				"vGene,?": "bool",
				"jGene,?": "bool",
				"cGene,?": "bool"
			}
		},
		"metrics,?": [{
			"__options__,closed": "",
			"label": "string",
			"weight": `string,regex=Read|UMI|Cell`,
			"diversityMetric": `string,regex=Observed`,
			"downsampling": "any"
		}]
	}
	js := {
		settings: {
			splitBy: {
				chain: true,
				isotype: false,
				vGene: false,
				jGene: false,
				cGene: false
			}
		},
		metrics: [{
			label: "abc",
			weight: "Read",
			diversityMetric: "Observed",
			downsampling: {
				type: "DownsampleTop",
				abundanceMeasure: "Read",
				keepOutliers: true,
				topN: 10
			}
		}]
	}

	got := validation.checkJson(js, schema)

	test.equal(got, validation.success)
}

TestValidateJSONOrArrays := func() {
	schema := ["or", "bytes", "string", validation.reference]

	test.equal(validation.checkJson("aString", schema), validation.success)
	test.equal(validation.checkJson(bytes("bytes"), schema), validation.success)
	test.equal(validation.isValid(42, schema), false)
}
