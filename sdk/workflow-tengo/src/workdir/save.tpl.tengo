// helper template to save files in a working dir

self := import(":tpl.light")
text := import("text")
smart := import(":smart")
wdSave := import(":workdir.save")
regexp := import(":regexp")
maps := import(":maps")

self.body(func(inputs) {

	wdBefore := inputs.workdir

	// simple 'save' rules
	files := inputs.files
	filesContent := inputs.filesContent

	// regex 'save' rules
	fileSets := inputs.fileSets
	fileSetsContent := inputs.fileSetsContent

	wdBuilder := wdSave.builder(wdBefore)

	for file in maps.getKeys(files) {
		wdBuilder.saveFile(file)
	}
	for content in maps.getKeys(filesContent) {
		wdBuilder.saveFileContent(content)
	}

	// calculate actual file sets:
	//
	//    name -> list of files
	//
	fileSetsMatch := {}
	fileSetsContentMatch := {}

	if len(fileSets) > 0 || len(fileSetsContent) > 0 {
		for k, _ in fileSets {
			fileSetsMatch[k] = []
		}

		for k, _ in fileSetsContent {
			fileSetsContentMatch[k] = []
		}

		// Pre-compile all regex patterns for better performance
		compiledFileSets := {}
		compiledFileSetsContent := {}

		for fSetName, regex in fileSets {
			compiledFileSets[fSetName] = regexp.compile(regex)
		}

		for fSetName, regex in fileSetsContent {
			compiledFileSetsContent[fSetName] = regexp.compile(regex)
		}

		// Get files list once
		files := wdBefore.getDataAsJson()["files"]

		for name in files {
			// Use pre-compiled regexes for matching
			maps.forEach(compiledFileSets, func(fSetName, compiledRegex) {
				if compiledRegex.match(name) {
					fileSetsMatch[fSetName] = append(fileSetsMatch[fSetName], name)
				}
			})

			maps.forEach(compiledFileSetsContent, func(fSetName, compiledRegex) {
				if compiledRegex.match(name) {
					fileSetsContentMatch[fSetName] = append(fileSetsContentMatch[fSetName], name)
				}
			})
		}

		maps.forEach(fileSetsMatch, func(_, list) {
			for file in list {
				wdBuilder.saveFile(file)
			}
		})

		maps.forEach(fileSetsContentMatch, func(_, list) {
			for file in list {
				wdBuilder.saveFileContent(file)
			}
		})
	}

	wd := wdBuilder.build()

	filesResult := wd.getSavedFiles()
	filesContentResult := wd.getSavedFilesContent()

	fileSetsResult := smart.mapBuilder()
	maps.forEach(fileSetsMatch, func(fSetName, list) {
		r := smart.mapBuilder()
		for f in list {
			r.addRef(f, filesResult.getFutureInputField(f))
		}
		fileSetsResult.addRef(fSetName, r.build())
	})

	fileSetsContentResult := smart.mapBuilder()
	maps.forEach(fileSetsContentMatch, func(fSetName, list) {
		r := smart.mapBuilder()
		for f in list {
			r.addRef(f, filesContentResult.getFutureInputField(f))
		}
		fileSetsContentResult.addRef(fSetName, r.build())
	}

	return {
		files           : filesResult,
		filesContent    : filesContentResult,
		fileSets        : fileSetsResult.build(),
		fileSetsContent : fileSetsContentResult.build(),
		workdir         : wd.getWorkdirAfter(),
		progress        : wd.getProgress()
	}
})
