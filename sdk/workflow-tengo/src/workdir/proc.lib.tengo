/** Library for workdir processor templates */

tpl := import(":tpl.light")
ll := import(":ll")
wdSave := import(":workdir.save")

// the template has a defined outputs
tpl.defineOutputs(["result", "workdir"])

proc := func() {
	self := undefined

	self = {

		_wdBefore: undefined,
		/**
		 * @return wd: resource - initial working directory resource
		 */
		wdBefore: func() {
			if is_undefined(self._wdBefore) {
				self._wdBefore = tpl.inputs().workdir
			}
			return self._wdBefore
		},

		_filesInWd: undefined,
		/**
		 * @return fileNames: string[] - list of file paths currently existing in the working directory
		 */
		filesInWd: func() {
			if is_undefined(self._filesInWd) {
				self._filesInWd = self.wdBefore().getDataAsJson().files
			}

			return self._filesInWd
		},

		_wdAfterReadFiles: undefined,
		/**
		 * @return wd: resource - working directory resource after "readFiles" is done
		 */
		wdAfterReadFiles: func() {
			if is_undefined(self._wdAfterReadFiles) {

				if !is_undefined(tpl.inputs().wdAfterReadFiles) {

					//
					// this means readFiles was used and we are actually
					// in the 'prepare' render
					//
					self._wdAfterReadFiles = tpl.inputs().wdAfterReadFiles
				} else {

					// no readFiles
					self._wdAfterReadFiles = self.wdBefore()
				}
			}

			return self._wdAfterReadFiles
		},

		/**
		 * Select files to read their content and pass it to the body function
		 *
		 * @param cb: callback - a callback which takes a list of file names (paths) existing in the working directory and
		 *  returning a map of key -> file name containing files to get content from; each file content will be available in
		 *  the body inputs with the corresponding key
		 */
		readFiles: func(cb) {
			tpl.prepare(func(inputs){
				inputs.files = self.filesInWd()
				// key -> file name
				files := cb(inputs)

				wdBuilder := wdSave.builder(self.wdBefore())
				for _, fName in files {
					wdBuilder.saveFileContent(fName)
				}
				wd := wdBuilder.build()

				// run prepare to get file contents in the inputs
				preps := {}
				for key, fName in files {
					preps[key] = wd.getSavedFileContent(fName)
				}

				preps.wdAfterReadFiles = wd.getWorkdirAfter()

				return preps
			})
		},

		_wdFinalBuilder: undefined,
		/**
		 * Final workdir builder, after prepare
		 */
		wdFinalBuilder: func() {
			if is_undefined(self._wdFinalBuilder) {
				self._wdFinalBuilder = wdSave.builder(self.wdAfterReadFiles())
			}
			return self._wdFinalBuilder
		},

		/**
		 * Save given file.
		 *
		 * @return ref: reference - a reference to saved file resource
		 */
		saveFile: func(fName) {
			self.wdFinalBuilder().saveFile(fName)
			return self.wdFinalBuilder().getSavedFile(fName)
		},

		/**
		 * Save content of a given file.
		 *
		 * @return ref: reference - a reference to saved file content value resource
		 */
		saveFileContent: func(fName) {
			self.wdFinalBuilder().saveFileContent(fName)
			return self.wdFinalBuilder().getSavedFileContent(fName)
		},

		/**
		 * Template body function
		 *
		 * @param cb: func - a callback function to run in template body; the inputs passed to the body will have the following fields:
		 *   files: string[] - list of files in workdir
		 *   args: map - additional arguments of the template processor
		 *   ...filesContent: resources - fields with the content of files specified in 'readFiles'
		 */
		body: func(cb) {
			tpl.body(func(inputs) {

				inputs.files = self.filesInWd()
				result := cb(inputs)
				wd := self.wdFinalBuilder().build()

				return {
					result: result,
					workdir: wd.getWorkdirAfter()
				}
			})
		}
	}

	return ll.toStrict(self)
}

/** singleton instance  */
instance := proc()

export ll.toStrict({
	readFiles: instance.readFiles,
	saveFile: instance.saveFile,
	saveFileContent: instance.saveFileContent,
	body: instance.body
})
