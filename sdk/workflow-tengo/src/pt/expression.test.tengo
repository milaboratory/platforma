test := import(":test")
pt := import(":pt")

// Helper to get the raw expression for easier comparison
getExpr := func(exprObj) {
	return exprObj.getExpression()
}

// Helper for checking alias (and that getAlias doesn't throw for defined aliases)
getAlias := func(exprObj) {
    return exprObj.getAlias()
}

TestBasicExpressions := func() {
	c1 := pt.col("age")
	test.isEqual(getExpr(c1), {type: "col", name: "age"})
	test.isEqual(getAlias(c1), "age")

	l_num := pt.lit(10)
	test.isEqual(getExpr(l_num), {type: "const", value: 10})

	l_str := pt.lit("hello")
	test.isEqual(getExpr(l_str), {type: "const", value: "hello"})

	l_bool := pt.lit(true)
	test.isEqual(getExpr(l_bool), {type: "const", value: true})

	l_null := pt.lit(undefined)
	test.isEqual(getExpr(l_null), {type: "const", value: undefined})
}

TestArithmeticExpressions := func() {
	age := pt.col("age")
	salary := pt.col("salary")
	bonus := pt.lit(100)

	expr1 := age.plus(pt.lit(10))
	test.isEqual(getExpr(expr1), {type: "plus", lhs: {type: "col", name: "age"}, rhs: {type: "const", value: 10}})

	expr2 := salary.multiply(pt.lit(1.1))
	test.isEqual(getExpr(expr2), {type: "multiply", lhs: {type: "col", name: "salary"}, rhs: {type: "const", value: 1.1}})

	expr3 := age.minus(pt.lit(5)).truediv(pt.lit(2))
	test.isEqual(getExpr(expr3), {
		type: "truediv",
		lhs: {type: "minus", lhs: {type: "col", name: "age"}, rhs: {type: "const", value: 5}},
		rhs: {type: "const", value: 2}
	})

	expr4 := bonus.negate()
	test.isEqual(getExpr(expr4), {type:"negate", value: {type: "const", value: 100}})
}

TestComparisonExpressions := func() {
	age := pt.col("age")
	height := pt.col("height")

	expr1 := age.gt(pt.lit(18))
	test.isEqual(getExpr(expr1), {type: "gt", lhs: {type: "col", name: "age"}, rhs: {type: "const", value: 18}})

	expr2 := height.le(pt.lit(180))
	test.isEqual(getExpr(expr2), {type: "le", lhs: {type: "col", name: "height"}, rhs: {type: "const", value: 180}})

	expr3 := age.eq(height)
	test.isEqual(getExpr(expr3), {type: "eq", lhs: {type: "col", name: "age"}, rhs: {type: "col", name: "height"}})
}

TestLogicalExpressions := func() {
	isAdult := pt.col("isAdult")
	isStudent := pt.col("isStudent")
	hasDiscount := pt.col("hasDiscount")

	expr1 := isAdult.and(isStudent)
	test.isEqual(getExpr(expr1), {
		type: "and",
		operands: [
			{type: "col", name: "isAdult"},
			{type: "col", name: "isStudent"}
		]
	})

	expr2 := isAdult.or(hasDiscount)
	test.isEqual(getExpr(expr2), {
		type: "or",
		operands: [
			{type: "col", name: "isAdult"},
			{type: "col", name: "hasDiscount"}
		]
	})

	expr3 := isStudent.not()
	test.isEqual(getExpr(expr3), {type: "not", value: {type: "col", name: "isStudent"}})

	expr4 := pt.allHorizontal(isAdult, isStudent, hasDiscount.not())
	test.isEqual(getExpr(expr4), {
		type: "and",
		operands: [
			{type: "col", name: "isAdult"},
			{type: "col", name: "isStudent"},
			{type: "not", value: {type: "col", name: "hasDiscount"}}
		]
	})
    expr4_alias := pt.and(isAdult, isStudent, hasDiscount.not())
    test.isEqual(getExpr(expr4_alias), getExpr(expr4))

	expr5 := pt.anyHorizontal(isAdult, isStudent, hasDiscount)
	test.isEqual(getExpr(expr5), {
		type: "or",
		operands: [
			{type: "col", name: "isAdult"},
			{type: "col", name: "isStudent"},
			{type: "col", name: "hasDiscount"}
		]
	})
    expr5_alias := pt.or(isAdult, isStudent, hasDiscount)
    test.isEqual(getExpr(expr5_alias), getExpr(expr5))
}

TestStringExpressions := func() {
	name := pt.col("name")
	firstName := pt.col("firstName")
	lastName := pt.col("lastName")

	expr1 := name.strToUpper()
	test.isEqual(getExpr(expr1), {type: "to_upper", value: {type: "col", name: "name"}})

	expr2 := pt.concatStr([firstName, " ", lastName], {delimiter: " "})
	test.isEqual(getExpr(expr2), {
		type: "str_join",
		operands: [
			{type: "col", name: "firstName"},
			{type: "const", value: " "},
			{type: "col", name: "lastName"}
		],
		delimiter: " "
	})

    expr3 := name.strLenChars()
    test.isEqual(getExpr(expr3), {type: "str_len", value: {type: "col", name: "name"}})

    expr4 := name.strSlice(0, 5)
    test.isEqual(getExpr(expr4), {type: "substring", value: {type: "col", name: "name"}, start: {type: "const", value: 0}, length: {type: "const", value: 5}})

    // New string functions tests
    expr5 := name.strContains("hello")
    test.isEqual(getExpr(expr5), {type: "str_contains", value: {type: "col", name: "name"}, pattern: {type: "const", value: "hello"}, literal: false, strict: true})

    expr6 := name.strContains("hello", {literal: true, strict: false})
    test.isEqual(getExpr(expr6), {type: "str_contains", value: {type: "col", name: "name"}, pattern: {type: "const", value: "hello"}, literal: true, strict: false})

    expr7 := name.strContainsAny(["apple", "banana"])
    test.isEqual(getExpr(expr7), {type: "str_contains_any", value: {type: "col", name: "name"}, patterns: ["apple", "banana"], asciiCaseInsensitive: false})

    expr8 := name.strContainsAny(["apple", "banana"], {asciiCaseInsensitive: true})
    test.isEqual(getExpr(expr8), {type: "str_contains_any", value: {type: "col", name: "name"}, patterns: ["apple", "banana"], asciiCaseInsensitive: true})

    expr9 := name.strCountMatches("a")
    test.isEqual(getExpr(expr9), {type: "str_count_matches", value: {type: "col", name: "name"}, pattern: {type: "const", value: "a"}, literal: false})

    expr10 := name.strCountMatches("a", {literal: true})
    test.isEqual(getExpr(expr10), {type: "str_count_matches", value: {type: "col", name: "name"}, pattern: {type: "const", value: "a"}, literal: true})

    expr11 := name.strExtract("(\\w+)")
    test.isEqual(getExpr(expr11), {type: "str_extract", value: {type: "col", name: "name"}, pattern: {type: "const", value: "(\\w+)"}, groupIndex: 0})

    expr12 := name.strExtract("(\\w+)@(\\w+)", {groupIndex: 2})
    test.isEqual(getExpr(expr12), {type: "str_extract", value: {type: "col", name: "name"}, pattern: {type: "const", value: "(\\w+)@(\\w+)"}, groupIndex: 2})

    expr13 := name.strStartsWith("Mr.")
    test.isEqual(getExpr(expr13), {type: "str_starts_with", value: {type: "col", name: "name"}, prefix: {type: "const", value: "Mr."}})

    expr14 := name.strEndsWith(".com")
    test.isEqual(getExpr(expr14), {type: "str_ends_with", value: {type: "col", name: "name"}, suffix: {type: "const", value: ".com"}})
}

TestWindowExpressions := func() {
	salary := pt.col("salary")
	department := pt.col("department")
	employeeId := pt.col("employeeId")

	expr1 := salary.sum().over("department")
	test.isEqual(getExpr(expr1), {
		type: "aggregate",
		aggregation: "sum",
		value: {type: "col", name: "salary"},
		partitionBy: [{type: "col", name: "department"}]
	})

	expr2 := pt.rank(salary, {descending: true}).over(department)
	test.isEqual(getExpr(expr2), {
		type: "rank",
		orderBy: [{type: "col", name: "salary"}],
		partitionBy: [{type: "col", name: "department"}],
		descending: true
	})

    expr3 := salary.cumsum({orderBy: employeeId}).over(department)
    test.isEqual(getExpr(expr3), {
        type: "cumsum",
        value: {type:"col", name:"salary"},
        additionalOrderBy: [{type:"col", name:"employeeId"}],
        partitionBy: [{type:"col", name:"department"}],
        descending: false
    })

    expr4 := salary.cumsum({orderBy: [employeeId], descending: true}).over(department)
     test.isEqual(getExpr(expr4), {
        type: "cumsum",
        value: {type:"col", name:"salary"},
        additionalOrderBy: [{type:"col", name:"employeeId"}],
        partitionBy: [{type:"col", name:"department"}],
        descending: true
    })
}

TestConditionalExpressions := func() {
	age := pt.col("age")
	score := pt.col("score")

	expr1 := pt.when(age.gt(pt.lit(60))).
		then(pt.lit("senior")).
		when(age.gt(pt.lit(18))).
		then(pt.lit("adult")).
		otherwise(pt.lit("minor"))

	expected1 := {
		type: "when_then_otherwise",
		conditions: [
			{when: {type: "gt", lhs: {type: "col", name: "age"}, rhs: {type: "const", value: 60}}, then: {type: "const", value: "senior"}},
			{when: {type: "gt", lhs: {type: "col", name: "age"}, rhs: {type: "const", value: 18}}, then: {type: "const", value: "adult"}}
		],
		otherwise: {type: "const", value: "minor"}
	}
	test.isEqual(getExpr(expr1), expected1)

    // Test immutability of when/then
    whenBuilder1 := pt.when(score.gt(pt.lit(90)))
    thenBuilder1 := whenBuilder1.then(pt.lit("A"))

    finalExprA := thenBuilder1.otherwise(pt.lit("B_OR_C"))

    // This should not affect finalExprA
    finalExprB := thenBuilder1.when(score.gt(pt.lit(80))).then(pt.lit("B")).otherwise(pt.lit("C"))

    expectedA := {
        type: "when_then_otherwise",
        conditions: [
            {when: {type:"gt", lhs:{type:"col", name:"score"}, rhs:{type:"const", value:90}}, then:{type:"const", value:"A"}}
        ],
        otherwise: {type:"const", value:"B_OR_C"}
    }
    test.isEqual(getExpr(finalExprA), expectedA, "Immutable WhenThen A")

    expectedB := {
        type: "when_then_otherwise",
        conditions: [
            {when: {type:"gt", lhs:{type:"col", name:"score"}, rhs:{type:"const", value:90}}, then:{type:"const", value:"A"}},
            {when: {type:"gt", lhs:{type:"col", name:"score"}, rhs:{type:"const", value:80}}, then:{type:"const", value:"B"}}
        ],
        otherwise: {type:"const", value:"C"}
    }
     test.isEqual(getExpr(finalExprB), expectedB, "Immutable WhenThen B")
}

TestAliasing := func() {
	age := pt.col("age")

	aliasedAge := age.alias("yearsOld")
	test.isEqual(getExpr(aliasedAge), {type: "col", name: "age"})
	test.isEqual(getAlias(aliasedAge), "yearsOld")

	calculated := age.plus(pt.lit(5)).alias("ageInFiveYears")
	test.isEqual(getExpr(calculated), {type: "plus", lhs: {type: "col", name: "age"}, rhs: {type: "const", value: 5}})
	test.isEqual(getAlias(calculated), "ageInFiveYears")

    litVal := pt.lit(100).alias("hundred")
    test.isEqual(getExpr(litVal), {type:"const", value:100})
    test.isEqual(getAlias(litVal), "hundred")

    sumSalary := pt.col("salary").sum().over("dept").alias("total_dept_salary")
    test.isEqual(getAlias(sumSalary), "total_dept_salary")
    test.isEqual(getExpr(sumSalary).type, "aggregate")
}

TestChainingAndComplex := func() {
    name := pt.col("name")
    age := pt.col("age")
    country := pt.col("country")

    complexStr := name.strToUpper().plus(pt.lit("_processed")).alias("processedName")

    condition := age.gt(pt.lit(18)).and(country.eq(pt.lit("USA")))
    condition = condition.or(age.lt(pt.lit(10)))

    finalExpr := pt.when(condition).then(complexStr).otherwise(pt.lit("N/A"))

    expectedFinal := {
        type: "when_then_otherwise",
        conditions: [{
            when: {
                type: "or",
                operands: [
                    {
                        type: "and",
                        operands: [
                            {type: "gt", lhs: {type: "col", name: "age"}, rhs: {type: "const", value: 18}},
                            {type: "eq", lhs: {type: "col", name: "country"}, rhs: {type: "const", value: "USA"}}
                        ]
                    },
                    {type: "lt", lhs: {type: "col", name: "age"}, rhs: {type: "const", value: 10}}
                ]
            },
            then: {
                type: "plus",
                lhs: {type: "to_upper", value: {type: "col", name: "name"}},
                rhs: {type: "const", value: "_processed"}
            }
        }],
        otherwise: {type: "const", value: "N/A"}
    }
    test.isEqual(getExpr(finalExpr), expectedFinal)
}

TestRankWithOptions := func() {
    score1 := pt.col("score1")
    score2 := pt.col("score2")
    group := pt.col("group")

    rank1 := pt.rank(score1).over(group)
    test.isEqual(getExpr(rank1), {
        type: "rank",
        orderBy: [{type: "col", name: "score1"}],
        partitionBy: [{type:"col", name:"group"}],
        descending: false
    })

    rank2 := pt.rank(score1, {descending: true}).over(group)
    test.isEqual(getExpr(rank2), {
        type: "rank",
        orderBy: [{type: "col", name: "score1"}],
        partitionBy: [{type:"col", name:"group"}],
        descending: true
    })

    rank3 := pt.rank([score1, score2], { descending: false })

    test.isEqual(getExpr(rank3).orderBy, [
        {type: "col", name: "score1"},
        {type: "col", name: "score2"}
    ])
    test.isEqual(getExpr(rank3).descending, false)

    rank4 := pt.rank([score1, score2], {descending: true}).over(group)
     test.isEqual(getExpr(rank4).orderBy, [
        {type: "col", name: "score1"},
        {type: "col", name: "score2"}
    ])
    test.isEqual(getExpr(rank4).descending, true)
}

TestSelectWithStrings := func() {
    wf := pt.workflow()

    df := wf.frame("col1,col2,col3\n1,2,3", {xsvType: "csv", id: "testData"})

    selectedDf1 := df.select("col1", "col2")

    selectedDf2 := df.select(
        "col1",
        pt.col("col2").plus(pt.lit(10)).alias("col2_plus_10")
    )

    selectedDf3 := df.select(
        pt.col("col1"),
        pt.col("col3").alias("renamed_col3")
    )

    // Test 4: Verify internal column mapping for mixed case
    testExprs := ["col1", pt.col("col2").plus(pt.lit(10)).alias("col2_plus_10")]

    expectedCols := [
        {name: "col1", expression: {type: "col", name: "col1"}},
        {name: "col2_plus_10", expression: {type: "plus", lhs: {type: "col", name: "col2"}, rhs: {type: "const", value: 10}}}
    ]

    // If we could access the internal mapping function, we would test it directly
    // For now, we ensure that the select operations can be constructed without errors
}

TestNdjsonReading := func() {
    wf := pt.workflow()

    // Test NDJSON string content
    ndjsonContent := `{"id": 1, "name": "Alice"}
{"id": 2, "name": "Bob"}`
    df := wf.frame(ndjsonContent, {format: "ndjson", id: "testNdjson"})

    // Test with nRows limit
    dfLimited := wf.frame(ndjsonContent, {format: "ndjson", nRows: 1, id: "testNdjsonLimited"})

    // Test with ignoreErrors
    dfIgnoreErrors := wf.frame(ndjsonContent, {format: "ndjson", ignoreErrors: true, id: "testNdjsonIgnoreErrors"})

    // Test with schema override
    dfWithSchema := wf.frame(ndjsonContent, {
        format: "ndjson",
        schema: [{column: "id", type: "Int64"}],
        id: "testNdjsonWithSchema"
    })
}

TestNdjsonAutoDetection := func() {
    wf := pt.workflow()

    // Test auto-detection from fileName with content
    ndjsonContent := `{"id": 1, "name": "Alice"}`

    // Test auto-detection from .ndjson extension
    dfNdjson := wf.frame(ndjsonContent, {fileName: "test.ndjson", id: "autoDetectNdjson"})

    // Test auto-detection from .jsonl extension
    dfJsonl := wf.frame(ndjsonContent, {fileName: "test.jsonl", id: "autoDetectJsonl"})

    // Test CSV auto-detection still works
    csvContent := "col1,col2\n1,2"
    dfCsv := wf.frame(csvContent, {fileName: "data.csv", id: "autoDetectCsv"})
}

TestFormatBackwardCompatibility := func() {
    wf := pt.workflow()

    // Old xsvType should still work
    df1 := wf.frame("data.csv", {xsvType: "csv", id: "backwardCsv"})

    // New format should work
    df2 := wf.frame("data.csv", {format: "csv", id: "newFormatCsv"})

    // format overrides xsvType
    df3 := wf.frame("data.json", {xsvType: "csv", format: "ndjson", id: "formatOverrides"})

    // Test that both parameters work together correctly
    df4 := wf.frame("test_content", {xsvType: "tsv", fileName: "test.tsv", id: "bothParams"})
}

TestNdjsonWriting := func() {
    wf := pt.workflow()
    df := wf.frame("col1,col2\n1,2", {format: "csv", id: "testData"})

    // Test auto-detection for NDJSON writing
    df.save("output.ndjson")
    df.save("output.jsonl")

    // Test explicit format parameter
    df.save("data.txt", {format: "ndjson"})

    // Test format overriding extension
    df.save("data.csv", {format: "ndjson"})

    // Test backward compatibility for writing
    df.save("legacy.csv", {xsvType: "csv"})

    // Test column selection with NDJSON
    df.save("subset.ndjson", {columns: ["col1"]})

    // Test saveContent with NDJSON
    df.saveContent("content.ndjson")
}

TestNdjsonParameterValidation := func() {
    wf := pt.workflow()

    // These should work without error
    df1 := wf.frame("test", {format: "ndjson", id: "valid1"})
    df2 := wf.frame("test", {format: "csv", nRows: 100, id: "valid2"})
    df3 := wf.frame("test", {format: "tsv", ignoreErrors: false, id: "valid3"})

    // Test that the new parameters are properly validated
    // Note: In a real test environment, we would test that invalid parameters cause panics
    // For now, we just ensure valid parameters don't cause issues
}
