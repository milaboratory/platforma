tx := import("tx")
plapi := import("plapi")
json := import("json")
proc := import(":proc")
map := import(":map")

field := undefined

isFieldID := func(val) {
	return plapi.isStrictMap(val) && plapi.strictToMap(val)["ResourceID"] != undefined
}

/**
 * @param r either resource id or resource info
 */
resource := func(r) {
	self := undefined

	ID := plapi.isStrictMap(r) ? r.ID : r

	if ID == 0 {
		proc.panic("null resource id")
	}

	self = {
		_type: "resource",

		ID: ID,

		info: func() {
			return tx.getResource(self.ID)
		},

		_hasField: func(fieldMapName, fieldName) {
			return self.info()[fieldMapName][fieldName] != undefined
		},

		hasInputField: func(name) {
			return self._hasField("Inputs", name)
		},

		hasOutputField: func(name) {
			return self._hasField("Outputs", name)
		},

		hasField: func(name) {
			return self._hasField("Inputs", name) ||
			       self._hasField("Outputs", name) ||
				   self._hasField("DynamicFields", name) ||
				   self._hasField("OneTimeWritables", name)
		},

		_inputs: undefined,
		inputs: func() {
			if(self._inputs == undefined) {
				info := self.info()
				inputs := map.mapV(info.Inputs, field)
				if !info.InputsLocked {
					return inputs
				}
				self._inputs = inputs
			}
			return self._inputs
		},

		_outputs: undefined,
		outputs: func() {
			if(self._outputs == undefined) {
				info := self.info()
				outputs := map.mapV(info.Outputs, field)
				if !info.OutputsLocked {
					return outputs
				}
				self._outputs = outputs
			}
			return self._outputs
		},

		createField: func(name, fieldType) {
			fID := plapi.newFieldID(self.ID, name)
			tx.createField(fID, fieldType)
			return field(fID)
		},

		getField: func(name) {
			return field(plapi.newFieldID(self.ID, name))
		},

		getFutureField: func(name, fieldType) {
			return tx.createFutureFieldID(fieldType, name).ResultFID
		},

		lockOutputs: func() {
			tx.lockOutputs(self.ID)
		},

		get: func(name) {
			return self.getField(name).getValue()
		},

		getDataAsJSON: func() {
			return json.decode(self.info().Data);
		}
	}

	return plapi.mapToStrict(self)
}

field = func(f) {
	self := undefined

	self = {
		_type: "field",

		ID: isFieldID(f) ? f : f.ID,

		info: func() {
			return tx.getField(self.ID)
		},

		isSet: func() {
			return self.info().IsSet
		},

		isValueSet: func() {
			return self.info().Value != 0
		},

		isErrorSet: func() {
			return self.info().Error != 0
		},

		getValue: func() {
			return resource(self.info().Value)
		},

		getError: func() {
			return resource(self.info().Error)
		},

		// set: func(ref) {
		// 	if ref is Resource
		// }

		setJSON: func(value) {
			encoded := json.encode(value)
			rID := tx.createValue("json/object", "1", encoded)
			tx.setFieldToResource(self.ID, rID)
		},

		getJSON: func() {
			return self.getValue().getDataAsJSON()
		}
	}

	return plapi.mapToStrict(self)
}

export {
	resource: resource,
	field: field
}
