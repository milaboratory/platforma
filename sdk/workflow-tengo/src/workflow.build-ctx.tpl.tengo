//
// Utility template to build context and flatten context resources
//

tpl := import(":tpl")
context := import(":context")
validation := import(":validation")
ll := import(":ll")
wf := import(":workflow")

// await all exports to appear as data fields
tpl.awaitState("data", { wildcard: "*" }, "InputsLocked")

tpl.body(func(inputs) {
    
    // assert inputs
    validation.assertArgsSchema(inputs,
        {
            blockId: `string`,
            parentContext: validation.resource,
            data: `any`
        }
    )
	// create ctx and save exports
	ctxBuilder := context.builder(inputs.blockId, inputs.parentContext)
    
	for prefix, map in inputs.data {
        ll.assert(is_map(map), "expected map, got ", map)

        for key, value in map {
            if prefix == "_" { // @TODO use constant
                ctxBuilder.add(key, value)    
            } else {
                ctxBuilder.add(prefix + "." + key, value)
            }
        }
	}

    return {
        ctx: ctxBuilder.build()
    }
})
