/* Low level pl API */


plapi := import("plapi")
fmt := import("fmt")
log := import("log")


/**
 * Prints message to the pl log
 */
print := func(txt, ...args) {
	plapi.print(txt, args...)
}

/**
 * Panics in a template, prints the error and
 * stops the execution of the template.
 * After that, the controller will set errors to outputs.
 */
panic := func(msg, ...args) {
	txt := fmt.sprintf(msg, args...)
	plapi.print(txt)

	// next statement actually terminates the execution
	plapi.setTemplateError(txt)
}

/**
 * Asserts given condition and panics
 */
assert := func(condition, msg, ...args) {
	if !condition {
		panic("assertion error: condition failed: "+msg, args...)
	}
}

/**
 * Checks whether the given object is a strict map
 *
 * @param obj any
 * @return strict: bool - whether obj is a 'strict' map
 */
isStrict := func(obj) {
	return plapi.isStrictMap(obj)
}

/**
 * Checks whether the given object is a map, a strict map or an immutable map.
 *
 * @param obj any
 * @return bool whether obj is any kind of map object (map/immutable map/strict map)
 */
isMap := func(obj) {
	return is_map(obj) || is_immutable_map(obj) || isStrict(obj)
}

/**
 * Converts 'strict' map into a normal one
 *
 * @param r 'strict' map (will panic if not)
 * @return map std map
 */
fromStrict := func(r) {
	if !isStrict(r) {
		panic("not a map", r)
	}

	return plapi.strictToMap(r)
}

/**
 * If input is a strict map, converts it to a normal one, otherwise returns the object as is
 *
 * @param r: any object (possible strict map)
 * @return map: tengo object
 */
ensureNonStrict := func(r) {
	if isStrict(r) {
		return fromStrict(r)
	}

	return r
}

/**
 * Converts map into a 'strict' map, which will panic on
 * access to non-existing elements.
 * @return strict map
 */
toStrict := func(r) {
	if(!is_map(r)) {
		panic("not a map", r)
	}
	return plapi.mapToStrict(r)
}

/**
 * Creates a field Id struct from given resource id and field name
 */
fieldId := func(resourceId, fieldName) {
	return plapi.newFieldID(resourceId, fieldName)
}

/**
 * Returns current template renderer
 */
getCurrentTemplateRenderer := func() {
	return plapi.getTemplate()
}

/**
 * @return isInit: bool - true when current template is initializing (executed for the first time)
 */
isInitializing := func() {
	return plapi.isInit
}

/**
 * Returns internal template identifier for loaded templates
 *
 * @param tplName: string - a name of a local template with a starting colon,
 * e.g. ":directory1/template1"
 * @return template id: resource id - a resource id of the template.
 */
importTemplate := func(tplName) {
	return plapi.getTemplateId(tplName)
}

export toStrict({
	print: print,
	panic: panic,
	assert: assert,
	isStrict: isStrict,
	isMap: isMap,
	fromStrict: fromStrict,
	ensureNonStrict: ensureNonStrict,
	toStrict: toStrict,
	fieldId: fieldId,
	getCurrentTemplateRenderer: getCurrentTemplateRenderer,
	isInitializing: isInitializing,
	importTemplate: importTemplate
})
