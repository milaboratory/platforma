/**
 * Functions to work with blobs / files.
 *
 * Allowing to create resources to import files from configured storages
 * as well as creation of resources to facilitate file upload from the
 * users machine.
 *
 * This library exposes rather high level functions working with
 * ImportFileHandle, encoding user intent to import a file from a pl-wide
 * configured storage or to upload file from users side in a universal
 * string representation.
 */

ll := import(":ll")
smart := import(":smart")
validation := import(":validation")
blobs := import(":file.internal")

json := import("json")

/**
 * Imports an external file into the workflow, either from pre-configured storage,
 * available from the pl instance, or from the client machine via upload.
 *
 * @param importFileHandle string a string file import handle, in most cases obtained via the
 *                         LS controller in UI
 *
 * @return a structure with two field references
 *         {
 *             file: field,
 *             handle: field
 *         }
 */
importFile := func(importFileHandle) {
	validation.assertJsonSchema(
		importFileHandle,
		`string,regex=^(upload://upload/.*|index://index/.*)`
	)

	url := ll.parseUrl(importFileHandle)
	path := url.Path[1:] // trim  "/"

	settings := json.decode(path)

	if url.Scheme == "upload" {
		ll.assert(url.Host == "upload", "wrong 'host' in import file handle. Expected: 'upload', found: '", url.Host, "'")
		return blobs.createBlobUpload(settings)
	} else if url.Scheme == "index" {
		ll.assert(url.Host == "index", "wrong 'host' in import file handle. Expected 'index', found: '", url.Host, "'")
		return blobs.createBlobImportInternal(settings)
	} else if (url.Scheme == "download") {
		ll.assert(url.Host == "download", "wrong 'host' in import file handle. Expected: 'download', found: '", url.Host, "'")
		return blobs.createBlobImportExternal(settings)
	} else {
		ll.panic("Unknown file import handle schema: ", url.Scheme)
	}
}

/**
 * Given a reference to the file, converts it into resource that can be
 * downloaded from the UI side.
 */
exportFile := func(blob) {
	builder := smart.structBuilder(blobs.RTYPE_BLOB_DOWNLOAD)

	builder.createInputField("blob").set(blob)

	downloader := builder.lockAndBuild()

	return downloader.getField("downloadable")
}

export ll.toStrict({
	importFile: importFile,
	exportFile: exportFile
})
