ll := import(":ll")
slices := import(":slices")

/**
 * Returns a slice of keys of the map.
 *
 * @param map map[string]any - map to extract keys from
 * @return result: string[] - a slice of keys.
 */
getKeys := func(map) {
	res := []
	for k, _ in map {
		res = append(res, k)
	}

	return slices.quickSort(res)
}

/**
 * Returns true if map contains specified key.
 * Note: fallback implementation is O(N). You can remove it after 05.2025
 */
containsKey := func(map, key) {
	for k, _ in map {
		if key == k {
			return true
		}
	}

	return false
}

// Load effective version of map key checker if it exists in controller's API
plapi := import("plapi")
if ll.methodExists(plapi, "mapHasKey") {
	containsKey = func(map, key) {
		return plapi.mapHasKey(map, key)
	}
}

/**
 * Transforms all keys of the map with a function and returns a new map with these keys.
 *
 * @param map: map[key]any
 * @param fnK: func(key): newKey - a function that gets a key and returns a new key.
 * @return new map: map[newKey]any - a transformed map
 */
mapKeys := func(map, fnK) {
	newM := {}
	for k, v in map {
		newM[fnK(k)] = v
	}

	return newM
}

// Map values
mapValues := func(map, fnV) {
	newM := {}
	for k, v in map {
		newM[k] = fnV(v)
	}

	return newM
}

// Map keys and values
map := func(map, fn) {
	newM := {}
	for k, v in map {
		r := fn(k, v)
		newM[r.key] = r.value
	}

	return newM
}

filter := func(map, predicateFn) {
	newM := {}
	for k, v in map {
		if predicateFn(k, v) {
			newM[k] = v
		}
	}

	return newM
}

filterValues := func(map, predicateFnV) {
	return filter(map, func(k, v) { return predicateFnV(v) })
}

filterKeys := func(map, predicateFnK) {
	return filter(map, func(k, v) { return predicateFnK(k) })
}

filterKeysValues := func(map, predicateFnK, predicateFnV) {
	return filter(map, func(k, v) { return predicateFnK(k) && predicateFnV(v) })
}

/**
 * Returns a deep copy of a map or an array.
 * Optionally removes keys having undefined value.
 *
 * @param obj 	- object to be cloned
 * @param ops 	- additional options
 *					{
 *						removeUndefs: boolean
 *					}
 */
clone := func(obj, ...ops) {
	removeUndefs := false
	if len(ops) == 1 {
		removeUndefs = ops[0].removeUndefs
	}

	if is_map(obj) || ll.isStrict(obj) {
		res := {}
		strict := ll.isStrict(obj)
		if strict {
			obj = ll.fromStrict(obj)
		}
		for k, v in obj {
			if !removeUndefs || !is_undefined(v) {
				res[k] = clone(v, ops...)
			}
		}
		if strict {
			return ll.toStrict(res)
		} else {
			return res
		}
	} else if is_array(obj) {
		res := []
		for v in obj {
			res = append(res, clone(v, ops...))
		}
		return res
	}

	return obj
}

/**
 * Do shallow merge of arbitrary number of maps.
 * Add {... key: undefined ...} to remove the "key" from the map collected from maps before.
 */
merge := func(...maps) {
	res := {}
	for map in maps {
		for k, v in map {
			if is_undefined(v) {
				delete(res, k)
			} else {
				res[k] = v
			}
		}
	}
	return res
}

/**
 * Do deep merge of arbitrary number of maps.
 * Add {... key: undefined ...} to remove the "key" from the map collected from maps before.
 */
deepMerge := undefined
deepMerge = func(...maps) {
	res := {}
	for map in maps {
		for k, v in map {
			if is_undefined(v) {
				delete(res, k)
			} else if is_map(res[k]) && is_map(v) {
				res[k] = deepMerge(res[k], v)
			} else {
				res[k] = v
			}
		}
	}
	return res
}

export ll.toStrict({
	map : map,
	merge: merge,
	deepMerge: deepMerge,
	clone: clone,
	mapKeys : mapKeys,
	mapValues : mapValues,
	filter : filter,
	filterValues : filterValues,
	filterKeys : filterKeys,
	filterKeysValues : filterKeysValues,
	getKeys: getKeys,
	containsKey: containsKey
})
