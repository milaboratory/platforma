//tengo:hash_override 6FB763E3-AB0C-4676-8F74-C7E23069DCCF

/**
 * Creates and fill a workdir, runs a command on it
 * and saves a chosen resulted files from this dir.
 */

self := import(":tpl")

ll := import(":ll")
feats := import(":feats")

smart := import(":smart")
render := import(":render")
workdir := import(":workdir")
stream := import(":exec.stream")
execInternal := import(":exec.internal")
limits := import(":exec.limits")
pkg := import(":exec.package")
validation := import(":validation")
blobs := import(":file.internal")
desc := import(":exec.descriptor")
constants := import(":exec.constants")
monetization := import(":exec.monetization_internal")

self.defineOutputs(
	"files",
	"filesContent",
	"fileSets",
	"fileSetsContent",
	"progress",
	"fileStreams",
	"wdProcessors"
)

_runBinaryCommand := func(inputs) {
	//
	// Create and fill the workdir with files that were passed from inputs.
	//

	wdBuilder := workdir.builder()

	quota := inputs.quota

	storageSpace := undefined
	if !is_undefined(quota) {
		storageSpace = limits.storageSpaceRequestBuilder().
			quota(quota).
			build()

		wdBuilder.allocation(storageSpace.allocation)
	}

	// add files
	wdBuilder.addFiles(inputs.filesToAdd)
	wdBuilder.mkDirs(inputs.dirsToCreate)

	// add assets
	archives := ll.toStrict({})
	for k, descriptor in inputs.assetDescriptors {
		assetBlob := blobs.createBlobImportExternal({
			dataURL: descriptor.asset.url
		}).file

		archives[k] = assetBlob
		if is_int(inputs.assetCache[k]) {
			assetBlob.setCache(inputs.assetCache[k])
		} else {
			assetBlob.setCacheDays(1)
		}
	}
	for k, archiveRules in inputs.assetRules {
		for dir, filesToExtract in archiveRules {
			wdBuilder.addFromZip(archives[k], dir, filesToExtract)
		}
	}
	// pass values as fields for saving the topology in pl-core
	// and avoiding deduplication issues:
	wdBuilder.writeFiles(self.rawInputs().filesToWrite.getValue().inputs())

	// working directory with input files added; before run
	wdWithAllFiles := wdBuilder.build()

	// run monetization if it's defined and return a workdir after.
	wdBefore := wdWithAllFiles
	mnzEnvs := {}
	mnzResult := {}
	mnz := ll.fromStrict(inputs.runOptions).monetization
	if !is_undefined(mnz) {
		result := monetization.run(mnz, wdWithAllFiles, inputs.runOptions.queue)
		wdBefore = result.wdAfter
		mnzEnvs[result.jwtEnvName] = result.jwtEnvValue
	}

	opts := execInternal.binaryRunOptions(inputs.runOptions, mnzEnvs)

	// Working directory after run environment preparation steps.
	// The same as wdBefore, but might get additional files if they are required for run environment,
	// like .Rprofile for R with activated renv.
	wdForCmd := execInternal.prepareWDForRunEnvironment(wdBefore, opts)

	//
	// Build runcmd resource
	//

	runBuilder := execInternal.prepareCommandRun(wdForCmd, opts)

	// Load secrets
	for envName, secretVar in inputs.runOptions.secrets {
		if feats.commandExpressions {
			runBuilder.envTyped(envName, constants.ARG_TYPE_EXPRESSION, secretVar)
		} else { // deprecated, remove after 15 Mar 2025
			runBuilder.envTyped(envName, constants.ARG_TYPE_VAR, secretVar)
		}
	}

	// exec command
	ll.assert(!is_undefined(ll.fromStrict(opts.cmd).type), opts.cmd)
	runBuilder.cmdTyped(opts.cmd.type, opts.cmd.value)

	// cmd args

	for name, arg in opts.args {
		runBuilder.argTyped(arg.type, arg.value)
	}

	// other options
	runBuilder.inQueue(opts.queue)
	runBuilder.stdout(opts.stdout)
	runBuilder.stderr(opts.stderr)
	runBuilder.nErrorLines(opts.nErrorLines)
	run := runBuilder.build()
	// get the workdir containing all the files, including produced by the run command
	wdAfter := run.workdir

	//
	// Run workdir processors
	//

	wdProcessorsResults := {}
	for name, p in inputs.wdProcessors {
		tpl := p.tpl
		tplInputs := {
			workdir: wdAfter,
			args: p.tplArgs
		}

		// render template & get results
		r := render.createEphemeral(tpl, tplInputs)

		wdProcessorsResults[name] = r.output("result")
		wdAfter = r.output("workdir")
	}

	//
	// Save data from the workdir
	//

	// saver resource
	wdSaver := workdir.save(wdAfter)
	// save files
	for fName in inputs.filesToSave {
		wdSaver.saveFile(fName)
	}
	// save files content
	for fName in inputs.filesContentToSave {
		wdSaver.saveFileContent(fName)
	}
	// save file sets
	for name, regex in inputs.fileSetsToSave {
		wdSaver.saveFileSet(name, regex)
	}
	// save file sets content
	for name, regex in inputs.fileSetsContentToSave {
		wdSaver.saveFileSetContent(name, regex)
	}

	// resulting wd
	wdResult := wdSaver.build()

	// create streams for all requested file streams.
	streams := smart.mapBuilder()
	for fName in inputs.filesToStream {
		streams.add(fName, stream.create(wdBefore, wdResult, fName))
	}

	return {
		files: wdResult.files,
		filesContent: wdResult.filesContent,
		fileSets: wdResult.fileSets,
		fileSetsContent: wdResult.fileSetsContent,
		fileStreams: streams.build(),
		wdProcessors: wdProcessorsResults,
		progress: wdResult.progress
	}
}

self.body(func(inputs) {
	// assert we have inputs we expect.
	validation.assertType(inputs, {
		"softwareInfo,?": validation.resource(),
		filesToAdd: { any: validation.resource() },
		filesToWrite: { any: validation.resource() },
		"dirsToCreate,?": ["string"],
		runOptions: {
			"software,?": pkg.softwareInfoScheme,
			"cmd,?": "string",
			args: ["string"],
			envs: { any: "string" },
			"argsTyped,?": [{type: "string", value: "string"}],
			"envsTyped,?": {"any": {type: "string", value: "string"}},
			secrets: { any: "string" },
			queue: "string",
			stdout: "string",
			stderr: "string",
			nErrorLines: "number",
			"monetization,?": monetization.schema
		},
		"saveFiles,?": ["string"],
		"saveFilesContents,?": ["string"],
		"streams,?": ["string"],
		"assets,?": { any: validation.resource() },
		"assetDescriptors,?": { any: {asset: desc.assetScheme } },
		"assetRules,?": { any: { any: ["string"] } },
		"assetCache,?": { any: "number" },

		// Service inputs
		"quota,?": validation.resource()
	})

	ll.toStrict(inputs)
	inputs.runOptions = ll.toStrict(inputs.runOptions)
	if !is_undefined(inputs.assets) {
		inputs.assets = ll.toStrict(inputs.assets)
	}
	if (!is_undefined(inputs.assetDescriptors)) {
		inputs.assetDescriptors = ll.toStrict(inputs.assetDescriptors, true)
	}
	if (!is_undefined(inputs.assetRules)) {
		inputs.assetRules = ll.toStrict(inputs.assetRules, true)
	}

	return _runBinaryCommand(inputs)
})
