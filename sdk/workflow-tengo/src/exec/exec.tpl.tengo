/**
 * Creates and fill a workdir, runs a command on it
 * and saves a chosen resulted files from this dir.
 */

self := import(":tpl")

ll := import(":ll")
smart := import(":smart")
render := import(":render")
workdir := import(":workdir")
runcmd := import(":exec.runcmd")
stream := import(":exec.stream")
execInternal := import(":exec.internal")
pkg := import(":exec.package")
sets := import(":sets")
validation := import(":validation")
blobs := import(":file.internal")

self.defineOutputs(
	"files", "filesContent", "fileSets", "fileSetsContent", "progress", "fileStreams", "wdProcessors"
)

_runBinaryCommand := func(inputs) {
	//
	// Create and fill the workdir with files that were passed from inputs.
	//

	wdBuilder := workdir.builder()
	// add files
	wdBuilder.addFiles(inputs.filesToAdd)
	// create dirs
	for dir in inputs.dirsToCreate {
		wdBuilder.mkDir(dir)
	}
	// add assets
	archives := ll.toStrict({})
	for k, descriptor in inputs.assetDescriptors {
		assetBlob := blobs.createBlobImportExternal({
			dataURL: descriptor.asset.url
		}).file

		archives[k] = assetBlob
		if is_int(inputs.assetCache[k]) {
			assetBlob.setCache(inputs.assetCache[k])
		} else {
			assetBlob.setCacheDays(1)
		}
	}
	for k, archiveRules in inputs.assetRules {
		for dir, filesToExtract in archiveRules {
			wdBuilder.addFromZip(archives[k], dir, filesToExtract)
		}
	}
	// pass values as fields for saving the topology in pl-core
	// and avoiding deduplication issues:
	wdBuilder.writeFiles(self.rawInputs().filesToWrite.getValue().inputs())
	// working directory with input files added; before run
	wdBefore := wdBuilder.build()

	//
	// Build runcmd resource
	//

	runBuilder := runcmd.builder(wdBefore)

	opts := execInternal.binaryRunOptions(inputs.runOptions)

	// Attach installed software to the command
	for varInfo in opts.variables {
		runBuilder.ref(varInfo.refName, varInfo.reference)
		runBuilder.substitutionRule(varInfo.varName, varInfo.refName)
	}

	// Patch command's PATH env variable
	for p in opts.customPaths {
		runBuilder.addToPath(p.value, p.hasVars)
	}

	// exec command
	if opts.cmd.hasVars {
		runBuilder.cmdVar(opts.cmd.value)
	} else {
		runBuilder.cmd(opts.cmd.value)
	}

	// cmd args

	for name, arg in opts.args {
		if arg.hasVars {
			runBuilder.argVar(arg.value)
		} else {
			runBuilder.arg(arg.value)
		}
	}

	// env vars
	for name, value in opts.envs {
		if value.hasVars {
			runBuilder.envVar(name, value.value)
		} else {
			runBuilder.env(name, value.value)
		}
	}

	// secrets
	for envName, secretVar in inputs.runOptions.secrets {
		runBuilder.envVar(envName, secretVar)
	}

	// other options
	runBuilder.inQueue(opts.queue)
	runBuilder.stdout(opts.stdout)
	runBuilder.stderr(opts.stderr)
	runBuilder.nErrorLines(opts.nErrorLines)
	run := runBuilder.build()
	// get the workdir containing all the files, including produced by the run command
	wdAfter := run.workdir

	//
	// Run workdir processors
	//

	wdProcessorsResults := {}
	for name, p in inputs.wdProcessors {
		tpl := p.tpl
		tplInputs := {
			workdir: wdAfter,
			args: p.tplArgs
		}

		// render template & get results
		r := render.createEphemeral(tpl, tplInputs)

		wdProcessorsResults[name] = r.output("result")
		wdAfter = r.output("workdir")
	}

	//
	// Save data from the workdir
	//

	// saver resource
	wdSaver := workdir.save(wdAfter)
	// save files
	for fName in inputs.filesToSave {
		wdSaver.saveFile(fName)
	}
	// save files content
	for fName in inputs.filesContentToSave {
		wdSaver.saveFileContent(fName)
	}
	// save file sets
	for name, regex in inputs.fileSetsToSave {
		wdSaver.saveFileSet(name, regex)
	}
	// save file sets content
	for name, regex in inputs.fileSetsContentToSave {
		wdSaver.saveFileSetContent(name, regex)
	}

	// resulting wd
	wdResult := wdSaver.build()

	// create streams for all requested file streams.
	streams := smart.mapBuilder()
	for fName in inputs.filesToStream {
		streams.add(fName, stream.create(wdBefore, wdResult, fName))
	}

	return {
		files: wdResult.files,
		filesContent: wdResult.filesContent,
		fileSets : wdResult.fileSets,
		fileSetsContent : wdResult.fileSetsContent,
		fileStreams: streams.build(),
		wdProcessors: wdProcessorsResults,
		progress: wdResult.progress
	}
}

self.body(func(inputs) {
	// assert we have inputs we expect.
	validation.assertJsonSchema(inputs, {
		"softwareInfo,omitempty": validation.resource(),
		files: { any: validation.resource() },
		values: { any: "any" },
		dirs: ["string"],
		runOptions: {
			"software,omitempty": pkg.softwareInfoScheme,
			"cmd,omitempty": "string",
			args: ["string"],
			envs: { any: "string" },
			secrets: { any: "string" },
			queue: "string",
			stdout: "string",
			stderr: "string",
			nErrorLines: "number"
		},
		saveFiles: ["string"],
		saveFilesContents: ["string"],
		streams: ["string"],
		"assets,omitempty": { any: validation.resource() },
		"assetDescriptors,omitempty": { any: pkg.assetDescriptorScheme },
		"assetRules,omitempty": { any: { any: ["string"] } },
		"assetCache,omitempty": { any: "number" }
	})

	ll.toStrict(inputs)
	inputs.runOptions = ll.toStrict(inputs.runOptions)
	if !is_undefined(inputs.assets) {
		inputs.assets = ll.toStrict(inputs.assets)
	}
	if (!is_undefined(inputs.assetDescriptors)) {
		inputs.assetDescriptors = ll.toStrict(inputs.assetDescriptors, true)
	}
	if (!is_undefined(inputs.assetRules)) {
		inputs.assetRules = ll.toStrict(inputs.assetRules, true)
	}

	return _runBinaryCommand(inputs)
})
