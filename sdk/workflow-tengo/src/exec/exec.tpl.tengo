//tengo:hash_override 6FB763E3-AB0C-4676-8F74-C7E23069DCCF

/**
 * Creates and fill a workdir, runs a command on it
 * and saves a chosen resulted files from this dir.
 */

self := import(":tpl.light")

validation := import(":validation")

smart := import(":smart")
render := import(":render")
pkg := import(":exec.package")
desc := import(":exec.descriptor")
monetization := import(":exec.monetization_internal")
assets := import(":assets")
maps := import(":maps")
runcmd := import(":exec.runcmd")
loadSoftware := import(":exec.load-software")

mnzSw := assets.importSoftware("@platforma-open/milaboratories.software-small-binaries:mnz-client")
execImplTpl := assets.importTemplate(":exec.exec-impl")

self.defineOutputs(
	"files",
	"filesContent",
	"fileSets",
	"fileSetsContent",
	"progress",
	"fileStreams",
	"wdProcessors"
)

self.validateInputs({
	"softwareInfo,?": validation.resource(),
	filesToAdd: { any: validation.resource() },
	filesToWrite: { any: validation.resource() },
	"assets,?": { any: validation.resource() },
	"wdProcessors,?": {
		any: {
			tpl: validation.resource(),
			"tplArgs,?": "any"
		}
	},

	"dirsToCreate,?": ["string"],
	runOptions: {
		"software,?": pkg.softwareInfoScheme,
		"cmd,?": "string",
		args: ["string"],
		envs: { any: "string" },
		"argsTyped,?": [{type: "string", value: "string"}],
		"envsTyped,?": {"any": {type: "string", value: "string"}},
		secrets: { any: "string" },
		queue: "string",
		stdout: "string",
		stderr: "string",
		nErrorLines: "number",
		"monetization,?": monetization.schema
	},
	"filesToSave,?": ["string"],
	"filesContentToSave,?": ["string"],
	"fileSetsToSave,?": { any: "string" },
	"fileSetsContentToSave,?": { any: "string" },
	"filesToStream,?": ["string"],
	"assetDescriptors,?": { any: { asset: desc.assetScheme } },
	"assetRules,?": { any: { any: ["string"] } },
	"assetCache,?": { any: "number" },

	// Service inputs
	"quota,?": {
		queue: "string",
		"cpu,?": "number",
		"ram,?": "string"
	}
})

self.body(func(inputs) {

	plan := undefined
	if (is_undefined(inputs.runOptions.software)) {
		// Simple local command run, no software packages involved (backward compatibility)
		plan = runcmd.createRunCommandPlan().cmd(inputs.runOptions.cmd).state()
	} else {
		software := inputs.runOptions.software
		plan = loadSoftware.loadSoftware(software)
	}

	serviceImplInputs := {}
	if !is_undefined(self.rawServiceInputs().quota) {
		serviceImplInputs.quota = self.rawServiceInputs().quota
	}

	pureImplInputs := {
		mainPlan: plan
	}

	if !is_undefined(inputs.runOptions.monetization) {
		pureImplInputs.mnzPlan = loadSoftware.loadSoftware(mnzSw)
	}

	//
	// Code below uses raw inputs, to pass exactly same resource as we received in inputs.
	// This will not be needed after we finish MILAB-685: https://github.com/milaboratory/platforma/pull/8
	//

	if !is_undefined(self.rawInputs().filesToAdd) {
		pureImplInputs.filesToAdd = self.rawInputs().filesToAdd
	}
	if !is_undefined(self.rawInputs().filesToWrite) {
		pureImplInputs.filesToWrite = self.rawInputs().filesToWrite
	}
	if !is_undefined(self.rawInputs().assets) {
		pureImplInputs.assets = self.rawInputs().assets
	}
	if !is_undefined(self.rawInputs().wdProcessors) {
		pureImplInputs.wdProcessors = self.rawInputs().wdProcessors
	}

	pureImplInputs.settings = smart.createJsonResource(maps.clone({
		dirsToCreate: inputs.dirsToCreate,
		runOptions: inputs.runOptions,
		filesToSave: inputs.filesToSave,
		filesContentToSave: inputs.filesContentToSave,
		fileSetsToSave: inputs.fileSetsToSave,
		fileSetsContentToSave: inputs.fileSetsContentToSave,
		filesToStream: inputs.filesToStream,
		assetDescriptors: inputs.assetDescriptors,
		assetRules: inputs.assetRules,
		assetCache: inputs.assetCache
	}, { removeUndefs: true }))

	execImpl := render.createEphemeral(execImplTpl, pureImplInputs, serviceImplInputs)

	return {
		files: execImpl.output("files"),
		filesContent: execImpl.output("filesContent"),
		fileSets: execImpl.output("fileSets"),
		fileSetsContent: execImpl.output("fileSetsContent"),
		fileStreams: execImpl.output("fileStreams"),
		wdProcessors: execImpl.output("wdProcessors"),
		progress: execImpl.output("progress")
	}
})
