/**
 * A library that creates RunCommand resource.
 */

ll := import(":ll")
validation := import(":validation")
feats := import(":feats")
oop := import(":oop")

maps := import(":maps")
smart := import(":smart")
json := import("json")
constants := import(":exec.constants")
slices := import(":slices")
limits := import(":exec.limits")
render := import(":render")
assets := import(":assets")

delayedComputeAllocationTpl := assets.importTemplate(":exec.delayed_compute_allocation")

_RTYPE_RUN_COMMAND_V1 := { Name: "RunCommand/executor", Version: "1" }
_RTYPE_RUN_COMMAND_EXEC_V2 := { Name: "RunCommand/executor", Version: "2" }
_RTYPE_RUN_COMMAND_BATCH_V2 := { Name: "RunCommand/batch", Version: "2" }
_RTYPE_RUN_COMMAND_CMD := { Name: "RunCommandCmd", Version: "1" }
_RTYPE_RUN_COMMAND_ARGS := { Name: "RunCommandArgs", Version: "1" }
_RTYPE_RUN_COMMAND_OPTIONS := { Name: "run-command/options", Version: "1" }
_RTYPE_RUN_COMMAND_REFS := { Name: "RunCommandRefs", Version: "1" }

ARG_SCHEMA := {
	"__options__,closed": true,
	"type": "string,regex=string|expressionRef|variableRef",
	"value": "string"
}

RUN_CMD_PLAN_REFS_SCHEMA := {
	"any": validation.reference
}

RUN_CMD_PLAN_OPTIONS_SCHEMA := {
	"cmd": ["or", ARG_SCHEMA, "null"],
	"args": [ARG_SCHEMA],
	"envs": { "any": ARG_SCHEMA },
	"substRules": { "any": "string" },
	"customPaths": [ARG_SCHEMA]
}

RUN_CMD_PLAN_SCHEMA := {
	"refs": RUN_CMD_PLAN_REFS_SCHEMA,
	"options": RUN_CMD_PLAN_OPTIONS_SCHEMA
}

// Inputs
_FIELD_ALLOCATION := "allocation" // not in v1
_FIELD_REFS := "refs"
_FIELD_CMD := "cmd"
_FIELD_ARGS := "args"
_FIELD_OPTIONS := "options"
_FIELD_WORKDIR_IN := "workdirIn"

// Outputs
_FIELD_WORKDIR_OUT := "workdirOut"

/**
 * Creates a simple argument for the command.
 *
 * @param argument: string - the argument to create.
 */
simpleArg := func(argument) {
	return {
		type: constants.ARG_TYPE_STRING,
		value: argument
	}
}

/**
 * @deprecated, use _createRenderedArg
 * Creates 'variableRef' argument.
 * @param argTpl: string - argument value in any form with variables inside (e.g. "file://{pkg}/some-file" or "o-{java}-o")
 */
variableArg := func(argTpl) {
	return {
		type: constants.ARG_TYPE_VAR,
		value: argTpl
	}
}

/**
 * Creates 'expressionRef' arguments
 * @param argTpl: string - arguments value in any form with expressions inside, e.g.:
 *   - `â€“Xms{env.PL_EXEC_HARD_MEMORY_LIMIT_MB * 80 / 100}m`
 *   - `file://{pkg}/some-file`
 *   - `o-{java}-o`
 */
expressionArg := func(argTpl) {
	return {
		type: constants.ARG_TYPE_EXPRESSION,
		value: argTpl
	}
}

_createAbstractRunCommandPlan := func(state) {
	self := undefined

	self = ll.toStrict({
		/**
		 * Sets the command, e.g. /usr/bin/env or sh.
		 *
		 * @param commandName: string | { type: ArgType, value: string } - the name of the command.
		 */
		cmd: func(commandName) {
			if ll.isMap(commandName) {
				self.cmdTyped(commandName.type, commandName.value)
			} else {
				state.options.cmd = simpleArg(commandName)
			}
			return self
		},

		/**
		 * Sets the command with variables inside to be rendered using rules
		 * from .substitutionRules().
		 *
		 * @param commandTpl: string - string with '{varName}' substitutions to be replaced with
		 *                             software paths. Replace rules are defined by .substitutionRule()
		 *                             and .substitutionRules(),
		 */
		cmdVar: func(commandTpl) {
			state.options.cmd = variableArg(commandTpl)
			return self
		},

		/**
		 * Sets the command with expressions inside to be rendered using rules
		 * from .substitutionRules().
		 *
		 * @param commandTpl: string - string with '{any expression}' substitutions to be replaced with
		 *                             software paths. Replace rules are defined by .substitutionRule()
		 *                             and .substitutionRules(),
		 */
		cmdExpression: func(commandTpl) {
			state.options.cmd = expressionArg(commandTpl)
			return self
		},

		cmdTyped: func(type, value) {
			ll.assert(slices.hasElement(constants.ARG_TYPES, type),
				"runcmd.plan.cmdTyped: unknown type %s, expect: %v", type, constants.ARG_TYPES)

			if type == constants.ARG_TYPE_STRING {
				return self.cmd(value)
			} else if type == constants.ARG_TYPE_EXPRESSION {
				return self.cmdExpression(value)
			} else if type == constants.ARG_TYPE_VAR {
				return self.cmdVar(value)
			}

			ll.panic("runcmd.plan.cmdTyped: unknown type %s, expect: %v", type, constants.ARG_TYPES)
		},

		/**
		 * Adds an argument to the command.
		 *
		 * @param arg: string | { type: ArgType, value: string } - the argument to add.
		 */
		arg: func(arg) {
			if ll.isMap(arg) {
				self.argTyped(arg.type, arg.value)
			} else {
				state.options.args = append(state.options.args, simpleArg(arg))
			}
			return self
		},

		/**
		 * Adds an argument with variables inside to be rendered using rules
		 * from .substitutionRules().
		 *
		 * @param argTpl: string - string with '{varName}' substitutions to be replaced with
		 *                         software paths. Replace rules are defined by .substitutionRule()
		 *                         and .substitutionRules(),
		 */
		argVar: func(argTpl) {
			state.options.args = append(state.options.args, variableArg(argTpl))
			return self
		},

		/**
		 * Adds an argument with variables inside to be rendered using rules
		 * from .substitutionRules().
		 *
		 * @param argTpl: string - string with '{expression}' substitutions to be replaced with
		 *                         expression value. Replace rules are defined by .substitutionRule()
		 *                         and .substitutionRules(),
		 */
		argExpression: func(argTpl) {
			state.options.args = append(state.options.args, expressionArg(argTpl))
			return self
		},

		argTyped: func(type, value) {
			ll.assert(slices.hasElement(constants.ARG_TYPES, type),
				"runcmd.plan.argTyped: unknown type %s, expect: %v", type, constants.ARG_TYPES)

			if type == constants.ARG_TYPE_STRING {
				return self.arg(value)
			} else if type == constants.ARG_TYPE_EXPRESSION {
				return self.argExpression(value)
			} else if type == constants.ARG_TYPE_VAR {
				return self.argVar(value)
			}

			ll.panic("runcmd.plan.argTyped: unknown type %s, expect: %v", type, constants.ARG_TYPES)
		},

		/**
		 * Adds a reference for using it in expressions next.
		 *
		 * @param refKey: string - the name of the ref
		 * @param ref: reference - a reference to the valid field or resource
		 */
		ref: func(refKey, ref) {
			ll.assert(smart.isReference(ref),
				"runcmd.plan.ref() must be a reference (valid field or resource) %s", refKey)

			ll.assert(!maps.containsKey(state.refs, refKey),
				"attempt to override existing reference %q", refKey)

			state.refs[refKey] = ref
			return self
		},

		/**
		 * A shortcut for .ref() and .substitutionRule() pair.
		 *
		 * @param varName: string - variable to be substituted in arg value ("var1" would be
		 *                          substituted in place of {var1} of arg value)
		 * @param refKey: string - key of ref (added with .ref()) that points to installed software.
		 * @param ref: reference - a reference to the valid field or resource
		 */
		refVar: func(varName, refKey, ref) {
			self.ref(refKey, ref)
			self.substitutionRule(varName, refKey)
			return self
		},

		/**
		 * Sets an environment variable for the command.
		 *
		 * @param name: string - the name of the environment variable.
		 * @param value: string | { type: ArgType, value: string } - the value of the environment variable.
		 */
		env: func(name, value) {
			if ll.isMap(value) {
				self.envTyped(name, value.type, value.value)
			} else {
				state.options.envs[name] = simpleArg(value)
			}
			return self
		},

		/**
		 * Sets environment variable with substitution inside value, to be rendered
		 * using rules from .substitutionRules().
		 *
		 * @param name: string - the name of the environment variable.
		 * @param valueTpl: string - the value of the environment variable.
		 */
		envVar: func(name, valueTpl) {
			state.options.envs[name] = variableArg(valueTpl)
			return self
		},

		/**
		 * Sets environment variable with substitution inside value, to be rendered
		 * using rules from .substitutionRules().
		 *
		 * @param name: string - the name of the environment variable.
		 * @param valueTpl: string - the value of the environment variable.
		 */
		envExpression: func(name, valueTpl) {
			state.options.envs[name] = expressionArg(valueTpl)
			return self
		},

		envTyped: func(name, type, value) {
			ll.assert(slices.hasElement(constants.ARG_TYPES, type),
				"runcmd.plan.envTyped: unknown type %s, expect: %v", type, constants.ARG_TYPES)

			if type == constants.ARG_TYPE_STRING {
				return self.env(name, value)
			} else if type == constants.ARG_TYPE_EXPRESSION {
				return self.envExpression(name, value)
			} else if type == constants.ARG_TYPE_VAR {
				return self.envVar(name, value)
			}

			ll.panic("runcmd.plan.envTyped: unknown type %s, expect: %v", type, constants.ARG_TYPES)
		},

		/**
		 * Adds a path to the PATH environment variable.
		 *
		 * @param path: string | { type: ArgType, value: string } - the path to add.
		 */
		addPath: func(path) {
			if ll.isMap(path) {
				self.addPathTyped(path.type, path.value)
			} else {
				state.options.customPaths = append(state.options.customPaths, simpleArg(path))
			}
			return self
		},

		/**
		 * Adds a path with variables inside to the PATH environment variable.
		 *
		 * @param pathTpl: string - string with '{varName}' substitutions to be replaced with
		 *                         software paths.
		 */
		addPathVar: func(pathTpl) {
			state.options.customPaths = append(state.options.customPaths, variableArg(pathTpl))
			return self
		},

		/**
		 * Adds a path with expressions inside to the PATH environment variable.
		 *
		 * @param pathTpl: string - string with '{expression}' substitutions to be replaced with
		 *                         expression value.
		 */
		addPathExpression: func(pathTpl) {
			state.options.customPaths = append(state.options.customPaths, expressionArg(pathTpl))
			return self
		},

		addPathTyped: func(type, value) {
			ll.assert(slices.hasElement(constants.ARG_TYPES, type),
				"runcmd.plan.addPathTyped: unknown type %s, expect: %v", type, constants.ARG_TYPES)

			if type == constants.ARG_TYPE_STRING {
				return self.addPath(value)
			} else if type == constants.ARG_TYPE_EXPRESSION {
				return self.addPathExpression(value)
			} else if type == constants.ARG_TYPE_VAR {
				return self.addPathVar(value)
			}

			ll.panic("runcmd.plan.addPathTyped: unknown type %s, expect: %v", type, constants.ARG_TYPES)
		},

		/**
		 * Define substitution variable for software args.
		 *
		 * @param varName: string - variable to be substituted in arg value ("var1" would be
		 *                          substituted in place of {var1} of arg value)
		 * @param refKey: string - key of ref (added with .ref()) that points to installed software.
		 */
		substitutionRule: func(varName, refKey) {
			state.options.substRules[varName] = refKey
			return self
		},

		/**
		 * Batched .substitutionRule() call (add several rules in single call)
		 *
		 * @param rules: map[string]string - <var name> -> <ref key> pairs to be added to substitution rules.
		 */
		substitutionRules: func(rules) {
			for k, v in rules {
				state.options.substRules[k] = v
			}
			return self
		}
	})

	return self
}

createRunCommandPlan := func(...initialState) {
	state := {
		refs: {},
		options: {
			cmd: undefined,
			args: [],
			envs: {},
			substRules: {},
			customPaths: []
		}
	}

	if len(initialState) == 1 {
		initState := initialState[0]
		validation.assertType(initState, RUN_CMD_PLAN_SCHEMA, "invalid initial state for run command plan")

		initOptions := initState.options
		state.options.cmd = maps.clone(initOptions.cmd)
		state.options.args = maps.clone(initOptions.args)
		state.options.envs = maps.clone(initOptions.envs)
		state.options.substRules = maps.clone(initOptions.substRules)
		state.options.customPaths = maps.clone(initOptions.customPaths)

		for k, v in initState.refs {
			state.refs[k] = v
		}
	} else {
		ll.assert(len(initialState) == 0, "createRunCommandPlan accepts at most one argument")
	}

	plan := _createAbstractRunCommandPlan(state)

	return oop.inherit(plan, {
		state: func() {
			newState := {
				options: maps.clone(state.options),
				refs: {}
			}
			for k, v in state.refs {
				newState.refs[k] = v
			}
			return newState
		}
	})
}

/**
 * Builder function for creating a RunCommand resource.
 *
 * @param workdir: smart.reference - the working directory for the command.
 * @return builder - the builder object with methods for configuring and building the RunCommand resource.
 */
builder := func(workdir, ...initialState) {
	self := undefined

	state := {
		refs: {},
		options: {
			cmd: undefined,
			args: [],
			envs: {},
			substRules: {},
			customPaths: []
		}
	}

	if len(initialState) == 1 {
		initState := initialState[0]
		validation.assertType(initState, RUN_CMD_PLAN_SCHEMA, "invalid initial state for run command builder")

		initOptions := initState.options
		state.options.cmd = maps.clone(initOptions.cmd)
		state.options.args = maps.clone(initOptions.args)
		state.options.envs = maps.clone(initOptions.envs)
		state.options.substRules = maps.clone(initOptions.substRules)
		state.options.customPaths = maps.clone(initOptions.customPaths)

		for k, v in initState.refs {
			state.refs[k] = v
		}
	} else {
		ll.assert(len(initialState) == 0, "builder accepts at most two arguments")
	}

	allocation := undefined
	queue := undefined
	cpu := undefined
	ram := undefined

	stdout := "stdout.txt"
	stderr := "stderr.txt"
	nErrorLines := 200

	plan := _createAbstractRunCommandPlan(state)

	self = oop.inherit(plan, {
		/**
		 * Use given compute allocation for command execution.
		 *
		 * @param allocation: reference
		 */
		allocation: func(value) {
			validation.assertType(value, validation.reference, "runcmd.builder: allocation should be a valid reference")
			allocation = value
			return self
		},

		/**
		 * Sets compute resource request for the command.
		 *
		 * @param request: map - contains `queue`, `cpu` and `ram` for the job.
		 */
		request: func(request) {
			validation.assertType(request, {
				"queue": "string",
				"cpu,?": "number",
				"ram,?": "number"
			}, "runcmd.builder.request: request must be a valid request")

			queue = request.queue
			cpu = request.cpu
			ram = request.ram

			return self
		},

		/**
		 * Sets the queue name for the command.
		 *
		 * @param queueName: string - the name of the queue.
		 */
		inQueue: func(queueName) {
			queue = queueName
			return self
		},

		/**
		 * Sets the stdout file name for the command.
		 *
		 * @param fileName: string - the name of the stdout file.
		 */
		stdout: func(fileName) {
			stdout = fileName
			return self
		},

		/**
		 * Sets the stderr file name for the command.
		 *
		 * @param fileName: string - the name of the stderr file.
		 */
		stderr: func(fileName) {
			stderr = fileName
			return self
		},

		/**
		 * Sets the number of error lines for the command.
		 *
		 * @param number: int - the number of error lines.
		 */
		nErrorLines: func(number) {
			nErrorLines = number
			return self
		},

		/**
		 * Builds the RunCommand resource.
		 *
		 * @return object - the built RunCommand resource.
		 */
		build: func() {
			runRes := undefined
			options := state.options
			refs := state.refs

			hasPatternArgs := false
			hasExpressionArgs := false

			check := func(arg) {
				if !ll.isMap(arg) {
					return
				}
				if arg.type == constants.ARG_TYPE_VAR {
					hasPatternArgs = true
				}
				if arg.type == constants.ARG_TYPE_EXPRESSION {
					hasExpressionArgs = true
				}
			}

			check(options.cmd)

			for arg in options.args {
				check(arg)
			}

			for _, env in options.envs {
				check(env)
			}

			for path in options.customPaths {
				check(path)
			}

			/**
			 * Check that either allocation or compute resources are set, but not both.
			 */
			ll.assert(is_undefined(allocation) || (is_undefined(cpu) && is_undefined(ram)),
				"runcmd.builder.build: allocation cannot be set along with cpu or ram")

			ll.assert(!is_undefined(allocation) || !is_undefined(cpu) || !is_undefined(ram),
				"runcmd.builder.build: either allocation or compute resources (cpu or ram) must be set")

			ll.assert(!is_undefined(queue), "queue must be set")

			useBatch := limits.useBatch(queue)

			if useBatch {
				// Put everything into batch queue if we don't need fast execution of light task.
				// We can't put light tasks (i.e. UI tasks) into batch because batch job could
				// easily _start_ for 10 seconds and we don't want to make user to wait so long in UI.
				runRes = smart.ephemeralBuilder(_RTYPE_RUN_COMMAND_BATCH_V2)

			} else if feats.computeLimits {
				runRes = smart.ephemeralBuilder(_RTYPE_RUN_COMMAND_EXEC_V2)

			} else {
				runRes = smart.ephemeralBuilder(_RTYPE_RUN_COMMAND_V1)
			}

			runRes.getField(_FIELD_WORKDIR_IN).set(workdir)

			// TODO: add assertions about the state

			ll.assert(!hasPatternArgs || len(options.substRules) != 0,
				"found pattern argument, but no substitution rules were set: hasPatternArgs: %v, substRules: %v, cmd: %v, args: %v, envs: %v",
				hasPatternArgs, options.substRules, options.cmd, options.args, options.envs)
			ll.assert(!hasExpressionArgs || feats.commandExpressions,
				"runcmd.builder().build: expression arguments must be enabled only if platforma backend supports expressions, found: %v",
				hasExpressionArgs)

			if !is_undefined(allocation) {
				runRes.getField(_FIELD_ALLOCATION).set(allocation)
			} else {
				request := {
					queue: queue
				}
				if !is_undefined(cpu) {
					request.cpu = cpu
				}
				if !is_undefined(ram) {
					request.ram = ram
				}

				// Delay requesting compute quota until the workdir is ready.
				// This prevents a deadlock between storage and compute quotas.
				// A waiter ensures that a task requests compute quota only after
				// it has acquired the storage quota required for workdir creation,
				// which is a prerequisite for the computation itself.

				delayedComputeAllocation := render.createEphemeral(delayedComputeAllocationTpl, {
					request: smart.createJsonResource(request),
					// whole input map is awaited by the template to be ready before the allocation is requested
					wd: workdir
				})
				runRes.getField(_FIELD_ALLOCATION).set(delayedComputeAllocation.output("allocation"))
			}

			refsRes := smart.createMapResourceWithType(_RTYPE_RUN_COMMAND_REFS, refs)
			runRes.getField(_FIELD_REFS).set(refsRes)

			cmdRes := smart.createValueResource(_RTYPE_RUN_COMMAND_CMD, json.encode(options.cmd))
			runRes.getField(_FIELD_CMD).set(cmdRes)

			buildOptions := {
				queueName: queue,
				errorLines: nErrorLines,
				redirectStdout: stdout,
				redirectStderr: stderr,
				env: options.envs,
				additionalPaths: options.customPaths,
				substitutions: options.substRules
			}

			optionsRes := smart.createValueResource(_RTYPE_RUN_COMMAND_OPTIONS, json.encode(buildOptions))
			runRes.getField(_FIELD_OPTIONS).set(optionsRes)

			argsRes := smart.createValueResource(_RTYPE_RUN_COMMAND_ARGS, json.encode(options.args))
			runRes.getField(_FIELD_ARGS).set(argsRes)

			res := oop.inherit(runRes.lockAndBuild(), {
				"workdir": runRes.outputs()[_FIELD_WORKDIR_OUT],
				"options": buildOptions
			})

			return res
		}
	})

	return self
}

export ll.toStrict({
	builder: builder,
	simpleArg: simpleArg,
	variableArg: variableArg,
	expressionArg: expressionArg,
	createRunCommandPlan: createRunCommandPlan,
	ARG_SCHEMA: ARG_SCHEMA,
	RUN_CMD_PLAN_REFS_SCHEMA: RUN_CMD_PLAN_REFS_SCHEMA,
	RUN_CMD_PLAN_OPTIONS_SCHEMA: RUN_CMD_PLAN_OPTIONS_SCHEMA,
	RUN_CMD_PLAN_SCHEMA: RUN_CMD_PLAN_SCHEMA
})
