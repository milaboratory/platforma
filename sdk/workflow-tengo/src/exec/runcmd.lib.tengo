/**
 * A library that creates RunCommand resource.
 */

ll := import(":ll")
maps := import(":maps")
oop := import(":oop")
smart := import(":smart")
json := import("json")

_RTYPE_RUN_COMMAND := { Name: "RunCommand/executor", Version: "1" }
_RTYPE_RUN_COMMAND_CMD := { Name: "RunCommandCmd", Version: "1" }
_RTYPE_RUN_COMMAND_ARGS := { Name: "RunCommandArgs", Version: "1" }
_RTYPE_RUN_COMMAND_OPTIONS := { Name: "run-command/options", Version: "1" }
_RTYPE_RUN_COMMAND_REFS := { Name: "RunCommandRefs", Version: "1" }

/**
 * Creates a simple argument for the command.
 *
 * @param argument: string - the argument to create.
 */
_createSimpleArg := func(argument) {
	return {
		type: "string",
		value: argument
	}
}

/**
 * Creates 'variableRef' argument.
 * @param argTpl: string - argument value in any form with variables inside (e.g. "file://{pkg}/some-file" or "o-{java}-o")
 */
_createVariableArg := func(argTpl) {
	return {
		type: "variableRef",
		value: argTpl
	}
}

/**
 * Builder function for creating a RunCommand resource.
 *
 * @param workdir: string - the working directory for the command.
 * @return builder - the builder object with methods for configuring and building the RunCommand resource.
 */
builder := func(workdir) {
	res := smart.ephemeralBuilder(_RTYPE_RUN_COMMAND)
	res.getField("workdirIn").set(workdir)

	self := undefined

	cmd := undefined
	args := []
	envs := {}
	queue := ""
	refs := {}

	substRules := {}
	hasPatternArgs := false
	customPaths := []

	stdout := "stdout.txt"
	stderr := "stderr.txt"
	nErrorLines := 200

	self = ll.toStrict(oop.inherit(res, {
		/**
		 * Sets the command, e.g. /usr/bin/env or sh.
		 *
		 * @param commandName: string - the name of the command.
		 */
		cmd: func(commandName) {
			cmd = _createSimpleArg(commandName)
			return self
		},

		/**
		 * Sets the command with variables inside to be rendered using rules
		 * from .substitutionRules().
		 *
		 * @param commandTpl: string - string with '{varName}' substitutions to be replaced with
		 *                             software paths. Replace rules are defined by .substitutionRule()
		 *                             and .substitutionRules(),
		 */
		cmdVar: func(commandTpl) {
			cmd = _createVariableArg(commandTpl)
			hasPatternArgs = true
			return self
		},

		/**
		 * Adds an argument to the command.
		 *
		 * @param arg: string - the argument to add.
		 */
		arg: func(arg) {
			args = append(args, _createSimpleArg(arg))
			return self
		},

		/**
		 * Adds an argument with variables inside to be rendered using rules
		 * from .substitutionRules().
		 *
		 * @param argTpl: string - string with '{varName}' substitutions to be replaced with
		 *                         software paths. Replace rules are defined by .substitutionRule()
		 *                         and .substitutionRules(),
		 */
		argVar: func(argTpl) {
			args = append(args, _createVariableArg(argTpl))
			hasPatternArgs = true
			return self
		},

		ref: func(refKey, ref) {
			ll.assert(smart.isReference(ref),
				"runcmd.builder().ref() must be a reference (valid field or resource)")

			ll.assert(!maps.containsKey(refs, refKey),
				"attempt to override existing reference %q", refKey)

			refs[refKey] = ref
			return self
		},

		/**
		 * Sets an environment variable for the command.
		 *
		 * @param name: string - the name of the environment variable.
		 * @param value: string - the value of the environment variable.
		 */
		env: func(name, value) {
			envs[name] = value
			return self
		},

		/**
		 * Sets environment variable with substitution inside value, to be rendered
		 * using rules from .substitutionRules().
		 *
		 * @param name: string - the name of the environment variable.
		 * @param valueTpl: string - the value of the environment variable.
		 */
		envVar: func(name, valueTpl) {
			envs[name] = _createVariableArg(valueTpl)
			hasPatternArgs = true
			return self
		},

		/*
		 * Patch 'PATH' environment variable, adding software path to it.
		 *
		 * @param value: string - the value of the environment variable with variables to be replaced to software path.
		 * @param hasVars: boolean - wether Platforma Backend should try to substitute variables inside <value> on server side
		 */
		addToPath: func(value, hasVars) {
			if hasVars {
				customPaths = append(customPaths, _createVariableArg(value))
				hasPatternArgs = true
			} else {
				customPaths = append(customPaths, _createSimpleArg(value))
			}
			return self
		},

		/**
		 * Define substitution variable for software args.
		 *
		 * @param varName: string - variable to be substituted in arg value ("var1" would be
		 *                          substituted in place of {var1} of arg value)
		 * @param refKey: string - key of ref (added with .ref()) that points to installed software.
		 */
		substitutionRule: func(varName, refKey) {
			substRules[varName] = refKey
			return self
		},

		/**
		 * Batched .substitutionRule() call (add several rules in single call)
		 *
		 * @param rules: map[string]string - <var name> -> <ref key> pairs to be added to substitution rules.
		 */
		substitutionRules: func(rules) {
			for k, v in rules {
				substRules[k] = v
			}
			return self
		},

		/**
		 * Sets the queue name for the command.
		 *
		 * @param queueName: string - the name of the queue.
		 */
		inQueue: func(queueName) {
			queue = queueName
			return self
		},

		/**
		 * Sets the stdout file name for the command.
		 *
		 * @param fileName: string - the name of the stdout file.
		 */
		stdout: func(fileName) {
			stdout = fileName
			return self
		},

		/**
		 * Sets the stderr file name for the command.
		 *
		 * @param fileName: string - the name of the stderr file.
		 */
		stderr: func(fileName) {
			stderr = fileName
			return self
		},

		/**
		 * Sets the number of error lines for the command.
		 *
		 * @param number: int - the number of error lines.
		 */
		nErrorLines: func(number) {
			nErrorLines = number
			return self
		},

		/**
		 * Builds the RunCommand resource.
		 *
		 * @return object - the built RunCommand resource.
		 */
		build: func() {
			// TODO: add assertions about the state

			ll.assert(!hasPatternArgs || len(substRules) != 0,
				"found pattern argument, but no substitution rules were set")

			refsRes := smart.createMapResourceWithType(_RTYPE_RUN_COMMAND_REFS, refs)
			self.getField("refs").set(refsRes)

			cmdRes := smart.createValueResource(_RTYPE_RUN_COMMAND_CMD, json.encode(cmd))
			self.getField("cmd").set(cmdRes)

			options := {
				queueName: queue,
				errorLines: nErrorLines,
				redirectStdout: stdout,
				redirectStderr: stderr,
				env: envs,
				additionalPaths: customPaths,
				substitutions: substRules
			}

			optionsRes := smart.createValueResource(_RTYPE_RUN_COMMAND_OPTIONS, json.encode(options))
			self.getField("options").set(optionsRes)

			argsRes := smart.createValueResource(_RTYPE_RUN_COMMAND_ARGS, json.encode(args))
			self.getField("args").set(argsRes)

			res := ll.toStrict(oop.inherit(self.lockAndBuild(), {
				"workdir": self.outputs().workdirOut,
				"options": options
			}))

			return res
		}
	}))

	return self
}

export ll.toStrict({
	builder: builder
})
