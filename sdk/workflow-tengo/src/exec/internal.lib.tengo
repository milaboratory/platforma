/**
 * Internal 'exec' module library.
 *
 * NOT INTENDEND FOR USE OUTSIDE 'exec' MODULE.
 * May completely change API from release to release.
 */

ll := import(":ll")
json := import("json")
times := import("times")
text := import("text")
oop := import(":oop")
maps := import(":maps")
path := import(":path")
pkg := import(":exec.package")
runcmd := import(":exec.runcmd")
python := import(":exec.python")
R := import(":exec.R")
constants := import(":exec.constants")
desc := import(":exec.descriptor")
validation := import(":validation")

// Variables, substituted in command arguments and environment variable values.
_ARG_VAR_PKG            := "pkg"  // abs path to software package
_ARG_VAR_JAVA           := "java" // abs path to 'java' run environment
_ARG_VAR_PYTHON         := "python" // abs path to 'python' run environment
_ARG_VAR_R              := "R" // abs path to 'R' run environment runtime
_ARG_VAR_R_VENV         := "rVenv" // abs path to 'R' portable virtual environment
_ARG_VAR_MNZ            := "monetization" // monetization env value

/** Converts the args above to the expressions. */
_expr := func(varName) {
	return "{" + varName + "}"
}

/**
 * Create new argument with a type. The type can be either string, expression or variable.
 * Decides whether we need a simple argument or an expression one.
 * For a month, we keep deprecated variable arguments.
 *
 * @param isString: boolean - whether it is a string or a difficult (expression) argument.
 */
_newArg := func(isString, value) {
	if isString {
		return ll.toStrict({
			type: constants.ARG_TYPE_STRING,
			value: value
		})
	}
	if desc.canBackendUseExpressions() {
		return ll.toStrict({
			type: constants.ARG_TYPE_EXPRESSION,
			value: value
		})
	}
	return ll.toStrict({
		type: constants.ARG_TYPE_VAR,
		value: value
	})
}

_newRefVar := func(varName, refName, reference) {
	// deprecated, remove on 15 Mar 2025
	if !desc.canBackendUseExpressions() {
		return ll.toStrict({
			varName: "{" + varName + "}",
			refName: refName,
			reference: reference
		})
	}

	return ll.toStrict({
		varName: varName,
		refName: refName,
		reference: reference
	})
}

_installSoftware := func(registry, pkgName) {
	ll.assert(is_string(registry), "exec.internal._installSoftware(): registry is not a string, got: %v", registry, pkgName)
	ll.assert(is_string(pkgName), "exec.internal._installSoftware(): pkgName is not a string, got: %v", pkgName, registry)

	archive := pkg.get(registry, pkgName).archive()
	return pkg.install(archive).package()
}

_directCallOptions := func(runOptions) {
	return ll.toStrict({
		variables: [],
		customPaths: [],
		cmd: _newArg(true, runOptions.cmd),
		args: [],
		envs: {}
	})
}

_loadJavaRunEnvironment := func(operationMode, descriptor) {
	javaPkg := _installSoftware(descriptor.runEnv.registry, descriptor.runEnv.package)
	javaRefVar := _newRefVar(_ARG_VAR_JAVA, descriptor.runEnv.name, javaPkg)

	return ll.toStrict({
		runEnvType: "java",

		variables: [ javaRefVar ],
		customPaths: [ _newArg(false, path.join(_expr(_ARG_VAR_JAVA), descriptor.runEnv.binDir)) ],
		envs: {}
	})
}

_loadPythonRunEnvironment := func(operationMode, descriptor, softName, softPkg) {
	venvBuilder := python.venvBuilder().
		software(softPkg).
		runEnvDescriptor(descriptor.runEnv).
		dependencies(descriptor.dependencies)

	if !is_undefined(descriptor.toolset) && descriptor.toolset != "" {
		venvBuilder.useToolset(descriptor.toolset)
	}

	venv := venvBuilder.
		cacheDays(7).
		build().
		venv()

	venvRoot := path.join(_expr(_ARG_VAR_PYTHON), "venv")
	venvRefKey := softName + "/venv"

	pythonRefVar := _newRefVar(_ARG_VAR_PYTHON, venvRefKey, venv)

	return ll.toStrict({
		runEnvType: "python",

		variables: [ pythonRefVar ],
		customPaths: [ _newArg(false, path.join(venvRoot, "bin")) ],
		envs: {
			"VIRTUAL_ENV": _newArg(false, venvRoot)
		}
	})
}

_loadRRunEnvironment := func(operationMode, descriptor, softName, softPkg) {
	renvBuilder := R.rVenvBuilder().
		operationMode(operationMode).
		software(softPkg).
		runEnvDescriptor(descriptor.runEnv).
		dependencies(descriptor.dependencies)

	if !is_undefined(descriptor.toolset) && descriptor.toolset != "" {
		renvBuilder.useToolset(descriptor.toolset)
	}

	rRuntime := renvBuilder.
		cacheDays(7).
		build()

	rEnv := rRuntime.venv()
	rPackage := rRuntime.R()

	rBinDir := path.join(_expr(_ARG_VAR_R), descriptor.runEnv.binDir)

	rRefKey := softName + "/R-runtime"
	rRefVar := _newRefVar(_ARG_VAR_R, rRefKey, rPackage)

	rEnvRefKey := softName + "/R-virtual-env"
	rEnvRefVar := _newRefVar(_ARG_VAR_R_VENV, rEnvRefKey, rEnv)

	return ll.toStrict({
		runEnvType: "R",

		variables: [ rRefVar, rEnvRefVar ],
		customPaths: [ _newArg(false, rBinDir) ],
		envs: {
			"R_HOME_DIR": _newArg(false, _expr(_ARG_VAR_R)),
			"RHOME": _newArg(false, _expr(_ARG_VAR_R)),
			"RENV_PATHS_ROOT": _newArg(false, path.join(_expr(_ARG_VAR_R), "renv-root")),
			"RENV_PATHS_RENV": _newArg(false, path.join(_expr(_ARG_VAR_R_VENV), "renv")),
			"RENV_PATHS_LOCKFILE": _newArg(false, path.join(_expr(_ARG_VAR_PKG), descriptor.dependencies.lockFile)),
			"RENV_CONFIG_AUTO_SNAPSHOT": _newArg(true, "FALSE"),
			"RENV_CONFIG_SYNCHRONIZED_CHECK": _newArg(true, "FALSE")
		}
	})
}


_loadRunEnvironment := func(operationMode, descriptor, softName, softPackage) {
	if descriptor.runEnv.type == "java" {
		return _loadJavaRunEnvironment(operationMode, descriptor)
	}
	if descriptor.runEnv.type == "python" {
		return _loadPythonRunEnvironment(operationMode, descriptor, softName, softPackage)
	}
	if descriptor.runEnv.type == "R" {
		return _loadRRunEnvironment(operationMode, descriptor, softName, softPackage)
	}

	ll.panic("run environment type %q is not currently supported by workflow-sdk",	descriptor.runEnv.type)
}

/**
 * @param operationMode: 'remote' | 'dev-local'
 */
_binPackageCallOptions := func(operationMode, softwareName, variables, descriptor, softPackage) {
	customPaths := []
	envs := ll.toStrict({})
	args := []
	runEnvType := "binary"

	// Real command should be:
	//   [<runEnv bin>] [<runEnv options>] [<entrypoint bin>] [<entrypoint options>] <cmd> <args>
	if (maps.containsKey(descriptor, "runEnv")) {
		runEnvInfo := _loadRunEnvironment(operationMode, descriptor, softwareName, softPackage)

		runEnvType = runEnvInfo.runEnvType
		if len(runEnvInfo.variables) > 0 {
			variables = append(variables, runEnvInfo.variables...)
		}
		if len(runEnvInfo.customPaths) > 0 {
			customPaths = append(customPaths, runEnvInfo.customPaths...)
		}
		if len(runEnvInfo.envs) > 0 {
			for n, v in runEnvInfo.envs {
				envs[n] = v
			}
		}
	}

	ll.assert(
		len(descriptor.cmd) != 0,
		"cannot render final command for software: empty 'cmd' and 'command' in software descriptor")

	cmd := _newArg(false, descriptor.cmd[0])

	for arg in splice(descriptor.cmd, 1) {
		args = append(args, _newArg(false, arg))
	}

	return ll.toStrict({
		runEnvType: runEnvType,
		variables: variables,
		customPaths: customPaths,
		cmd: cmd,
		args: args,
		envs: envs
	})
}

_devLocalPackageCallOptions := func(softwareName, localDescriptor) {
	softPackage := pkg.use({
		hash: localDescriptor.hash,
		path: localDescriptor.path,
		descriptor: json.encode(ll.fromStrict(localDescriptor)),
		origin: {
			registry: "dev-local",
			url: "file://" + localDescriptor.path,
			packageName: softwareName
		}
	}).package()

	variables := [ _newRefVar(_ARG_VAR_PKG, softwareName, softPackage) ]

	return _binPackageCallOptions("dev-local", softwareName, variables, localDescriptor, softPackage)
}

_remotePackageCallOptions := func(softwareName, binaryDescriptor) {
	softPackage := _installSoftware(binaryDescriptor.registry, binaryDescriptor.package)

	variables := [ _newRefVar(_ARG_VAR_PKG, softwareName, softPackage) ]

	return _binPackageCallOptions("remote", softwareName, variables, binaryDescriptor, softPackage)
}

/** Turns a given software to a list of options that needs to be passed to run cmd builder.
 * Creates resources to install a software
 * and runs R or Python env builder templates
 * if it's necessary. */
swToRunCmdOptions := func(softwareName, softwareVersion, softwareDescriptor) {
	ll.assert(is_string(softwareName),
		"exec.internal.swToRunCmdOptions: software name must be a string, got %v", softwareName)
	ll.assert(is_string(softwareVersion),
		"exec.internal.swToRunCmdOptions: software version must be a string, got %v", softwareVersion)
	validation.assertJsonSchema(softwareDescriptor, desc.scheme,
		"exec.internal.swToRunCmdOptions: descriptor does not fit schema")

	result := undefined
	if maps.containsKey(softwareDescriptor, "local") {
		result = _devLocalPackageCallOptions(softwareName, softwareDescriptor.local)
	} else if maps.containsKey(softwareDescriptor, "binary") {
		result = _remotePackageCallOptions(softwareName, softwareDescriptor.binary)
	} else {
		ll.panic(
			"Unable to run software %s v%s: 'binary' execution mode is not enabled in software descriptor",
			softwareName, softwareVersion)
	}

	// Clone result fields explicitly here
	// just to have a gist of what the function returns.
	return ll.toStrict({
		runEnvType: result.runEnvType,
		variables: result.variables,
		customPaths: result.customPaths,
		cmd: result.cmd,
		args: result.args,
		envs: result.envs
	})
}

binaryRunOptions := func(runOptions, mnzEnvs) {
	validation.assertJsonSchema(mnzEnvs, {"any": validation.reference})

	runCmdOpts := undefined
	onlyStrings := false
	if (is_undefined(ll.fromStrict(runOptions).software)) {
		//
		// Simple local command run, no software packages involved (backward compatibility)
		//
		runCmdOpts = _directCallOptions(runOptions)
		onlyStrings = true
	} else {
		software := runOptions.software
		descriptor := software.descriptor

		runCmdOpts = swToRunCmdOptions(software.name, software.version, descriptor)
	}

	// adds exec builder's defined options from run options.
	for arg in runOptions.args {
		runCmdOpts.args = append(runCmdOpts.args, _newArg(onlyStrings, arg))
	}
	for name, val in runOptions.envs {
		runCmdOpts.envs[name] = _newArg(onlyStrings, val)
	}

	for name, val in mnzEnvs { // can be empty
		// if it's not empty, then we create an env that has
		// a result of monetization client.
		runCmdOpts.envs[name] = _newArg(false, _expr(_ARG_VAR_MNZ))

		runCmdOpts.variables = append(runCmdOpts.variables,
			_newRefVar(_ARG_VAR_MNZ, "monetization", val))
	}


	return oop.inherit(runOptions, ll.fromStrict(runCmdOpts))
}

prepareCommandRun := func(wd, opts) {
	runBuilder := runcmd.builder(wd)

	// Make installed packages to be available for the command run
	for varInfo in opts.variables {
		runBuilder.ref(varInfo.refName, varInfo.reference)
		runBuilder.substitutionRule(varInfo.varName, varInfo.refName)
	}

	// Patch command's PATH env variable
	for p in opts.customPaths {
		runBuilder.addToPath(p.type, p.value)
	}

	// Configure environment variables required for correct command run environment setup
	for name, value in opts.envs {
		runBuilder.envTyped(name, value.type, value.value)
	}

	return runBuilder
}

_activateRenv := func(wd, opts) {
	activateRenv := prepareCommandRun(wd, opts)
	activateRenv.
		cmd("R").
		arg("-e").arg("renv::activate()")

	activateRenvRun := activateRenv.build()

	return activateRenvRun
}

prepareWDForRunEnvironment := func(wd, opts) {
	if (!maps.containsKey(opts, "runEnvType")) {
		return wd
	}

	if (opts.runEnvType == "R") {
		return _activateRenv(wd, opts).workdir
	}

	return wd
}

export {
	swToRunCmdOptions           : swToRunCmdOptions,
	binaryRunOptions			: binaryRunOptions,

	prepareWDForRunEnvironment	: prepareWDForRunEnvironment,
	prepareCommandRun			: prepareCommandRun
}
