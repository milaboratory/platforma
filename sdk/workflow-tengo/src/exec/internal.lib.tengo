/**
 * Internal 'exec' module library.
 *
 * NOT INTENDEND FOR USE OUTSIDE 'exec' MODULE.
 * May completely change API from release to release.
 */

ll := import(":ll")
json := import("json")
times := import("times")
text := import("text")
oop := import(":oop")
maps := import(":maps")
path := import(":path")
pkg := import(":exec.package")
runcmd := import(":exec.runcmd")
python := import(":exec.python")
R := import(":exec.R")
constants := import(":exec.constants")
desc := import(":exec.descriptor")

// Variables, substituted in command arguments and environment variable values.
_ARG_VAR_PKG            := "pkg"  // abs path to software package
_ARG_VAR_JAVA           := "java" // abs path to 'java' run environment
_ARG_VAR_PYTHON         := "python" // abs path to 'python' run environment
_ARG_VAR_R              := "R" // abs path to 'R' run environment runtime
_ARG_VAR_R_VENV         := "rVenv" // abs path to 'R' portable virtual environment

/** Converts the args above to the expressions. */
_expr := func(descriptor, varName) {
	// deprecated, remove on 15 Jan 2025
	if !desc.supportExpressions(descriptor) {
		return "{" + varName + "}"
	}

	return "{{" + varName + "}}"
}

/**
 * Create new argument with a type. The type can be either simple, expression or variable.
 * The types advice Platforma Backend to interpret the argument.
 */
_newArg := func(type, value) {
	return ll.toStrict({
		type: type,
		value: value
	})
}

/**
 * Decides whether we need a simple argument or an expression one.
 * For a month, we keep deprecated variable arguments.
 *
 * @param isString: boolean - whether it is a string or a difficult (expression) argument.
 */
_typedArg := func(isString, entrypointDescriptor, value) {
	if isString {
		return _newArg(constants.ARG_TYPE_STRING, value)
	}
	if desc.supportExpressions(entrypointDescriptor) {
		return _newArg(constants.ARG_TYPE_EXPRESSION, value)
	}
	return _newArg(constants.ARG_TYPE_VAR, value)
}

_newRefVar := func(entrypointDescriptor, varName, refName, reference) {
	// deprecated, remove on 15 Jan 2025
	if !desc.supportExpressions(entrypointDescriptor) {
		return ll.toStrict({
			varName: "{" + varName + "}",
			refName: refName,
			reference: reference
		})
	}

	return ll.toStrict({
		varName: varName,
		refName: refName,
		reference: reference
	})
}

_installSoftware := func(registry, pkgName) {
	archive := pkg.get(registry, pkgName).archive()
	return pkg.install(archive).package()
}

_directCallOptions := func(runOptions) {
	cmd := _typedArg(true, undefined, runOptions.cmd)
	args := []
	envs := {}

	for name, arg in runOptions.args {
		args = append(args, _typedArg(true, undefined, arg))
	}

	for name, val in runOptions.envs {
		envs[name] = _typedArg(true, undefined, val)
	}

	return oop.inherit(runOptions, {
		variables: [],
		customPaths: [],
		cmd: cmd,
		args: args,
		envs: envs
	})
}

_loadJavaRunEnvironment := func(entrypointDescriptor, operationMode, descriptor) {
	javaPkg := _installSoftware(descriptor.runEnv.registry, descriptor.runEnv.package)
	javaRefVar := _newRefVar(entrypointDescriptor, _ARG_VAR_JAVA, descriptor.runEnv.name, javaPkg)

	return ll.toStrict({
		runEnvType: "java",

		variables: [ javaRefVar ],
		customPaths: [ _typedArg(false, entrypointDescriptor, path.join(_expr(entrypointDescriptor, _ARG_VAR_JAVA), descriptor.runEnv.binDir)) ],
		envs: {}
	})
}

_loadPythonRunEnvironment := func(entrypointDescriptor, operationMode, descriptor, softName, softPkg) {
	venvBuilder := python.venvBuilder().
		software(softPkg).
		runEnvDescriptor(descriptor.runEnv).
		dependencies(descriptor.dependencies)

	if !is_undefined(descriptor.toolset) && descriptor.toolset != "" {
		venvBuilder.useToolset(descriptor.toolset)
	}

	venv := venvBuilder.
		cacheDays(7).
		build().
		venv()

	venvRoot := path.join(_expr(entrypointDescriptor, _ARG_VAR_PYTHON), "venv")
	venvRefKey := softName + "/venv"

	pythonRefVar := _newRefVar(entrypointDescriptor, _ARG_VAR_PYTHON, venvRefKey, venv)

	return ll.toStrict({
		runEnvType: "python",

		variables: [ pythonRefVar ],
		customPaths: [ _typedArg(false, entrypointDescriptor, path.join(venvRoot, "bin")) ],
		envs: {
			"VIRTUAL_ENV": _typedArg(false, entrypointDescriptor, venvRoot)
		}
	})
}

_loadRRunEnvironment := func(entrypointDescriptor, operationMode, descriptor, softName, softPkg) {
	renvBuilder := R.rVenvBuilder().
		operationMode(operationMode).
		software(softPkg).
		runEnvDescriptor(descriptor.runEnv).
		dependencies(descriptor.dependencies)

	if !is_undefined(descriptor.toolset) && descriptor.toolset != "" {
		renvBuilder.useToolset(descriptor.toolset)
	}

	rRuntime := renvBuilder.
		cacheDays(7).
		build()

	rEnv := rRuntime.venv()
	rPackage := rRuntime.R()

	rBinDir := path.join(_expr(entrypointDescriptor, _ARG_VAR_R), descriptor.runEnv.binDir)

	rRefKey := softName + "/R-runtime"
	rRefVar := _newRefVar(entrypointDescriptor, _ARG_VAR_R, rRefKey, rPackage)

	rEnvRefKey := softName + "/R-virtual-env"
	rEnvRefVar := _newRefVar(entrypointDescriptor, _ARG_VAR_R_VENV, rEnvRefKey, rEnv)

	return ll.toStrict({
		runEnvType: "R",

		variables: [ rRefVar, rEnvRefVar ],
		customPaths: [ _typedArg(false, entrypointDescriptor, rBinDir) ],
		envs: {
			"R_HOME_DIR": _typedArg(false, entrypointDescriptor, _expr(entrypointDescriptor, _ARG_VAR_R)),
			"RENV_PATHS_ROOT": _typedArg(false, entrypointDescriptor, path.join(_expr(entrypointDescriptor, _ARG_VAR_R), "renv-root")),
			"RENV_PATHS_RENV": _typedArg(false, entrypointDescriptor, path.join(_expr(entrypointDescriptor, _ARG_VAR_R_VENV), "renv")),
			"RENV_PATHS_LOCKFILE": _typedArg(false, entrypointDescriptor, path.join(_expr(entrypointDescriptor, _ARG_VAR_PKG), descriptor.dependencies.lockFile)),
			"RENV_CONFIG_AUTO_SNAPSHOT": _typedArg(true, entrypointDescriptor, "FALSE"),
			"RENV_CONFIG_SYNCHRONIZED_CHECK": _typedArg(true, entrypointDescriptor, "FALSE")
		}
	})
}


_loadRunEnvironment := func(entrypointDescriptor, operationMode, descriptor, softName, softPackage) {
	if descriptor.runEnv.type == "java" {
		return _loadJavaRunEnvironment(entrypointDescriptor, operationMode, descriptor)
	}
	if descriptor.runEnv.type == "python" {
		return _loadPythonRunEnvironment(entrypointDescriptor, operationMode, descriptor, softName, softPackage)
	}
	if descriptor.runEnv.type == "R" {
		return _loadRRunEnvironment(entrypointDescriptor, operationMode, descriptor, softName, softPackage)
	}

	ll.panic("run environment type %q is not currently supported by workflow-sdk",	descriptor.runEnv.type)
}

/**
 * @param operationMode: 'remote' | 'dev-local'
 */
_binPackageCallOptions := func(operationMode, runOptions, variables, descriptor, softPackage) {
	customPaths := []
	envs := ll.toStrict({})
	args := []
	runEnvType := "binary"
	entrypointDescriptor := runOptions.software.descriptor

	// Real command should be:
	//   [<runEnv bin>] [<runEnv options>] [<entrypoint bin>] [<entrypoint options>] <cmd> <args>
	if (maps.containsKey(descriptor, "runEnv")) {
		runEnvInfo := _loadRunEnvironment(
			entrypointDescriptor,
			operationMode,
			descriptor,
			runOptions.software.name,
			softPackage
		)

		runEnvType = runEnvInfo.runEnvType
		if len(runEnvInfo.variables) > 0 {
			variables = append(variables, runEnvInfo.variables...)
		}
		if len(runEnvInfo.customPaths) > 0 {
			customPaths = append(customPaths, runEnvInfo.customPaths...)
		}
		if len(runEnvInfo.envs) > 0 {
			for n, v in runEnvInfo.envs {
				envs[n] = v
			}
		}
	}

	ll.assert(
		len(descriptor.cmd) != 0 || len(descriptor.command) != 0,
		"cannot render final command for software: empty 'cmd' and 'command' in software descriptor")

	command := descriptor.command
	if !desc.supportExpressions(entrypointDescriptor) {
		command = descriptor.cmd
	}
	cmd := _typedArg(false, entrypointDescriptor, command[0])

	for arg in splice(command, 1) {
		args = append(args, _typedArg(false, entrypointDescriptor, arg))
	}
	for arg in runOptions.args {
		args = append(args, _typedArg(true, entrypointDescriptor, arg))
	}

	for name, val in runOptions.envs {
		envs[name] = _typedArg(true, entrypointDescriptor, val)
	}

	return oop.inherit(runOptions, {
		runEnvType: runEnvType,
		variables: variables,
		customPaths: customPaths,
		cmd: cmd,
		args: args,
		envs: envs
	})
}

_devLocalPackageCallOptions := func(runOptions) {
	software := runOptions.software
	entrypointDescriptor := software.descriptor
	localDescriptor := software.descriptor.local

	softPackage := pkg.use({
		hash: localDescriptor.hash,
		path: localDescriptor.path,
		descriptor: json.encode(ll.fromStrict(software.descriptor)),
		origin: {
			registry: "dev-local",
			url: "file://" + localDescriptor.path,
			packageName: software.descriptor.name
		}
	}).package()

	variables := [ _newRefVar(entrypointDescriptor, _ARG_VAR_PKG, software.name, softPackage) ]

	return _binPackageCallOptions("dev-local", runOptions, variables, localDescriptor, softPackage)
}

_remotePackageCallOptions := func(runOptions) {
	software := runOptions.software
	entrypointDescriptor := software.descriptor
	binaryDescriptor := software.descriptor.binary

	softPackage := _installSoftware(binaryDescriptor.registry, binaryDescriptor.package)

	variables := [ _newRefVar(entrypointDescriptor, _ARG_VAR_PKG, software.name, softPackage) ]

	return _binPackageCallOptions("remote", runOptions, variables, binaryDescriptor, softPackage)
}

binaryRunOptions := func(runOptions) {
	if (is_undefined(ll.fromStrict(runOptions).software)) {
		//
		// Simple local command run, no software packages involved (backward compatibility)
		//
		return _directCallOptions(runOptions)
	}

	software := runOptions.software
	descriptor := software.descriptor

	if (maps.containsKey(descriptor, "local")) {
		return _devLocalPackageCallOptions(runOptions)
	}

	if (maps.containsKey(descriptor, "binary")) {
		return _remotePackageCallOptions(runOptions)
	}

	ll.panic("Unable to run software %s v%s: 'binary' execution mode is not enabled in software descriptor", software.name, software.version)
}

prepareCommandRun := func(wd, opts) {
	runBuilder := runcmd.builder(wd)

	// Make installed packages to be available for the command run
	for varInfo in opts.variables {
		runBuilder.ref(varInfo.refName, varInfo.reference)
		runBuilder.substitutionRule(varInfo.varName, varInfo.refName)
	}

	// Patch command's PATH env variable
	for p in opts.customPaths {
		runBuilder.addToPath(p.type, p.value)
	}

	// Configure environment variables required for correct command run environment setup
	for name, value in opts.envs {
		runBuilder.envTyped(name, value.type, value.value)
	}

	return runBuilder
}

_activateRenv := func(wd, opts) {
	activateRenv := prepareCommandRun(wd, opts)
	activateRenv.
		cmd("R").
		arg("-e").arg("renv::activate()")

	activateRenvRun := activateRenv.build()

	return activateRenvRun
}

prepareWDForRunEnvironment := func(wd, opts) {
	if (!maps.containsKey(opts, "runEnvType")) {
		return wd
	}

	if (opts.runEnvType == "R") {
		return _activateRenv(wd, opts).workdir
	}

	return wd
}

export {
	binaryRunOptions			: binaryRunOptions,

	prepareWDForRunEnvironment	: prepareWDForRunEnvironment,
	prepareCommandRun			: prepareCommandRun
}
