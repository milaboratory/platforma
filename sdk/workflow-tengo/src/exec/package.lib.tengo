ll := import(":ll")
smart := import(":smart")
oop := import(":oop")
maps := import(":maps")
validation := import(":validation")

runEnvDescriptorScheme := {
	registry: "string",
	package: "string",
	type: "string",
	binDir: "string"
}

binaryDescriptorScheme := {
	registry: "string",
	package: "string",
	cmd: ["string"],
	runEnv: runEnvDescriptorScheme
}

localDescriptorScheme := {
	hash: "string",
	path: "string",
	cmd: ["string"],
	runEnv: runEnvDescriptorScheme
}

descriptorScheme := {
	"isDev,omitempty": "bool",
	"binary,omitempty": binaryDescriptorScheme,
	"local,omitempty": localDescriptorScheme
}

softwareInfoScheme := {
	"name": "string",
	"version": "string",
	"descriptor": descriptorScheme
}

META_KEY_DESCRIPTOR := "ctl/runner/software/descriptor"

_RTYPE_PACKAGE_GET := { Name: "PackageGet/exec", Version: "1" }
_INPUT_PACKAGE_NAME := "packageName"
_INPUT_REGISTRY := "registry"
_OUTPUT_ARCHIVE := "archive"

_RTYPE_PACKAGE_INSTALL := { Name: "PackageInstall/exec", Version: "1" }
_INPUT_PACKAGE := "package"
_OUTPUT_SOFTWARE := "software"

_RTYPE_PACKAGE_USE := { Name: "PackageUse/exec", Version: "1" }
_INPUT_PACKAGE_USE_SETTINGS := "settings"

_useSettingsSchema := {
	hash: ["or", "bytes", "string"],
	path: "string",
	descriptor: "any",
	origin: {
		registry: "string",
		url: "string",
		packageName: "string"
	}
}

_createUseSettingsResource := func(settings) {
	validation.assertJsonSchema(settings, _useSettingsSchema, "package.use(<settings>): settings have invalid format")

	return smart.createJsonResource(settings)
}

get := func(registryName, pkgName) {
	res := smart.structBuilder(_RTYPE_PACKAGE_GET)

	res.inputs()[_INPUT_REGISTRY].setRefOrJson(registryName)
	res.inputs()[_INPUT_PACKAGE_NAME].setRefOrJson(pkgName)

	self := undefined
	self = oop.inherit(res, {
		/**
		 * Reference to the software package archive downloaded by 'get'
		 *
		 * @return archive: field - output field, where info on downloaded archive will appear
		 */
		archive: func() {
			return res.outputs()[_OUTPUT_ARCHIVE]
		}
	})

	return self
}

install := func(pkg) {
	ll.assert(smart.isReference(pkg),
		"package.install: <pkg> must be reference to software package. It is usually obtained from package.get().archive")

	res := smart.structBuilder(_RTYPE_PACKAGE_INSTALL)

	res.inputs()[_INPUT_PACKAGE].set(pkg)

	self := undefined
	self = oop.inherit(res, {
		/**
		 * Reference to installed software
		 *
		 * @return software: field - output field, where info on downloaded archive will appear
		 */
		software: func() {
			return res.outputs()[_OUTPUT_SOFTWARE]
		}
	})

	return self
}

use := func(settings) {
	res := smart.structBuilder(_RTYPE_PACKAGE_USE)

	settingsRes := _createUseSettingsResource(settings)

	res.inputs()[_INPUT_PACKAGE_USE_SETTINGS].set(settingsRes)

	self := undefined
	self = oop.inherit(res, {
		/**
		 * Reference to installed software
		 *
		 * @return software: field - output field, where info on downloaded archive will appear
		 */
		software: func() {
			return res.outputs()[_OUTPUT_SOFTWARE]
		}
	})

	return self
}

export ll.toStrict({
	softwareInfoScheme                 : softwareInfoScheme,
	binaryDescriptorScheme             : binaryDescriptorScheme,
	localDescriptorScheme              : localDescriptorScheme,
	runEnvDescriptorScheme             : runEnvDescriptorScheme,

	META_KEY_DESCRIPTOR                : META_KEY_DESCRIPTOR,

	get                                : get,
	install                            : install,
	use                                : use
})
