// exec.tpl

/**
 * Creates and fill a workdir, runs a command on it
 * and saves a chosen resulted files from this dir.
 */

self := import(":tpl")

ll := import(":ll")
smart := import(":smart")
render := import(":render")
workdir := import(":workdir")
runcmd := import(":exec.runcmd")
stream := import(":exec.stream")
pkg := import(":exec.package")
sets := import(":sets")
path := import(":path")
validation := import(":validation")
runenv := import(":exec.runenv")

self.defineOutputs("runEnv")

_createVenvWithPip := func(inputs) {
	pythonDescriptor := inputs.pythonDescriptor
	dependencies := ll.toStrict(inputs.dependencies)

	requirementsRef := dependencies["requirements"]

	//
	// Create and fill the workdir with files that were passed from inputs.
	//

	wdBuilder := workdir.builder()
	wdBuilder.addFile("requirements.txt", requirementsRef)
	wdBefore := wdBuilder.build()

	//
	// Build runcmd resource
	//

	runBuilder := runcmd.builder(wdBefore)
	runBuilder.
		ref("python-run-environment", inputs.python).
		substitutionRule("{python}", "python-run-environment").
		addToPath(path.join("{python}", pythonDescriptor.binDir), true)

	runBuilder.
		cmd("pip").
		arg("install").
		arg("--requirement").
		arg("requirements.txt")

	// Do we need 'light' queue for such tasks?
	runBuilder.
		inQueue("ui-tasks"). 
		stdout("./output").
		stderr("./output").
		nErrorLines(200)

	run := runBuilder.build()
	wdAfter := run.workdir

	runEnvSaver := runenv.saveBuilder(wdAfter).
		envType("python").
		addPath("venv").
		addPackage("python", inputs.python)

	runEnv := runEnvSaver.build().runEnv()

	return {
		runEnv: runEnv
	}
}

self.body(func(inputs) {
	// assert we have inputs we expect.
	validation.assertJsonSchema(inputs, runenv.pythonVenvInputSchema)

	toolset := inputs.toolset
	if toolset == "pip" {
		return _createVenvWithPip(inputs)
	}

	ll.panic("python dependencies toolset %q is not supported by current version of tengo-sdk", toolset)
})
