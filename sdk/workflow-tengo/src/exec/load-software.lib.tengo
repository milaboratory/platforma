/**
 * Library for loading software packages.
 */

ll := import(":ll")
json := import("json")
maps := import(":maps")
path := import(":path")
pkg := import(":exec.package")
runcmd := import(":exec.runcmd")
python := import(":exec.python")
R := import(":exec.R")
desc := import(":exec.descriptor")
validation := import(":validation")

//
// Variables, substituted in command arguments and environment variable values.
//
_ARG_VAR_PKG                 := "pkg"  // abs path to software package
_ARG_VAR_JAVA                := "java" // abs path to 'java' run environment

_ARG_VAR_PYTHON_VENV         := "python" // abs path to python virtual environment. WARNING: not change the name, it's used in other part of code
_ARG_VAR_PYTHON_RUN_ENV      := "python_run_env" // abs path to python run environment used to create venv
_ARG_VAR_VENV_BIN_DIR        := "venv_bin_dir" // name of bin dir in python venv depending on OS type (Scripts on Windows, bin on Unix)
_ARG_PYTHON_LOCAL_SCRIPT_DIR := "python_local_script_dir" // abs path to directory with local python scripts.
_ARG_PATH_DELIMETER          := "path_delimeter"

_ARG_VAR_R                   := "R" // abs path to 'R' run environment runtime
_ARG_VAR_R_VENV              := "rVenv" // abs path to 'R' portable virtual environment

/** Converts the args above to the expressions. */
_expr := func(varName) {
	return "{" + varName + "}"
}

_newRefVar := func(varName, refName, reference) {
	return ll.toStrict({
		varName: varName,
		refName: refName,
		reference: reference
	})
}

_installSoftware := func(registry, pkgName) {
	ll.assert(is_string(registry), "exec.internal._installSoftware(): registry is not a string, got: %v", registry, pkgName)
	ll.assert(is_string(pkgName), "exec.internal._installSoftware(): pkgName is not a string, got: %v", pkgName, registry)

	archive := pkg.get(registry, pkgName).archive()
	return pkg.install(archive).package()
}

_loadJavaRunEnvironment := func(operationMode, descriptor) {
	javaPkg := _installSoftware(descriptor.runEnv.registry, descriptor.runEnv.package)
	javaRefVar := _newRefVar(_ARG_VAR_JAVA, descriptor.runEnv.name, javaPkg)

	return ll.toStrict({
		runEnvType: "java",

		variables: [ javaRefVar ],
		customPaths: [ runcmd.expressionArg(path.join(_expr(_ARG_VAR_JAVA), descriptor.runEnv.binDir)) ],
		envs: {}
	})
}

_loadPythonRunEnvironment := func(operationMode, descriptor, softName, softPkg) {
	venvBuilder := python.venvBuilder().
		software(softPkg).
		runEnvDescriptor(descriptor.runEnv).
		dependencies(descriptor.dependencies)

	if !is_undefined(descriptor.toolset) && descriptor.toolset != "" {
		venvBuilder.useToolset(descriptor.toolset)
	}

	venv := venvBuilder.
		cacheDays(7).
		build()

	pythonRefVar := _newRefVar(_ARG_VAR_PYTHON_RUN_ENV, softName + "/python", venv.python())
	pythonVenvRefVar := _newRefVar(_ARG_VAR_PYTHON_VENV, softName + "/venv", venv.venv())
	venvBinDirRefVar := _newRefVar(_ARG_VAR_VENV_BIN_DIR, softName + "/binDir", venv.binDir() )
	pathDelimeterRefVar := _newRefVar(_ARG_PATH_DELIMETER, softName + "/pathDelimeter", venv.pathDelimeter())

	return ll.toStrict({
		runEnvType: "python",

		variables: [ pythonRefVar, pythonVenvRefVar, venvBinDirRefVar, pathDelimeterRefVar ],
		customPaths: [ runcmd.expressionArg(path.join(_expr(_ARG_VAR_PYTHON_VENV), "venv", _expr(_ARG_VAR_VENV_BIN_DIR))) ],
		envs: {
			"VIRTUAL_ENV": runcmd.expressionArg(path.join(_expr(_ARG_VAR_PYTHON_VENV), "venv")),
			"PYTHONPATH": runcmd.expressionArg(path.join(_expr(_ARG_VAR_PYTHON_RUN_ENV), descriptor.runEnv.binDir, "python_stdlib") + _expr(_ARG_PATH_DELIMETER) + _expr(_ARG_VAR_PKG))
		}
	})
}

_loadRRunEnvironment := func(operationMode, descriptor, softName, softPkg) {
	renvBuilder := R.rVenvBuilder().
		operationMode(operationMode).
		software(softPkg).
		runEnvDescriptor(descriptor.runEnv).
		dependencies(descriptor.dependencies)

	if !is_undefined(descriptor.toolset) && descriptor.toolset != "" {
		renvBuilder.useToolset(descriptor.toolset)
	}

	rRuntime := renvBuilder.
		cacheDays(7).
		build()

	rEnv := rRuntime.venv()
	rPackage := rRuntime.R()

	rBinDir := path.join(_expr(_ARG_VAR_R), descriptor.runEnv.binDir)

	rRefKey := softName + "/R-runtime"
	rRefVar := _newRefVar(_ARG_VAR_R, rRefKey, rPackage)

	rEnvRefKey := softName + "/R-virtual-env"
	rEnvRefVar := _newRefVar(_ARG_VAR_R_VENV, rEnvRefKey, rEnv)

	renvRootArg := path.join(_expr(_ARG_VAR_R), "renv-root")

	envs := {
		"RHOME": runcmd.expressionArg(_expr(_ARG_VAR_R)), // for Rscript (it uses RHOME instead of R_HOME)
		"R_HOME_DIR": runcmd.expressionArg(_expr(_ARG_VAR_R)), // for R startup script. It configures all the rest required for R to start.
		"RENV_PATHS_ROOT": runcmd.expressionArg(renvRootArg),
		"RENV_PATHS_BINARY": runcmd.expressionArg(path.join(renvRootArg, "binaries")),
		"RENV_PATHS_SOURCE": runcmd.expressionArg(path.join(renvRootArg, "sources")),
		"RENV_PATHS_CACHE": runcmd.expressionArg(path.join(renvRootArg, "cache")),
		"RENV_PATHS_RENV": runcmd.expressionArg(path.join(_expr(_ARG_VAR_R_VENV), "renv")),
		"RENV_PATHS_LOCKFILE": runcmd.expressionArg(path.join(renvRootArg, "renv.lock"))
	}

	// Force block developer to install R packages when building R run environment.
	// Most of our commercial clients have very restricted network without access to pypi, CRAN and other external resources.
	// The only firewall rule we're guaranteed to have is to our own registries.
	envs["RENV_CONFIG_REPOS_OVERRIDE"] = runcmd.expressionArg(path.join(_expr(_ARG_VAR_R), "packages"))

	return ll.toStrict({
		runEnvType: "R",

		variables: [ rRefVar, rEnvRefVar ],
		customPaths: [ runcmd.expressionArg(rBinDir) ],
		envs: envs
	})
}


_loadRunEnvironment := func(operationMode, descriptor, softName, softPackage) {
	if descriptor.runEnv.type == "java" {
		return _loadJavaRunEnvironment(operationMode, descriptor)
	}
	if descriptor.runEnv.type == "python" {
		return _loadPythonRunEnvironment(operationMode, descriptor, softName, softPackage)
	}
	if descriptor.runEnv.type == "R" {
		return _loadRRunEnvironment(operationMode, descriptor, softName, softPackage)
	}

	ll.panic("run environment type %q is not currently supported by workflow-sdk",	descriptor.runEnv.type)
}

/**
 * @param operationMode: "remote" | "dev-local"
 */
_binPackageCallOptions := func(operationMode, softwareName, variables, descriptor, softPackage) {
	customPaths := []
	envs := ll.toStrict({})
	args := []
	runEnvType := "binary"

	// Real command should be:
	//   [<runEnv bin>] [<runEnv options>] [<entrypoint bin>] [<entrypoint options>] <cmd> <args>
	if (maps.containsKey(descriptor, "runEnv")) {
		runEnvInfo := _loadRunEnvironment(operationMode, descriptor, softwareName, softPackage)

		runEnvType = runEnvInfo.runEnvType
		if len(runEnvInfo.variables) > 0 {
			variables = append(variables, runEnvInfo.variables...)
		}
		if len(runEnvInfo.customPaths) > 0 {
			customPaths = append(customPaths, runEnvInfo.customPaths...)
		}
		if len(runEnvInfo.envs) > 0 {
			for n, v in runEnvInfo.envs {
				envs[n] = v
			}
		}
	}

	ll.assert(
		len(descriptor.cmd) != 0,
		"cannot render final command for software: empty 'cmd' and 'command' in software descriptor")

	cmd := runcmd.expressionArg(descriptor.cmd[0])

	for arg in splice(descriptor.cmd, 1) {
		args = append(args, runcmd.expressionArg(arg))
	}

	return ll.toStrict({
		runEnvType: runEnvType,
		variables: variables,
		customPaths: customPaths,
		cmd: cmd,
		args: args,
		envs: envs
	})
}

_devLocalPackageCallOptions := func(softwareName, localDescriptor) {
	softPackage := pkg.use({
		hash: localDescriptor.hash,
		path: localDescriptor.path,
		descriptor: json.encode(ll.fromStrict(localDescriptor)),
		origin: {
			registry: "dev-local",
			url: "file://" + localDescriptor.path,
			packageName: softwareName
		}
	}).package()

	variables := [ _newRefVar(_ARG_VAR_PKG, softwareName, softPackage) ]

	return _binPackageCallOptions("dev-local", softwareName, variables, localDescriptor, softPackage)
}

_remotePackageCallOptions := func(softwareName, binaryDescriptor) {
	softPackage := _installSoftware(binaryDescriptor.registry, binaryDescriptor.package)

	variables := [ _newRefVar(_ARG_VAR_PKG, softwareName, softPackage) ]

	return _binPackageCallOptions("remote", softwareName, variables, binaryDescriptor, softPackage)
}

/**
 * Turns a given software to a list of options that needs to be passed to run cmd builder.
 * Creates resources to install a software
 * and runs R or Python env builder templates
 * if it's necessary.
 *
 * The function returns a strict map with the following structure:
 * {
 *   runEnvType: string,
 *   variables: [
 *     {
 *       varName: string, // Name of the variable to be used in expression arguments, e.g. "pkg"
 *       refName: string, // A human-readable name for the reference, e.g., "my-package"
 *       reference: smart.reference // A reference to a resource, like a software package or a virtual environment.
 *     },
 *     ...
 *   ],
 *   customPaths: [
 *     {
 *       type: "expression",
 *       value: string, // A string with expression to be added to the PATH, e.g., "{pkg}/bin"
 *     },
 *     ...
 *   ],
 *   cmd: {
 *     type: "expression",
 *     value: string, // Command to execute as an expression, e.g., "{pkg}/bin/my-app"
 *   },
 *   args: [
 *     {
 *       type: "expression",
 *       value: string, // Command arguments as expressions, e.g., "--input={some_ref}"
 *     },
 *     ...
 *   ],
 *   envs: {
 *     <env_var_name>: {
 *       type: "expression",
 *       value: string, // Environment variable value as an expression.
 *     },
 *     ...
 *   }
 * }
 *
 * The `smart.reference` is an opaque type representing a handle to a resource within the system.
 * The `expression` type arguments are resolved at execution time, where variables like `{pkg}`
 * are substituted with the actual paths of the resources provided in the `variables` list.
 */
swToRunCmdOptions := func(softwareName, softwareVersion, softwareDescriptor) {
	ll.assert(is_string(softwareName),
		"exec.internal.swToRunCmdOptions: software name must be a string, got %v", softwareName)
	ll.assert(is_string(softwareVersion),
		"exec.internal.swToRunCmdOptions: software version must be a string, got %v", softwareVersion)
	validation.assertType(softwareDescriptor, desc.scheme,
		"exec.internal.swToRunCmdOptions: descriptor does not fit schema")

	result := undefined
	if maps.containsKey(softwareDescriptor, "local") {
		result = _devLocalPackageCallOptions(softwareName, softwareDescriptor.local)
	} else if maps.containsKey(softwareDescriptor, "binary") {
		result = _remotePackageCallOptions(softwareName, softwareDescriptor.binary)
	} else {
		ll.panic(
			"Unable to run software %s v%s: 'binary' execution mode is not enabled in software descriptor",
			softwareName, softwareVersion)
	}

	// Clone result fields explicitly here
	// just to have a gist of what the function returns.
	return ll.toStrict({
		runEnvType: result.runEnvType,
		variables: result.variables,
		customPaths: result.customPaths,
		cmd: result.cmd,
		args: result.args,
		envs: result.envs
	})
}

export {
	swToRunCmdOptions: swToRunCmdOptions
}
