render := import(":render")
smart := import(":smart")
assets := import(":assets")
validation := import(":validation")

tpl := assets.importTemplate(":exec.delayed-compute-allocation.impl")

/**
 * Delays requesting compute quota until the workdir is ready.
 * This prevents a deadlock between storage and compute quotas.
 * A waiter ensures that a task requests compute quota only after
 * it has acquired the storage quota required for workdir creation,
 * which is a prerequisite for the computation itself.
 *
 * @param workdir reference to a workdir
 * @param req map with queue, cpu, ram. cpu and ram are optional.
 * @return reference to a compute allocation
 */
create := func(workdir, req) {
	validation.assertType(req, {
		"queue": "string",
		"cpu,?": "number",
		"ram,?": ["or", "number", "string"]
	}, "request must be a valid request")

	reqMap := { queue: req.queue }
	if !is_undefined(req.cpu) {
		reqMap.cpu = req.cpu
	}
	if !is_undefined(req.ram) {
		reqMap.ram = req.ram
	}

	delayedComputeAllocation := render.createEphemeral(tpl, {
		request: smart.createJsonResource(reqMap),
		wd: workdir
	})
	return delayedComputeAllocation.output("allocation")
}

export {
	create: create
}
