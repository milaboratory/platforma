/** Contains a builder for monetization when we need to run monetization without exec (e.g. in pre-run). */

ll := import(":ll")
monetization := import(":exec.monetization_internal")
assets := import(":assets")
render := import(":render")
path := import(":path")
smart := import(":smart")
validation := import(":validation")

/**
 * Creates a builder for monetization operations that can be used without execution context.
 * This is useful for pre-run scenarios where we need to perform monetization checks.
 *
 * @param productKey - The product key to validate against
 * @return A builder object
 */
builder := func(productKey) {
	mnz := monetization.init()
	monetization.enable(mnz, productKey)
	monetization.setDryRun(mnz, true)

	date := undefined
	filesToAdd := {}
	filesToWrite := {}

	self := undefined
	self = ll.toStrict({
		setDate: func(newDate) {
			date = newDate
			return self
		},

		addFile: func(fileName, file, params) {
			ll.assert(is_string(fileName), "monetization.builder().addFile: fileName must be a string")
			ll.assert(smart.isReference(file), "monetization.builder().addFile: file must be a reference")

			fileName = path.canonize(fileName)
			filesToAdd[fileName] = file
			monetization.addFileParams(mnz, fileName, params)
			return self
		},

		writeFile: func(fileName, data, params) {
			validation.assertType(data, ["or",
				"string",
				"bytes",
				validation.reference])

			fileName = path.canonize(fileName)

			filesToWrite[fileName] = data
			monetization.addFileParams(mnz, fileName, params)

			return self
		},

		setUrl: func(url) {
			monetization.setUrl(mnz, url)
			return self
		},

		build: func() {
			ll.assert(!is_undefined(date), "monetization.builder().build: date must be set")

			// Don't DDoS milm service: here we deduplicate a monetization run,
			// but the client could control deduplication by providing a different date.
			// Thus, a deduplication is controlled from a client's side.
			// The template just runs monetization and returns dry-run info.
			result := render.create(
				assets.importTemplate(":exec.monetization_info"),
				{
					date: date, // solely for deduplication
					monetization: monetization.toJson(mnz),
					filesToAdd: filesToAdd,
					filesToWrite: filesToWrite
				}
			)

			return result.output("info")
		}
	})

	return self
}

export {
	builder: builder
}
