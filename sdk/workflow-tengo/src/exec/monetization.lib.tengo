/** Contains a builder for monetization when we need to run monetization without exec (e.g. in pre-run). */

ll := import(":ll")
monetization := import(":exec.monetization_internal")
assets := import(":assets")
render := import(":render")
smart := import(":smart")
validation := import(":validation")
loadSoftware := import(":exec.load-software")

mnzSw := assets.importSoftware("@platforma-open/milaboratories.software-small-binaries:mnz-client")

mznInfoTpl := assets.importTemplate(":exec.monetization_info")

/**
 * Creates a builder for monetization operations that can be used without execution context.
 * This is useful for pre-run scenarios where we need to perform monetization checks.
 *
 * @param productKey - The product key to validate against
 * @return A builder object
 */
builder := func(productKey) {
	mnz := monetization.init()
	monetization.enable(mnz, productKey)
	monetization.setDryRun(mnz, true)

	date := undefined
	filesToAdd := {}
	filesToWrite := {}

	self := undefined
	self = ll.toStrict({
		setDate: func(newDate) {
			date = newDate
			return self
		},

		/**
		 * Adds a run to the monetization builder.
		 *
		 * @param ...args:
		 *   {
		 *     file: reference | string | bytes,
		 *     params: {
		 *       arg: string,
		 *       metrics: ["string"]
		 *     }
		 *   }
		 *  - The arguments to add to the run
		 */
		addRun: func(...args) {
			validation.assertType(args, [{
				file: ["or", validation.reference, "string", "bytes"],
				params: monetization.argSchema
			}])

			monetization.appendRun(mnz)

			for _, arg in args {
				if smart.isReference(arg.file) {
					self.addFile(arg.file, arg.params)
				} else {
					self.writeFile(arg.file, arg.params)
				}
			}

			return self
		},

		/**
		 * Adds a file to the monetization builder.
		 *
		 * @param file: reference - The file to add
		 * @param params: {
		 *   arg: string,
		 *   metrics: ["string"]
		 * } - The parameters for the file
		 */
		addFile: func(file, params) {
			ll.assert(smart.isReference(file), "monetization.builder().addFile: file must be a reference")

			fileName := monetization.argNameForLastRun(mnz, params.arg)
			filesToAdd[fileName] = file
			monetization.addArgToLastRun(mnz, fileName, params)

			return self
		},

		/**
		 * Writes a file to the monetization builder.
		 *
		 * @param data: ["or", "string", "bytes", reference] - The data to write to the file
		 * @param params: {
		 *   arg: string,
		 *   metrics: ["string"]
		 * } - The parameters for the file
		 */
		writeFile: func(data, params) {
			validation.assertType(data, ["or",
				"string",
				"bytes",
				validation.reference])

			fileName := monetization.argNameForLastRun(mnz, params.arg)
			filesToWrite[fileName] = data
			monetization.addArgToLastRun(mnz, fileName, params)

			return self
		},

		/**
		 * Sets the dry-run URL for test purposes.
		 */
		setUrl: func(url) {
			monetization.setUrl(mnz, url)
			return self
		},

		build: func() {
			ll.assert(!is_undefined(date), "monetization.builder().build: date must be set")

			mnzPlan := loadSoftware.loadSoftware(mnzSw)

			// Don't DDoS milm service: here we deduplicate a monetization run,
			// but the client could control deduplication by providing a different date.
			// Thus, a deduplication is controlled from a client's side.
			// The template just runs monetization and returns dry-run info.
			result := render.create(
				mznInfoTpl,
				{
					date: date, // solely for deduplication
					monetization: monetization.toJson(mnz),
					filesToAdd: filesToAdd,
					filesToWrite: filesToWrite,
					mnzPlan: mnzPlan
				}
			)

			return result.output("info")
		}
	})

	return self
}

export {
	builder: builder
}
