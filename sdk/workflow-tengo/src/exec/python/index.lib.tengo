times := import("times")

ll := import(":ll")
oop := import(":oop")
validation := import(":validation")
assets := import(":assets")
smart := import(":smart")
render := import(":render")
pkg := import(":exec.package")
internal := import(":exec.python.internal")
runenv := import(":exec.runenv")
desc := import(":exec.descriptor")

_OUTPUT_RUN_ENV       := "runEnv"
_OUTPUT_BIN_DIR       := "binDir"

createVenvTpl := assets.importTemplate(":exec.python.create-venv")

pythonVenvBuilder := func() {
	self := undefined

	toolset := "pip"
	pythonDescriptor := undefined
	softwareRef := undefined
	dependencies := undefined
	cache := 0

	self = {
		useToolset: func(name) {
			validation.assertType(name, "string",
				"exec.python.useToolset: <name> must be valid name of python packaging toolset (pip, pipenv and so on)")
			ll.assert(name != "", "exec.python.useToolset: toolset name must not be empty")

			toolset = name
			return self
		},

		runEnvDescriptor: func(descriptor) {
			validation.assertType(descriptor, desc.runEnvScheme, "exec.python.runEnvDescriptor: <descriptor> must be run environment specification")
			ll.assert(descriptor.type == "python", "exec.python.runEnvDescriptor: not a 'python' run environment: %q", descriptor.type)

			pythonDescriptor = ll.fromStrict(descriptor)
			return self
		},

		software: func(pkgRef) {
			validation.assertType(pkgRef, validation.reference, "exec.python.software: <pkgRef> must be a reference to software package")

			softwareRef = pkgRef
			return self
		},

		dependencies: func(deps) {
			validation.assertType(deps, { "any": "string" }, "exec.python.dependencies: <deps> must be map of reference file paths")

			dependencies = deps
			return self
		},

		/**
		 * Sets the cache time in milliseconds.
		 *
		 * @param millis: number
		 */
		cacheMillis: func(millis) {
			ll.assert(is_int(millis) && millis > 0, "exec.python.cacheMillis: cache time must be a number of milliseconds")
			cache = millis * times.millisecond
			return self
		},

		/**
		 * Sets the cache time in seconds.
		 *
		 * @param seconds: number
		 */
		cacheSeconds: func(seconds) {
			ll.assert(is_int(seconds) && seconds > 0, "exec.python.cacheSeconds: cache time must be a number of seconds")
			cache = seconds * times.second
			return self
		},

		/**
		 * Sets the cache time in minutes.
		 *
		 * @param minutes: number
		 */
		cacheMinutes: func(minutes) {
			ll.assert(is_int(minutes) && minutes > 0, "exec.python.cacheMinutes: cache time must be a number of minutes")
			cache = minutes * times.minute
			return self
		},

		/**
		 * Sets the cache time in hours.
		 *
		 * @param hours: number
		 */
		cacheHours: func(hours) {
			ll.assert(is_int(hours) && hours > 0, "exec.python.cacheHours: cache time must be a number of hours")
			cache = hours * times.hour
			return self
		},

		/**
		 * Sets the cache time in days
		 *
		 * @param days: number
		 */
		cacheDays: func(days) {
			ll.assert(is_int(days) && days > 0, "exec.python.cacheDays: cache time must be a number of days")
			cache = days * times.hour * 24
			return self
		},

		/**
		 * @deprecated, use cacheMillis, cacheSeconds, cacheMinutes, cacheHours and cacheDays instead.
		 * Sets the cache time.
		 *
		 * @param time: duration - the cache time from 'times' library.
		 */
		cache: func(time) {
			ll.assert(
				is_int(time),
				"exec.python.cache: cache time must be an integer. " +
					"Did you forget to import a standard tengo library 'times'?")
			cache = time
			return self
		},

		build: func() {
			depsMap := runenv.loadDependencyFiles(softwareRef, dependencies)

			archive := pkg.get(pythonDescriptor.registry, pythonDescriptor.package).archive()
			pythonPkg := pkg.install(archive).package()

			pyVenvInputs := {
				toolset: toolset,
				dependencies: depsMap,
				// software: softwareRef,
				pythonDescriptor: pythonDescriptor,
				python: pythonPkg
			}

			validation.assertType(pyVenvInputs, internal.pythonVenvInputSchema, "incomplete python runenv configuration")

			tpl := render.create(createVenvTpl, pyVenvInputs)

			self := undefined
			self = ll.toStrict(oop.inherit(tpl, {
				/**
				 * Python run environment package reference.
				 * @return python: smart.field - a reference to the python run environment package.
				 */
				python: func() {
					return pythonPkg
				},

				/**
				 * Name of bin directory in python venv depending on OS type (Scripts on Windows, bin on Unix).
				 * @return binDir: smart.field - name of bin directory in python venv.
				 */
				binDir: func() {
					return tpl.output(_OUTPUT_BIN_DIR, cache)
				},

				/**
				 * Python virtual environment with all dependencies installed.
				 *
				 * @return venv: smart.field - a reference to the runenv with python venv inside.
				 */
				venv: func() {
					return tpl.output(_OUTPUT_RUN_ENV, cache)
				}
			}))

			return self
		}
	}

	return self
}

export ll.toStrict({
	venvBuilder                         : pythonVenvBuilder
})
