/**
* Return the path to the virtualenv's binaries directory.
*/

self := import(":tpl.light")

desc := import(":exec.descriptor")
feats := import(":feats")
constants := import(":exec.constants")
runcmd := import(":exec.runcmd")
path := import(":path")
workdir := import(":workdir")
validation := import(":validation")
text := import("text")

self.defineOutputs("binPath")
self.defineOutputs("osPathDelimeter")

self.prepare(func(inputs){
	validation.assertType(inputs, {
		pythonPackage: validation.reference,
	    pythonDescriptor: desc.runEnvScheme
	})
   	wdBefore := workdir.builder().build()


    pythonPackage := inputs.pythonPackage
    pythonDescriptor := inputs.pythonDescriptor

    t := feats.commandExpressions ? constants.ARG_TYPE_EXPRESSION : constants.ARG_TYPE_VAR
	pythonRule := feats.commandExpressions ? "python" : "{python}"

	builder := runcmd.builder(wdBefore)
	builder.
		ref("python-run-environment", pythonPackage).
		substitutionRule(pythonRule, "python-run-environment").
		addToPath(t, path.join("{python}", pythonDescriptor.binDir))

    getVenvBinPath := "import platform; print(platform.system().lower())"
	builder.
		cmd("python").
		arg("-c").
		arg(getVenvBinPath)

	builder.inQueue(constants.LIGHT_QUEUE)
	stdoutName := "output.txt"
	builder.stdout(stdoutName)
	run := builder.build()

	savedWd := workdir.save(run.workdir).
		saveFileContent(stdoutName).
		build()

	stdout := savedWd.filesContent.getFutureInputField(stdoutName)

    return {
        os: stdout
    }
})

self.body(func(inputs){
	validation.assertType(inputs, {
		os: validation.reference
	})

   os := text.trim(string(inputs.os.getData()),"\n \r\t")
    binPath := "bin"
    osPathDelimeter := ":"
    if os == "windows" {
       binPath = "Scripts"
       osPathDelimeter = ";"
    }

   return {
     binPath: binPath,
     osPathDelimeter: osPathDelimeter
   }
})
