/**
 * Install dependencies into python virtual environment using standard python toolchain
 */

self := import(":tpl.light")
feats := import(":feats")

ll := import(":ll")
text := import("text")
workdir := import(":workdir")
runcmd := import(":exec.runcmd")
path := import(":path")
validation := import(":validation")
constants := import(":exec.constants")
desc := import(":exec.descriptor")
pkg := import(":exec.package")

self.defineOutputs("runEnv")

_runInVenv := func(python, venv, wd, pythonBinDir, pythonVenvBinDir) {
	// DEPRECATED: remove after 15 Mar 2025
	t := feats.commandExpressions ? constants.ARG_TYPE_EXPRESSION : constants.ARG_TYPE_VAR
	pythonVenvVar := feats.commandExpressions ? "python_venv" : "{python_venv}"
	pythonRunenvVar := feats.commandExpressions ? "python_runenv" : "{python_runenv}"

	return runcmd.builder(wd).
		inQueue(pkg.DEFAULT_ALLOCATION_QUEUE).
		cpu(pkg.DEFAULT_ALLOCATION_CPU).
		mem(pkg.DEFAULT_ALLOCATION_RAM).
		ref("python-venv", venv).
		ref("python-run-environment", python).
		substitutionRule(pythonVenvVar, "python-venv").
		substitutionRule(pythonRunenvVar, "python-run-environment").
		addPathTyped(t, path.join("{python_venv}", "venv", pythonVenvBinDir)).
		envTyped("VIRTUAL_ENV", t, path.join("{python_venv}", "venv")).
		envTyped("PYTHONHOME", t, "{python_runenv}").
		envTyped("PYTHONPATH", t, path.join("{python_runenv}", pythonBinDir, "python_stdlib"))
}

/**
 * @param python: smart.reference - python run environment package.
 * @param venv: smart.reference - python virtual environment.
 * @param dependencies: {"any": smart.reference} - dependencies map.
 * @param pythonDescriptor: desc.runEnvScheme - python run environment descriptor.
 * @param pythonVenvBinDir: string - name of bin directory in python venv depending on OS type (Scripts on Windows, bin on Unix).
 */
_installPipDependencies := func(python, venv, dependencies, pythonDescriptor, pythonVenvBinDir) {
	requirementsRef := dependencies.requirements

	wdForDeps := workdir.builder().
		inQueue(pkg.DEFAULT_ALLOCATION_QUEUE).
		cpu(pkg.DEFAULT_ALLOCATION_CPU).
		mem(pkg.DEFAULT_ALLOCATION_RAM).
		addFile("requirements.txt", requirementsRef).
		build()

	depsBuilder := _runInVenv(python, venv, wdForDeps, pythonDescriptor.binDir, pythonVenvBinDir)

	// DEPRECATED: remove after 15 Mar 2025
	t := feats.commandExpressions ? constants.ARG_TYPE_EXPRESSION : constants.ARG_TYPE_VAR

	if !is_undefined(pythonDescriptor.envVars) {
		for envVar in pythonDescriptor.envVars {
			split := text.split(envVar, "=")
			depsBuilder.envTyped(split[0], t, split[1])
		}
	}

	depsBuilder.
		cmd("python").arg("-m").
		arg("pip").arg("install").
		arg("--timeout").arg("600"). // timeout in seconds
		arg("--requirement").arg("requirements.txt").
		arg("--find-links").argTyped(t, "{python_runenv}/packages/").
		arg("--no-index")

	depsBuilder.
		inQueue(pkg.DEFAULT_ALLOCATION_QUEUE).
		cpu(pkg.DEFAULT_ALLOCATION_CPU).
		mem(pkg.DEFAULT_ALLOCATION_RAM).
		stdout("./output").
		stderr("./output").
		nErrorLines(20)

	run := depsBuilder.build()
	return run
}

self.prepare(func(inputs) {
	// assert we have inputs we expect.
	validation.assertType(inputs, {
		python: validation.reference,
		venv: validation.reference,
		toolset: "string",
		dependencies: {"any": validation.reference},
		pythonDescriptor: desc.runEnvScheme,
		pythonVenvBinDir: "string"
	})

	toolset := inputs.toolset
	if toolset == "pip" {
		depsInstall := _installPipDependencies(
			inputs.python,
            inputs.venv,
            inputs.dependencies,
            inputs.pythonDescriptor,
            inputs.pythonVenvBinDir
		)
		return {
			runEnv: inputs.venv,
			sync: depsInstall.workdir // we need it to make 'body' wait for dependencies installation into venv
		}
	}

	ll.panic("python dependencies toolset %q is not supported by current version of workflow-sdk", toolset)
})

// We split the template into prepare and body to install dependencies into venv before returning it to the caller
self.body(func(inputs) {
	return {
		runEnv: inputs.runEnv
	}
})
