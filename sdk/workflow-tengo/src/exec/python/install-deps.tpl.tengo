/**
 * Install dependencies into python virtual environment using standard python toolchain
 */

self := import(":tpl")

ll := import(":ll")
render := import(":render")
workdir := import(":workdir")
runcmd := import(":exec.runcmd")
path := import(":path")
validation := import(":validation")

self.defineOutputs("runEnv")

_runInVenv := func(wd, venv) {
	return runcmd.builder(wd).
		ref("python-venv", venv).
		substitutionRule("{python}", "python-venv").
		addToPath(path.join("{python}", "venv", "bin"), true).
		envVar("VIRTUAL_ENV", path.join("{python}", "venv"))
}

_installPipDependencies := func(venv, dependencies) {
	requirementsRef := dependencies.requirements

	wdForDeps := workdir.builder().
		addFile("requirements.txt", requirementsRef).
		build()

	depsBuilder := _runInVenv(wdForDeps, venv)

	depsBuilder.
		cmd("python").
		arg("-m").
		arg("pip").
		arg("install").
		arg("--requirement").
		arg("requirements.txt")

	depsBuilder.
		inQueue("light").
		stdout("./output").
		stderr("./output").
		nErrorLines(20)

	run := depsBuilder.build()
	return run
}

self.prepare(func(inputs) {
	// assert we have inputs we expect.
	validation.assertJsonSchema(inputs, {
		venv: validation.reference,
		toolset: "string",
		dependencies: {"any": validation.reference}
	})

	toolset := inputs.toolset
	if toolset == "pip" {
		depsInstall := _installPipDependencies(inputs.venv, inputs.dependencies)
		return {
			runEnv: inputs.venv,
			sync: depsInstall.workdir // we need it to make 'body' wait for dependencies installation into venv
		}
	}

	ll.panic("python dependencies toolset %q is not supported by current version of workflow-sdk", toolset)
})

// We split the template into prepare and body to install dependencies into venv vefore returning it to the caller
self.body(func(inputs) {
	return {
		runEnv: inputs.runEnv
	}
})
