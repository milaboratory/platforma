/**
 * Install dependencies into python virtual environment using standard python toolchain
 */

self := import(":tpl")
feats := import(":feats")

ll := import(":ll")
workdir := import(":workdir")
runcmd := import(":exec.runcmd")
path := import(":path")
validation := import(":validation")
constants := import(":exec.constants")

self.defineOutputs("runEnv")

_runInVenv := func(python, venv, wd) {
	// DEPRECATED: remove after 15 Mar 2025
	t := feats.commandExpressions ? constants.ARG_TYPE_EXPRESSION : constants.ARG_TYPE_VAR
	pythonRule := feats.commandExpressions ? "python" : "{python}"
	pythonRunenvRule := feats.commandExpressions ? "python_runenv" : "{python_runenv}"

	return runcmd.builder(wd).
		ref("python-venv", venv).
		ref("python-run-environment", python).
		substitutionRule(pythonRule, "python-venv").
		substitutionRule(pythonRunenvRule, "python-run-environment").
		addToPath(t, path.join("{python}", "venv", "bin")).
		envTyped("VIRTUAL_ENV", t, path.join("{python}", "venv"))
}

_installPipDependencies := func(python, venv, dependencies) {
	requirementsRef := dependencies.requirements

	wdForDeps := workdir.builder().
		addFile("requirements.txt", requirementsRef).
		build()

	depsBuilder := _runInVenv(python, venv, wdForDeps)

	// DEPRECATED: remove after 15 Mar 2025
	t := feats.commandExpressions ? constants.ARG_TYPE_EXPRESSION : constants.ARG_TYPE_VAR

	depsBuilder.
		cmd("python").arg("-m").
		arg("pip").arg("install").
		arg("--requirement").arg("requirements.txt").
		arg("--find-links").argTyped(t, "{python_runenv}/packages/")

	depsBuilder.
		inQueue("light").
		stdout("./output").
		stderr("./output").
		nErrorLines(20)

	run := depsBuilder.build()
	return run
}

self.prepare(func(inputs) {
	// assert we have inputs we expect.
	validation.assertJsonSchema(inputs, {
		python: validation.reference,
		venv: validation.reference,
		toolset: "string",
		dependencies: {"any": validation.reference}
	})

	toolset := inputs.toolset
	if toolset == "pip" {
		depsInstall := _installPipDependencies(inputs.python, inputs.venv, inputs.dependencies)
		return {
			runEnv: inputs.venv,
			sync: depsInstall.workdir // we need it to make 'body' wait for dependencies installation into venv
		}
	}

	ll.panic("python dependencies toolset %q is not supported by current version of workflow-sdk", toolset)
})

// We split the template into prepare and body to install dependencies into venv vefore returning it to the caller
self.body(func(inputs) {
	return {
		runEnv: inputs.runEnv
	}
})
