ll := import(":ll")
feats := import(":feats")

validation := import(":validation")
runcmd := import(":exec.runcmd")
path := import(":path")
desc := import(":exec.descriptor")
constants := import(":exec.constants")

rVenvInputSchema := {
	operationMode: "string",
	toolset: "string",
	dependencies: {"any": "string"},
	software: validation.reference,

	rDescriptor: desc.runEnvScheme,
	R: validation.reference
}

runRBuilder := func(operationMode, wd, rPackage, rDescriptor) {
	t := feats.commandExpressions ? constants.ARG_TYPE_EXPRESSION : constants.ARG_TYPE_VAR
	rule := feats.commandExpressions ? "R" : "{R}"

	builder := runcmd.builder(wd).
		inQueue("light").
		cpu(1).
		mem("1GiB").
		ref("r-run-environment", rPackage).
		substitutionRule(rule, "r-run-environment").
		addPathTyped(t, path.join("{R}", rDescriptor.binDir)).
		envTyped("RHOME", t, "{R}").
		envTyped("R_HOME_DIR", t, "{R}").
		envTyped("RENV_PATHS_ROOT", t, path.join("{R}", "renv-root")).
		envTyped("RENV_PATHS_BINARY", t, path.join("{R}", "renv-root", "binaries")).
		envTyped("RENV_PATHS_SOURCE", t, path.join("{R}", "renv-root", "sources")).
		envTyped("RENV_PATHS_CACHE", t, path.join("{R}", "renv-root", "cache"))

	// Force block developer to install R packages when building R run environment.
	// Most of our commercial clients have very restricted network without access to pypi, CRAN and other external resources.
	// The only firewall rule we're guaranteed to have is to our own registries.
	builder.envTyped("RENV_CONFIG_REPOS_OVERRIDE", t, path.join("{R}", "packages"))

	return builder
}

export ll.toStrict({
	rVenvInputSchema                   : rVenvInputSchema,
	runRBuilder                        : runRBuilder
})
