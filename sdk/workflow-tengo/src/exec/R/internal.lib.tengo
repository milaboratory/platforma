ll := import(":ll")
validation := import(":validation")
runcmd := import(":exec.runcmd")
pkg := import(":exec.package")
path := import(":path")

rVenvInputSchema := {
	toolset: "string",
	dependencies: {"string": validation.reference},
	software: validation.reference,

	rDescriptor: pkg.runEnvDescriptorScheme,
	R: validation.reference
}

runRBuilder := func(wd, rPackage, rDescriptor) {
	return runcmd.builder(wd).
		ref("r-run-environment", rPackage).
		substitutionRule("{R}", "r-run-environment").
		addToPath(path.join("{R}", rDescriptor.binDir), true).
		envVar("R_HOME_DIR", "{R}").
		envVar("RENV_PATHS_ROOT", path.join("{R}", "renv-root"))
}

runRenvBuilder := func(wd, rEnv, rPackage, rDescriptor) {
	return runRBuilder(wd, rPackage, rDescriptor).
		ref("r-virtual-environment", rEnv).
		substitutionRule("{renv}", "r-virtual-environment").
		envVar("RENV_PATHS_RENV", "{renv}")
}

export ll.toStrict({
	rVenvInputSchema                   : rVenvInputSchema,
	runRBuilder                        : runRBuilder,
	runRenvBuilder                     : runRenvBuilder
})
