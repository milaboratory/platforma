ll := import(":ll")
validation := import(":validation")
runcmd := import(":exec.runcmd")
path := import(":path")
desc := import(":exec.descriptor")
constants := import(":exec.constants")

rVenvInputSchema := {
	operationMode: "string",
	toolset: "string",
	dependencies: {"any": "string"},
	software: validation.reference,

	rDescriptor: desc.runEnvScheme,
	R: validation.reference
}

runRBuilder := func(wd, rPackage, rDescriptor) {
	t := desc.canBackendUseExpressions() ? constants.ARG_TYPE_EXPRESSION : constants.ARG_TYPE_VAR
	rule := desc.canBackendUseExpressions() ? "R" : "{R}"

	return runcmd.builder(wd).
		ref("r-run-environment", rPackage).
		substitutionRule(rule, "r-run-environment").
		addToPath(t, path.join("{R}", rDescriptor.binDir)).
		envTyped("R_HOME_DIR", t, "{R}").
		envTyped("RHOME", t, "{R}").
		envTyped("RENV_PATHS_ROOT", t, path.join("{R}", "renv-root"))
}

export ll.toStrict({
	rVenvInputSchema                   : rVenvInputSchema,
	runRBuilder                        : runRBuilder
})
