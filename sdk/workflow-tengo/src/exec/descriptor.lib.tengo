/** Everything about software descriptors
 * The scheme is here:
 * https://github.com/milaboratory/platforma/blob/main/tools/package-builder/src/core/schemas/sw-json.ts */

ll := import(":ll")

runEnvScheme := {
	registry: "string",
	package: "string",
	type: "string",
	binDir: "string",
	"envVars,?": ["string"],

	"python-version,?": "string",
	"java-version,?": "string",
	"r-version,?": "string"
}

binaryScheme := {
	registry: "string",
	package: "string",
	cmd: ["string"],
	"runEnv,?": runEnvScheme
}

condaScheme := {
	registry: "string",
	package: "string",
	cmd: ["string"],
	"envVars,?": ["string"],

	"micromamba-version": "string",
	"conda-root-dir": "string",
	spec: "string"
}

assetScheme := {
	registry: "string",
	package: "string",
	url: "string"
}

localScheme := {
	hash: "string",
	path: "string",
	cmd: ["string"],
	runEnv: runEnvScheme
}

scheme := {
	"isDev,?": "bool",
	"schemaVersion,?": "number",
	"binary,?": binaryScheme,
	"asset,?": assetScheme,
	"local,?": localScheme
}

export ll.toStrict({
	runEnvScheme: runEnvScheme,
	binaryScheme: binaryScheme,
	condaScheme: condaScheme,
	assetScheme: assetScheme,
	localScheme: localScheme,
	scheme: scheme
})
