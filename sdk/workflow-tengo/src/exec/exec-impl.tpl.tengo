/**
 * Creates and fill a workdir, runs a command on it
 * and saves a chosen resulted files from this dir.
 */

self := import(":tpl.light")

ll := import(":ll")
feats := import(":feats")
validation := import(":validation")

smart := import(":smart")
render := import(":render")
workdir := import(":workdir")
stream := import(":exec.stream")
limits := import(":exec.limits")
pkg := import(":exec.package")
blobs := import(":file.internal")
desc := import(":exec.descriptor")
constants := import(":exec.constants")
monetization := import(":exec.monetization_internal")
assets := import(":assets")
runcmd := import(":exec.runcmd")

delayedComputeAllocationTpl := assets.importTemplate(":exec.delayed_compute_allocation")

_activateRenvForWD := func(wd, allocation, plan) {
	activateRenv := runcmd.builder(wd, plan).
		cmd("R").
		allocation(allocation).
		arg("-e").arg("renv::activate()")

	return activateRenv.build().workdir
}

self.defineOutputs(
	"files",
	"filesContent",
	"fileSets",
	"fileSetsContent",
	"progress",
	"fileStreams",
	"wdProcessors"
)

EXTENDED_PLAN_OPTIONS_SCHEMA := maps.merge(runcmd.RUN_CMD_PLAN_OPTIONS_SCHEMA, {
	"__options__,closed": true,
	"runEnvType,?": "string"
})

self.validateInputs({
	filesToAdd: { any: validation.resource() },
	filesToWrite: { any: validation.resource() },
	"assets,?": { any: validation.resource() },
	"wdProcessors,?": {
		any: {
			tpl: validation.resource(),
			"tplArgs,?": validation.any
		}
	},
	planRefs: { any: validation.reference() },

	settings: {
		planOptions: EXTENDED_PLAN_OPTIONS_SCHEMA,
		"dirsToCreate,?": ["string"],
		runOptions: {
			"software,?": pkg.softwareInfoScheme,
			"cmd,?": "string",
			args: ["string"],
			envs: { any: "string" },
			"argsTyped,?": [{type: "string", value: "string"}],
			"envsTyped,?": {"any": {type: "string", value: "string"}},
			secrets: { any: "string" },
			queue: "string",
			stdout: "string",
			stderr: "string",
			nErrorLines: "number",
			"monetization,?": monetization.schema
		},
		"filesToSave,?": ["string"],
		"filesContentToSave,?": ["string"],
		"fileSetsToSave,?": { any: "string" },
		"fileSetsContentToSave,?": { any: "string" },
		"filesToStream,?": ["string"],

		"assetDescriptors,?": { any: { asset: desc.assetScheme } },
		"assetRules,?": { any: { any: ["string"] } },
		"assetCache,?": { any: "number" },
	},

	// Service inputs
	"quota,?": {
		queue: "string",
		"cpu,?": "number",
		"ram,?": "string"
	}
})

self.body(func(inputs) {
	settings := inputs.settings
	// original run options passed by the user
	runOptions := settings.runOptions
	// run plan options generated after software is loaded
	planOptions := settings.planOptions

	//
	// Create and fill the workdir with files that were passed from inputs.
	//

	wdBuilder := workdir.builder()

	quota := inputs.quota

	if !is_undefined(quota) {
		quotaBuilder := limits.quotaBuilder().
			cpu(quota.cpu).
			ram(quota.ram)

		if limits.useBatch(quota.queue) {
			quotaBuilder.queue(constants.BATCH_QUEUE)
		} else {
			quotaBuilder.queue(quota.queue)
		}

		storageSpaceRef := limits.storageSpaceRequestBuilder().
			quota(quotaBuilder.build()).
			build()

		wdBuilder.allocation(storageSpaceRef.allocation)
	}

	// add files
	wdBuilder.addFiles(inputs.filesToAdd)
	wdBuilder.mkDirs(settings.dirsToCreate)

	// add assets
	archives := {}
	for k, descriptor in settings.assetDescriptors {
		assetBlob := blobs.createBlobImportExternal({
			dataURL: descriptor.asset.url
		}).file

		archives[k] = assetBlob
		if is_int(settings.assetCache[k]) {
			assetBlob.setCache(settings.assetCache[k])
		} else {
			assetBlob.setCacheDays(1)
		}
	}
	for k, archiveRules in settings.assetRules {
		for dir, filesToExtract in archiveRules {
			wdBuilder.addFromZip(archives[k], dir, filesToExtract)
		}
	}

	// pass values as fields for saving the topology in pl-core
	// and avoiding deduplication issues:
	wdBuilder.writeFiles(self.rawInputs().filesToWrite.getValue().inputs())

	// working directory with input files added; before run
	wdBefore := wdBuilder.build()

	// Delay requesting compute quota until the workdir is ready.
	// This prevents a deadlock between storage and compute quotas.
	// A waiter ensures that a task requests compute quota only after
	// it has acquired the storage quota required for workdir creation,
	// which is a prerequisite for the computation itself.

	delayedComputeAllocation := render.createEphemeral(delayedComputeAllocationTpl, {
		request: smart.createJsonResource({
			queue: runOptions.queue,
			cpu: quota.cpu,
			ram: quota.ram
		}),
		// whole input map is awaited by the template to be ready before the allocation is requested
		wd: wdBefore
	})

	runEnvType := planOptions.runEnvType
	mainRunBuilder := runcmd.builder(wdBefore, { options: planOptions, refs: inputs.planRefs })

	computeAllocation := delayedComputeAllocation.output("allocation")

	mnz := runOptions.monetization
	if !is_undefined(mnz) {
		result := monetization.run(mnz, wdBefore, computeAllocation)
		wdBefore = result.wdAfter
		mainRunBuilder.refVar(result.jwtEnvName, result.jwtEnvName, result.jwtEnvValue)
		mainRunBuilder.envExpression(result.jwtEnvName, "{" + result.jwtEnvName + "}")
	}

	// Passing arguments and environment variables from run options passed by the user

	shouldUseNewTyped := !is_undefined(runOptions.argsTyped) || !is_undefined(runOptions.envsTyped)

	args := shouldUseNewTyped ? runOptions.argsTyped : runOptions.args
	for _, arg in args {
		if shouldUseNewTyped {
			mainRunBuilder.argTyped(arg.type, arg.value)
		} else {
			mainRunBuilder.arg(arg)
		}
	}

	envs := shouldUseNewTyped ? runOptions.envsTyped : runOptions.envs
	for name, v in envs {
		if shouldUseNewTyped {
			mainRunBuilder.envTyped(name, v.type, v.value)
		} else {
			mainRunBuilder.env(name, v)
		}
	}

	// Working directory after run environment preparation steps.
	// The same as wdBefore, but might get additional files if they are required for run environment,
	// like .Rprofile for R with activated renv.
	if (runEnvType == "R") {
		wdBefore = _activateRenvForWD(wdBefore, computeAllocation, { options: planOptions, refs: inputs.planRefs })
	}

	//
	// Build runcmd resource
	//

	// Load secrets
	for envName, secretVar in runOptions.secrets {
		mainRunBuilder.envExpression(envName, secretVar)
	}

	// other options
	mainRunBuilder.stdout(runOptions.stdout)
	mainRunBuilder.stderr(runOptions.stderr)
	mainRunBuilder.nErrorLines(runOptions.nErrorLines)
	run := mainRunBuilder.build()

	// get the workdir containing all the files, including produced by the run command
	wdAfter := run.workdir

	//
	// Run workdir processors
	//

	wdProcessorsResults := {}
	if !is_undefined(inputs.wdProcessors) {
		for name, p in inputs.wdProcessors {
			tpl := p.tpl
			tplInputs := {
				workdir: wdAfter,
				args: p.tplArgs
			}

			// render template & get results
			r := render.createEphemeral(tpl, tplInputs)

			wdProcessorsResults[name] = r.output("result")
			wdAfter = r.output("workdir")
		}
	}

	//
	// Save data from the workdir
	//

	// saver resource
	wdSaver := workdir.save(wdAfter)
	// save files
	if !is_undefined(settings.filesToSave) {
		for fName in settings.filesToSave {
			wdSaver.saveFile(fName)
		}
	}
	// save files content
	if !is_undefined(settings.filesContentToSave) {
		for fName in settings.filesContentToSave {
			wdSaver.saveFileContent(fName)
		}
	}
	// save file sets
	if !is_undefined(settings.fileSetsToSave) {
		for name, regex in settings.fileSetsToSave {
			wdSaver.saveFileSet(name, regex)
		}
	}
	// save file sets content
	if !is_undefined(settings.fileSetsContentToSave) {
		for name, regex in settings.fileSetsContentToSave {
			wdSaver.saveFileSetContent(name, regex)
		}
	}

	// resulting wd
	wdResult := wdSaver.build()

	// create streams for all requested file streams.
	streams := smart.mapBuilder()
	if !is_undefined(settings.filesToStream) {
		for fName in settings.filesToStream {
			streams.add(fName, stream.create(wdBefore, wdResult, fName))
		}
	}

	return {
		files: wdResult.files,
		filesContent: wdResult.filesContent,
		fileSets: wdResult.fileSets,
		fileSetsContent: wdResult.fileSetsContent,
		fileStreams: streams.build(),
		wdProcessors: wdProcessorsResults,
		progress: wdResult.progress
	}
})
