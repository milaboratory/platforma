/** The library provides all things to work with a monetization. */

base64 := import("base64")
json := import("json")

ll := import(":ll")
feats := import(":feats")

validation := import(":validation")
assets := import(":assets")
fmt := import("fmt")
text := import("text")
runcmd := import(":exec.runcmd")
workdir := import(":workdir")
render := import(":render")
constants := import(":exec.constants")
slices := import(":slices")
sets := import(":sets")

_JWT_TOKEN_RESULT_ENV := "PLATFORMA_MNZ_JWT"

/** mnz-client will print the response from milm to stdout as-is. */
mnzClientStdoutSchema := ["or",
	// run-spec response
	{ jwtToken: "string" },

	// dry-run response
	{
		httpError: "string",
		response: {
			"error,?": "any",
			"result,?": {
				productKey: "string",
				canRun: "boolean",
				mnz: "any"
			}
		}
	}]

/** Just creates a new monetization as a map of params. */
init := func() {
	return ll.toStrict({
		enabled: false,

		// product key of monetization
		productKey: "",

		// just returns a number of runs without the actual calculation.
		// Also, returns a number of remaining runs, a number of total runs etc.
		isDryRun: false,

		// a slice of runs.
		// Each run is a map of file name to params, e.g. { fileName: { arg: "lane1_R1", metrics: ["size", "lines", "sha256"]} }
		runs: [],

		// if the different url should be specified (useful in testing)
		url: undefined
	})
}

argSchema := {
	arg: "string",
	metrics: [`string,regex=size|lines|sha256`]
}

runSchema := {
	"any": argSchema
}

schema := {
	"enabled": "bool",
	"productKey": "string",
	"isDryRun": "bool",
	"runs": [runSchema],
	"url,?": "string"
}

_validateIsReady := func(mnz) {
	validation.assertType(mnz, schema,
		"monetization.assertIsReady(): monetization does not fit schema")
	ll.assert(len(mnz.productKey) > 0,
		"monetization.assertIsReady(): product key must be set")

	// We don't need it, since we could run software without file params
	// ll.assert(len(mnz.fileParams) > 0,
	// 	"monetization.assertIsReady(): at least 1 file param must be set")
}

/** Enables the monetization for a product. */
enable := func(mnz, productKey) {
	ll.assert(is_string(productKey),
		"monetization.enable(): product key must be a string, got %v", productKey)

	validation.assertType(mnz, schema,
		"monetization.enable(): mnz object does not fit schema")

	mnz.enabled = true
	mnz.productKey = productKey
}

/** Is this monetization enabled and should run? */
shouldRun := func(mnz) {
	if mnz.enabled {
		_validateIsReady(mnz)
		return true
	}

	return false
}

toJson := func(mnz) {
	validation.assertType(mnz, schema,
		"monetization.toJson(): monetization object does not fit json schema")

	return ll.fromStrict(mnz)
}

appendRun := func(mnz) {
	validation.assertType(mnz, schema,
		"monetization.appendRun(): monetization object does not fit json schema")

	ll.assert(mnz.enabled,
		"monetization.appendRun(): monetization must be explicitly enabled by enableMnz(productKey) function")

	mnz.runs = append(mnz.runs, {})
}

/** Same as validation.assertType(arg, argSchema, ...),
 * but with prettier errors for clients. */
_validateArgToLastRun := func(arg) {
	ll.assert(ll.isMap(arg), "monetization.validateArgToLastRun(): mnz arg must be a map")

	ll.assert(is_string(arg.arg), "monetization.validateArgToLastRun(): 'arg' in addArgToLastRun must be string")

	ll.assert(is_array(arg.metrics) && len(arg.metrics) > 0, "monetization.validateArgToLastRun(): 'metrics' in {\"mnz\": {...}} param must be a non-empty array")

	ll.assert(slices.every(arg.metrics, func(elem) {
		return {
			size: true,
			lines: true,
			sha256: true
		}[elem]
	}), "monetization.validateArgToLastRun(): params in 'metrics' must be either 'size', 'lines' or 'sha256'")
}

/** Adds monetization parameters to the last run. */
addArgToLastRun := func(mnz, fileName, arg) {
	validation.assertType(mnz, schema,
		"monetization.addArgToLastRun(): monetization object does not fit json schema")

	_validateArgToLastRun(arg)

	validation.assertType(arg, argSchema,
		"monetization.addArgToLastRun(): arg does not fit json schema")

	ll.assert(mnz.enabled,
		"monetization.addArgToLastRun(): monetization must be explicitly enabled by enableMnz(productKey) function")

	ll.assert(is_string(fileName),
		"monetization.addArgToLastRun(): file name must be a string.")

	ll.assert(len(mnz.runs) > 0,
		"monetization.addArgToLastRun(): appendRun must be added first")

	mnz.runs[len(mnz.runs) - 1][fileName] = arg
}

/** Returns a file name for the argument in the last run.
 *
 * @param: mnz: monetization -- see a beginning of this file.
 * @param: argName: string --  name of the argument.
 */
argNameForLastRun := func(mnz, argName) {
	idx := len(mnz.runs) - 1
	fileName := fmt.sprintf("%s_%d", argName, idx)

	return fileName
}

setDryRun := func(mnz, isDryRun) {
	ll.assert(mnz.enabled,
		"monetization.setDryRun(): monetization must be explicitly enabled by enableMnz(productKey) function")

	ll.assert(is_bool(isDryRun),
		"monetization.setDryRun(): isDryRun must be boolean, got %v", isDryRun)

	validation.assertType(mnz, schema,
		"monetization.setDryRun(): mnz object does not fit schema")

	mnz.isDryRun = isDryRun
}

setUrl := func(mnz, url) {
	ll.assert(mnz.enabled,
		"monetization.setUrl(): monetization must be explicitly enabled by enableMnz(productKey) function")

	ll.assert(is_string(url),
		"monetization.setUrl(): url must be string, got %v", url)

	validation.assertType(mnz, schema,
		"monetization.setUrl(): mnz object does not fit schema")

	mnz.url = url
}

/**
 * Runs monetization binary on a workdir with all files, and returns a new workdir and a resulted jwt token.
 * All resources are ephemeral,
 * the deduplication should be above this level.
 *
 * @param: mnz: monetization -- see a beginning of this file.
 * @param: wd: workdir -- workdir where all files from mnz.fileParams already exist.
 * @param: queue: queue - in which queue we should run monetization. */
run := func(mnz, wd, plan, allocation) {
	_validateIsReady(mnz)

	builder := runcmd.builder(wd, plan)
	builder.envExpression("MI_LICENSE", "{secrets.MI_LICENSE}")
	if mnz.isDryRun {
		builder.arg("-dry-run")
	}
	if mnz.url {
		builder.arg(mnz.isDryRun ? "-dry-run-url" : "-url").arg(mnz.url)
	}
	builder.arg("-productKey").arg(mnz.productKey)

	// load args for each run
	for i, run in mnz.runs {
		for fileName, arg in run {
			// fileName: string; arg: argSchema
			toCollect := text.join(arg.metrics, ",")
			runSpecPart := fmt.sprintf("%d:%s:file:%s:%s", i, arg.arg, fileName, toCollect)
			builder.arg(runSpecPart)
		}
	}

	builder.allocation(allocation)
	stdoutName := "mnz_stdout.txt"
	builder.stdout(stdoutName)
	run := builder.build()

	// save mnz_stdout.txt
	savedWd := workdir.save(run.workdir).
		saveFileContent(stdoutName).
		build()

	stdout := savedWd.filesContent.getFutureInputField(stdoutName)

	result := render.createEphemeral(
		assets.importTemplate(":exec.monetization_to_json"),
		{ resource: stdout }
	)

	return ll.toStrict({
		// other commands should run on this wd,
		// or else they will run concurrently
		// with monetization.
		wdAfter: savedWd.workdir,

		// mnz-client returns jwt token
		// that we will pass to the next command as env.
		jwtEnvName: _JWT_TOKEN_RESULT_ENV,
		jwtEnvValue: result.output("jwtToken"),

		info: result.output("info")
	})
}

/** Gets mnz key from opts or undefined. */
_extractOption := func(...opts) {
	if slices.length(opts) < 1 {
		return undefined
	}
	opt := opts[0]["mnz"]

	// readability if: we can return undefined here
	return is_undefined(opt) ? undefined : opt
}

/** Adds a monetization option if it's defined into the last run. */
addOptionalArg := func(mnz, fileName, ...opts) {
	opt := _extractOption(opts...)
	if !is_undefined(opt) {
		addArgToLastRun(mnz, fileName, opt)
	}
}

export ll.toStrict({
	init: init,
	schema: schema,
	argSchema: argSchema,
	enable: enable,
	setDryRun: setDryRun,
	setUrl: setUrl,
	shouldRun: shouldRun,
	toJson: toJson,
	appendRun: appendRun,
	addArgToLastRun: addArgToLastRun,
	addOptionalArg: addOptionalArg,
	argNameForLastRun: argNameForLastRun,
	run: run,
	mnzClientStdoutSchema: mnzClientStdoutSchema
})
