test := import(":test")
monetization := import(":exec.monetization")

Test_monetization_enable := func() {
	mnz := monetization.init()
	monetization.enable(mnz, "test_product")

	test.isTrue(mnz.enabled)
	test.isEqual(mnz.productName, "test_product")
}

Test_monetization_addFileParams := func() {
	mnz := monetization.init()
	monetization.enable(mnz, "test_product")
	monetization.addFileParams(mnz, "abc.txt", {
		"arg": "abc",
		"collect": ["lines", "sha256"]
	})

	test.isEqual(mnz.fileParams, {"abc.txt": {
		"arg": "abc",
		"collect": ["lines", "sha256"]
	}})
}

Test_monetization_shouldRun := func() {
	mnz := monetization.init()
	monetization.enable(mnz, "test_product")
	monetization.addFileParams(mnz, "abc.txt", {
		"arg": "abc",
		"collect": ["lines", "sha256"]
	})

	test.isTrue(monetization.shouldRun(mnz))
}

Test_monetization_decodeJwtToken := func() {
	token := "TESTETSTETESTES.eyJtbnoiOnsiZGV0YWlscyI6eyJyZW1haW5pbmciOiA5OTk5OTJ9LCJ0eXBlIjoiYmFzZSJ9LCJwcm9kdWN0S2V5IjoiTUlGQUtFTUlGQUtFTUlGQUtFIiwicnVuU3BlYyI6eyJrZXkiOiJ2YWx1ZSJ9fQ==.TESTESTESTESTE"

	want := {
		mnz: {
			details: {
				remaining: 999992
			},
			type: "base"
		},
		productKey: "MIFAKEMIFAKEMIFAKE",
		runSpec: {
			key: "value"
		}
	}

	test.isEqual(want, monetization.decodeJwtToken(token))
}
