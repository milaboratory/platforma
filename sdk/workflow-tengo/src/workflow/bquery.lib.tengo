ll := import(":ll")
smart := import(":smart")
maps := import(":maps")
constants := import(":constants")
json := import("json")
assets := import(":assets")
render := import(":render")

queryRelatedTpl := assets.importTemplate(":workflow.query-related")

_CONTEXT_FIELD_NAME := "ctx"

// options scheme for query
_OPTIONS_SCHEME := {
	"spec,?": `bool`,
	"data,?": `bool`,
	"single,?": `bool`,
	"first,?": `bool`,
	"errIfMissing,?": `bool`
}

// default query options
_DEFAULT_OPTIONS := {
	/** Return specs in the results */
	spec: true,
	/** Return data in the results */
	data: true,
	/** Asserts that the resulting list has one element and returns it */
	single: false,
	/** Returns first available result of the query */
	first: false,
	/** Throw error if no results found */
	errIfMissing: false
}

/**
 * Query results pool.
 *
 * @param spec: query spec
 * @param ctx: results pool (context) to query
 * @param options: an options map
 * @return result: a list of {ref: spec: data:} objects (data will be absent if not requested)
 *
 * The query spec supports the following operand types for matching PColumnSpecs:
 *
 * 1. Logical operators:
 *    ```
 *    {type: "Or", operands: [operand1, operand2, ...]}  // matches if any operand matches
 *    {type: "And", operands: [operand1, operand2, ...]} // matches if all operands match
 *    {type: "Not", operand: someOperand}                // matches if operand doesn't match
 *    ```
 *
 * 2. Name matchers:
 *    ```
 *    {type: "Name", name: "pl7.app/rna-seq/countMatrix"} // matches by exact name
 *    {type: "NamePattern", pattern: "pl7.app/vdj/.*"}    // matches using regex pattern
 *    ```
 *
 * 3. Domain matcher:
 *    ```
 *    {
 *      type: "Domain",
 *      domain: {"pl7.app/block": "blockId"},
 *      domainExactMatch: false  // true requires exact match, false checks subset
 *    }
 *    ```
 *
 * 4. Annotation matchers:
 *    ```
 *    {type: "Annotation", annotation: "pl7.app/isDiscreteFilter", value: "true"}         // exact match
 *    {type: "AnnotationPattern", annotation: "pl7.app/abundance", pattern: ".*false.*"}  // regex match
 *    ```
 *
 * 5. AxesKeys: matches by axis specifications
 *    ```
 *    {
 *      type: "AxesKeys",
 *      axesKeys: [
 *        {
 *          name: "pl7.app/rna-seq/geneId",
 *          domain: {"pl7.app/block": "blockId"},
 *          domainExactMatch: false
 *        }
 *      ],
 *      partialMatch: false  // true allows subset of axes to match
 *    }
 *    ```
 *
 * Example:
 * ```
 * // Find RNA-seq count matrices from block "abc123"
 * query({
 *   type: "And",
 *   operands: [
 *     {type: "Name", name: "pl7.app/rna-seq/countMatrix"},
 *     {type: "Domain", domain: {"pl7.app/block": "abc123"}}
 *   ]
 * })
 * ```
 */
create := func(spec, ctx, ...options) {

	// @TODO validate spec

	ops := copy(_DEFAULT_OPTIONS)
	if len(options) > 0 {
		ll.assert(len(options) == 1, "expected map, got array: ", options)

		// @TODO validate options

		// override defaults
		for k, v in options[0] {
			ops[k] = v
		}
	}

	query := json.encode({
		query: spec,
		setErrorIfMissing: ops.errIfMissing
	})

	builder := undefined
	if ops.first {
		builder = smart.ephemeralBuilder(constants.RTYPE_BRESOLVE_FIRST, query)
	} else {
		// return all query results
		builder = smart.ephemeralBuilder(constants.RTYPE_BRESOLVE_CHOICE, query)
	}

	builder.createInputField(_CONTEXT_FIELD_NAME).set(ctx)
	resolve := builder.lockInputsAndBuild()


	// create a special type to store query results

	rb := smart.structBuilder(constants.RTYPE_QUERY_RESULT)

	// save options
	rb.createInputField("ops").setJson(ops)

	if ops.spec {
		rb.createInputField("spec").set(resolve.getFutureOutputField("spec"))
	}

	// pass data only if needed, otherwise we are not waiting for data to complete
	if ops.data {
		rb.createInputField("data").set(resolve.getFutureOutputField("data"))
	}

	// the data structure differs in this case; the single ref, data and spec are stored
	// directly as result fields
	if ops.first {
		rb.createInputField("ref").set(resolve.getFutureOutputField("address"))
	}

	return rb.lockAndBuild()
}

/**
 * Inputs preprocessor used to convert query result into array of {ref: spec: data:} objects
 */
resultUnmarshaller := func() {
	return  {
		canParse: func(r) {
			return smart.isResource(r) && r.info().Type.Name == constants.RTYPE_QUERY_RESULT.Name
		},

		parse: func(resource, parser)  {

			ops := resource.get("ops").getDataAsJson()

			if ops.first {
				// special case, single element

				// is no result
				isNR := func(r) {
					return r.info().Type.Name == constants.RTYPE_BRESOLVE_NO_RESULT.Name
				}

				if isNR(resource.get("ref")) {
					return undefined
				}

				result := {
					ref: resource.get("ref").getDataAsJson(),
					spec: resource.get("spec").getDataAsJson()
				}

				// only if the data is there
				if resource.hasInputField("data") {

					// even if spec is present, the data may be still not available
					if isNR(resource.get("data")) {
						result.data = undefined
					} else {
						result.data = parser(resource.get("data"))
					}
				}

				return ll.toStrict(result)
			} else {
				// format list of results

				spec := resource.get("spec").inputs()
				data := undefined
				if resource.hasInputField("data") {
					data = resource.get("data").inputs()
				}

				result := []
				for ref, s in spec {
					r  := {
						ref: json.decode(ref),
						spec: s.getValueAsJson()
					}

					// only if the data is there
					if !is_undefined(data) {
						r.data = parser(data[ref].getValue())
					}

					result = append(result, ll.toStrict(r))
				}

				if ops.single {
					ll.assert(len(result) == 1, "expected single element, got ", len(result))

					result = result[0]
				}

				return result
			}
		}
	}
}

/**
 * Query results pool to find spec & data for a given ref.
 *
 * @param ref: a ref object ({blockId: name:})
 * @param ctx: results pool (context) to query
 * @return result: a {ref: spec: data:} object
 */
resolve := func(ref, ctx, ...options) {

	spec := {
		type: "Direct",
		block_id: ref.blockId, 	// @TODO use consistent naming in pl
		output_name: ref.name 	// @TODO use consistent naming in pl
	}

	ops := {}

	if len(options) > 0 {
		ops = options[0]
	}

	ops.first = true

	return create(spec, ctx, ops)
}

/**
 * Resolves both anchor references and related items in one operation.
 *
 * @param ctx: results pool (context) to query
 * @param anchors: a map of anchorId -> ref or {ref: {blockId: string, name: string}, specOnly: bool}
 *                 When providing {ref, specOnly}, the specOnly flag controls whether to fetch data
 * @param queryMap: a map of queryId -> APColumnSelector specifications
 *                 or {matcher: APColumnSelector, specOnly: bool}
 *                 When providing {matcher, specOnly}, the specOnly flag controls whether to fetch data
 *
 * === Return ===
 *
 * @returns Object with methods for retrieving anchor resolution and query results:
 *
 *          getAnchor(anchorId) - Returns the resolved anchor for the given ID
 *              @param anchorId - The ID of the anchor to retrieve
 *              @returns The resolved anchor object {ref: spec: data:}
 *
 *          getResult(queryId) - Returns the query result for the given ID
 *              @param queryId - The ID of the query result to retrieve
 *              @returns The query result for the related item
 */
anchoredQuery := func(ctx, anchors, queryMap) {
	// First, resolve all anchors
	resolvedAnchors := {}
	for anchorId, anchorValue in anchors {
		opts := { spec: true, data: true }

		ref := anchorValue
		if !is_undefined(anchorValue.ref) {
			ref = anchorValue.ref
			if anchorValue.specOnly {
				opts.data = false
			}
		}

		resolvedAnchors[anchorId] = resolve(ref, ctx, opts)
	}

	// Process the related items to handle specOnly flag
	processedQueryMap := {}
	for queryId, aQuery in queryMap {
		matcher := aQuery
		fetchData := true

		// Check if this is an object with matcher and specOnly flag
		if !is_undefined(aQuery.matcher) {
			matcher = aQuery.matcher
			if aQuery.specOnly {
				fetchData = false
			}
		}

		// Add the processed matcher and fetchData flag
		processedQueryMap[queryId] = {
			matcher: matcher,
			fetchData: fetchData
		}
	}

	// Render the template with the appropriate parameters
	relatedResult := render.createEphemeral(queryRelatedTpl, {
		ctx: ctx,
		anchorSpecs: smart.createMapResource(maps.mapValues(resolvedAnchors, func(v) { return v.inputs().spec })),
		queryMap: processedQueryMap
	})

	// Create structured result object with accessor methods
	self := undefined
	self = ll.toStrict({
		/**
		 * Get a specific anchor resolution result
		 * @param anchorId - The ID of the anchor to retrieve
		 * @returns The resolved anchor {ref: spec: data:}
		 */
		getAnchor: func(anchorId) {
			anchor := resolvedAnchors[anchorId]
			if is_undefined(anchor) {
				ll.panic("unknown anchor ID: " + anchorId)
			}
			return anchor
		},

		/**
		 * Get a specific query result by ID
		 * @param queryId - The ID of the query result to retrieve
		 * @returns The query result for the related item
		 */
		getResult: func(queryId) {
			return relatedResult.output("related/" + queryId)
		}
	})

	return self
}

export ll.toStrict({
	create: create,
	resolve: resolve,
	resultUnmarshaller: resultUnmarshaller,
	anchoredQuery: anchoredQuery
})
