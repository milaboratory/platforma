//
// Utility template to build context and flatten context resources
//

ll := import(":ll")
tpl := import(":tpl.light")
smart := import(":smart")
context := import(":workflow.context")
validation := import(":validation")
constants := import(":constants")
wConstants := import(":workflow.constants")
pConstants := import(":pframes.constants")

// await all exports to appear as data fields
tpl.awaitState("data", { wildcard: "*" }, "InputsLocked")

tpl.validateInputs({
	blockId: `any`,
	parentContext: validation.resource(),
	data: `any`
})

tpl.body(func(inputs) {
	// create ctx and save exports
	ctxBuilder := context.builder(inputs.blockId, inputs.parentContext)

	data := tpl.rawInputs().data.getValue()

	for prefix, mapField in data.inputs() {
		map := mapField.getValue()

		if !map.checkResourceType(constants.RTYPE_JSON) && !map.checkResourceType(constants.RTYPE_MAP) && !map.checkResourceType(pConstants.RTYPE_P_FRAME) {
			ll.panic("Unknown input PObject collection container type: " + map.info())
		}

		iterable := undefined

		// this map can be a json resource if export objects are json-s
		if smart.isJsonResource(map) {
			iterable = map.getDataAsJson()

			if !ll.isMap(iterable) {
				ll.panic("Illegal JSON structure of input collection: " + iterable)
			}
		} else {
			iterable = map.inputs()
		}

		for key, value in iterable {
			// @TODO check whether we have both .data & .spec for all exports

			if prefix == wConstants.NO_PREFIX_EXPORT {
				ctxBuilder.add(key, value)
			} else {
				ctxBuilder.add(prefix + "." + key, value)
			}
		}
	}

	return {
		ctx: ctxBuilder.build()
	}
})
