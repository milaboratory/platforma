/*
 * Create renderer objects to render templates from the code
 */

ll := import(":ll")
assets := import(":assets")
smart := import(":smart")
tplutil := import(":tpl.util")
constants := import(":constants")
oop := import(":oop")
tx := import("tx")
times := import("times")
maps := import(":maps")
feats := import(":feats")


_SUBSCRIPTION_FIELD := "subscription"

/**
 * Creates a render template resource.
 *
 * @param tpl: template resource (see assets.importTemplate())
 * @param isEph: whether template is ephemeral
 * @param inputs: a map of inputs to be passed to the template
 * @param opts: (optional) a map of options:
 *              - metaInputs: (optional) a map of meta inputs to be passed to the template.
 *                                  Meta inputs are not accounted in dedupliation and recovering.
 *                                  Two resources with the same <inputs> and different <metaInputs>
 *                                  would be considered as copies of each-other.
 *              - inputCache: (optional) a cache time from 'times' library for all inputs.
 *                                  Can be used only with non-ephemeral templates.
 * @return renderer: a smart resource with additional output("name") method
 */
createUniversal := func(tpl, isEph, inputs, ...opts) {
	ll.assert(len(opts) <= 1, "too many arguments, expected at most one options object")
	metaInputs := undefined
	inputCache := undefined
	if len(opts) == 1 && opts[0] {
		metaInputs = opts[0].metaInputs
		inputCache = opts[0].inputCache
	}

	if !is_undefined(inputCache) && inputCache > 0 && isEph {
		ll.panic("inputCache option cannot be used with ephemeral templates")
	}

	// build renderer resource
	rbuilder := undefined
	if isEph {
		rbuilder = smart.ephemeralBuilder(constants.RTYPE_RENDER_EPH_TEMPLATE)
	}  else {
		rbuilder = smart.structBuilder(constants.RTYPE_RENDER_TEMPLATE)
	}

	if isEph {
		// create internal subscription field
		rbuilder.createField(_SUBSCRIPTION_FIELD, "OTW")
	}

	// template input
	rbuilder.createInputField(tplutil.TEMPLATE_FIELD).set(tpl)

	// inputs input
	inputsMap := isEph ? smart.ephemeralMapBuilder() : smart.mapBuilder()
	inputAddOpts := undefined
	if !is_undefined(inputCache) && inputCache > 0 {
		inputAddOpts = { cache: inputCache }
	}
	for name, value in inputs {
		if !is_undefined(value) {
			if !is_undefined(inputAddOpts) {
				inputsMap.add(name, value, inputAddOpts)
			} else {
				inputsMap.add(name, value)
			}
		}
	}
	if !is_undefined(metaInputs) {
		for name, value in metaInputs {
			if !is_undefined(value) {
				if feats.serviceFields {
					inputsMap.addMeta(name, value)
				} else {
					inputsMap.add(name, value)
				}
			}
		}
	}

	rbuilder.createInputField(tplutil.INPUTS_MAP_FIELD).set(inputsMap.build())
	// build
	renderer := rbuilder.lockInputsAndBuild()

	self := undefined
	self = ll.toStrict(oop.inherit(renderer, {

		/**
		 * Returns an output field with a given name
		 */
		output: func(name, ...cache) {
			ll.assert(len(cache) == 0 || is_int(cache[0]), "cache should be a number (use 'times' tengo library), got: %v", cache)
			out := renderer.getFutureOutputField(tplutil.TEMPLATE_OUTPUT_PREFIX + name, isEph)
			if len(cache) > 0 && cache[0] > 0 {
				cache = cache[0]
				tx.cacheSetToField(out.id, cache)
			}

			return out
		},

		/**
		 * Returns an output field with a given name, if not exists, returns null resource
		 */
		optionalOutput: func(name, ...cache) {
			ll.assert(len(cache) == 0 || is_int(cache[0]), "cache should be a number (use 'times' tengo library), got: %v", cache)
			out := renderer.getFutureFieldOptional(tplutil.TEMPLATE_OUTPUT_PREFIX + name, "output", isEph)
			if len(cache) > 0 && cache[0] > 0 {
				cache = cache[0]
				tx.cacheSetToField(out.id, cache)
			}

			return out
		},

		/**
		 * Resolves output field by path
		 *
		 * @param path: array of strings or maps - path elements to navigate to the field
		 * @return field: smart field - resolved field from the path
		 */
		resolveOutput: func(path) {
			ll.assert(is_array(path), "path must be an array, got: %v", path)

			// Create a copy of the path
			pathCopy := []

			// Process the first element
			if len(path) > 0 {
				firstElem := path[0]

				// If the first element is a string, convert it to a map structure
				if is_string(firstElem) {
					firstElem = { name: firstElem }
				}

				// Create a modified first element with output type and prefix
				firstElemCopy := maps.clone(firstElem)
				firstElemCopy.type = "output"

				// Add prefix to the name
				firstElemCopy.name = tplutil.TEMPLATE_OUTPUT_PREFIX + firstElemCopy.name

				pathCopy = append(pathCopy, firstElemCopy)
			}

			// Add the rest of the path elements unmodified
			for i := 1; i < len(path); i++ {
				pathCopy = append(pathCopy, path[i])
			}

			// Use the buildFutureField method to resolve the path
			return renderer.buildFutureField(pathCopy)
		}
	}))

	return self
}

/**
 * Creates a render template resource.
 *
 * @param tpl: template resource (see assets.importTemplate())
 * @param inputs: a map of inputs to be passed to the template
 * @param opts: (optional) a map of options:
 *              - metaInputs: (optional) a map of meta inputs to be passed to the template.
 *                                  Meta inputs are not accounted in dedupliation and recovering.
 *                                  Two resources with the same <inputs> and different <metaInputs>
 *                                  would be considered as copies of each-other.
 *              - inputCache: (optional) a cache time from 'times' library for all inputs.
 * @return renderer: a smart resource with additional output("name") method
 */
create := func(tpl, inputs, ...opts) {
	return createUniversal(tpl, false, inputs, opts...)
}

/**
 * Creates ephemeral render template resource.
 *
 * @param tpl: template resource (see assets.importTemplate())
 * @param inputs: a map of inputs to be passed to the template
 * @param opts: (optional) a map of options:
 *              - metaInputs: (optional) a map of meta inputs to be passed to the template.
 *                                  The split into <inputs> and <metaInputs> has no
 *                                  effect on ephemeral templates, as they do not
 *                                  have deduplication.
 * @return renderer: a smart resource with additional output("name") method
 */
createEphemeral := func(tpl, inputs, ...opts) {
	return createUniversal(tpl, true, inputs, opts...)
}

export ll.toStrict({
	createUniversal: createUniversal,
	create: create,
	createEphemeral: createEphemeral
})
