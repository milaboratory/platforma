ll := import(":ll")
maps := import(":maps")
test := import(":test")

Test_map_DeepMerge := func() {
	test.isEqual(
		maps.deepMerge(
			{a: {a: 1, b: 2}, c: 1, d: {a: {b: {c: 12}, d: 1}}},
			{a: {b: 3}, d: {a: {b: {c: undefined, d: 23}, d: 1}}}
		),
		{a: {a: 1, b: 3}, c: 1, d: {a: {b: {d: 23}, d: 1}}},
		"unexpected result from maps.deepMerge"
	)
}

Test_map_Clone_1 := func() {
	test.isEqual(
		maps.clone(
			{a: {b: 3}, d: {a: {b: {c: undefined, d: 23}, d: 1}}},
			{removeUndefs: true}
		),
		{a: {b: 3}, d: {a: {b: {d: 23}, d: 1}}},
		"unexpected result from maps.clone"
	)
}

Test_map_Clone_2 := func() {
	test.isEqual(
		maps.clone(
			{a: {b: 3}, d: {a: ll.toStrict({b: {c: undefined, d: 23}, d: 1})}},
			{removeUndefs: true}
		),
		{a: {b: 3}, d: {a: ll.toStrict({b: {d: 23}, d: 1})}},
		"unexpected result from maps.clone"
	)
}

Test_map_Clone_3 := func() {
	a := {a: {b: 3}, d: [{a: ll.toStrict({b: {c: undefined, d: 23}, d: 1})}]}
	aCopy := maps.clone(a)
	a.d = []
	test.isEqual(
		aCopy,
		{a: {b: 3}, d: [{a: ll.toStrict({b: {c: undefined, d: 23}, d: 1})}]},
		"unexpected result from maps.clone"
	)
}

Test_map_DeepTransform := func() {
	test.isEqual(
		maps.deepTransform(
			{a: {a: 1, b: 2}, c: 1, d: {a: {b: {c: 12}, d: 1}}},
			{a: {b: func(val) { return val * 2 }}, d: {a: {b: {c: undefined}}}}
		),
		{a: {a: 1, b: 4}, c: 1, d: {a: {b: {}, d: 1}}},
		"unexpected result from maps.deepTransform"
	)

	test.isEqual(
		maps.deepTransform(
			{user: {name: "John", age: 30}, settings: {theme: "dark"}},
			{user: {age: func(val) { return val + 1 }}, settings: {theme: func(val) { return val + "-mode" }}}
		),
		{user: {name: "John", age: 31}, settings: {theme: "dark-mode"}},
		"unexpected result from maps.deepTransform with simple transformations"
	)

	test.isEqual(
		maps.deepTransform(
			{data: {items: [1, 2, 3], meta: {count: 3}}},
			{data: {meta: {count: func(val) { return undefined }}}}
		),
		{data: {items: [1, 2, 3], meta: {}}},
		"unexpected result from maps.deepTransform with undefined return"
	)
}

Test_map_ContainsKey := func() {
	test.isTrue(maps.containsKey({a: undefined}, "a"), "map.containsKey() wrong result for regular map with existing key and undefined value")
	test.isTrue(maps.containsKey({b: 1}, "b"), "map.containsKey() wrong result for regular map with existing key and truthful value")
	test.isTrue(maps.containsKey({c: 0}, "c"), "map.containsKey() wrong result for regular map with existing key and falsey value")
	test.isFalse(maps.containsKey({d: 1}, "a"), "map.containsKey() wrong result for absent key")

	test.isTrue(maps.containsKey(ll.toStrict({a: undefined}), "a"), "map.containsKey() wrong result for regular map with existing key and undefined value")
	test.isTrue(maps.containsKey(ll.toStrict({b: 1}), "b"), "map.containsKey() wrong result for regular map with existing key and truthful value")
	test.isTrue(maps.containsKey(ll.toStrict({c: 0}), "c"), "map.containsKey() wrong result for regular map with existing key and falsey value")
	test.isFalse(maps.containsKey(ll.toStrict({d: 1}), "a"), "map.containsKey() wrong result for absent key")
}
