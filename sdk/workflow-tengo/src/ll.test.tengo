test := import(":test")
ll := import(":ll")
plapi := import("plapi")
hex := import("hex")

Test_ll_MethodExists := func() {
	//
	// Library module checks
	//
	test.isTrue(ll.methodExists(ll, "assert"), "wrong result from 'methodExists' check for ll.assert")
	test.isFalse(ll.methodExists(ll, "nonexistent"), "wrong result from 'methodExists' check for ll.nonexistent")

	//
	// Builtin module checks
	//
	test.isTrue(ll.methodExists(plapi, "newFieldID"), "wrong result from 'methodExists' check for plapi.newFieldID")
	test.isFalse(ll.methodExists(plapi, "nonexistent"), "wrong result from 'methodExists' check for plapi.nonexistent")
}

// The test just checks that the value is stored between function calls.
Test_ll_getExecutionCtx := func() {
	ctx := ll.getExecutionCtx()
	ctx["theAnswer"] = 42

	test.isEqual(ll.getExecutionCtx()["theAnswer"], 42, "wrong value in execution ctx")
}

// The test checks that global variables are stored between different moduleVars invocations.
Test_ll_moduleVars_get_set := func() {
	vars := ll.moduleVars("mySuperFineModule")
	vars.set("theAnswer", 42)

	test.isEqual(vars.get("theAnswer"), 42, "wrong value in module vars")

	vars2 := ll.moduleVars("mySuperFineModule")
	test.isEqual(vars2.get("theAnswer"), 42, "wrong value in module vars")
}

// The test checks that global variables are not mixed between different modules.
Test_ll_moduleVars_different_modules := func() {
	vars := ll.moduleVars("mySuperFineModule1")
	vars.set("theAnswer", 42)

	vars2 := ll.moduleVars("myMegaBadModule2")
	vars2.set("theAnswer", 43)

	oldVars := ll.moduleVars("mySuperFineModule1")
	test.isEqual(oldVars.get("theAnswer"), 42, "wrong value in module vars")
}

Test_ll_sha256Encode := func() {
	hash := ll.sha256Encode(bytes("hello"))

	test.isEqual(
		"2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824",
		hex.encode(hash),
		"wrong sha256 hash"
	)
}

Test_ll_gzipEncode := func() {
	encoded := ll.gzipEncode(bytes("hello"))

	test.isEqual(
		"1f8b08000000000000ffca48cdc9c907040000ffff86a6103605000000",
		hex.encode(encoded),
		"wrong gzip encoded bytes"
	)
}

Test_ll_gzipDecode := func() {
	decoded := ll.gzipDecode(hex.decode("1f8b08000000000000ffca48cdc9c907040000ffff86a6103605000000"))

	test.isEqual(
		"hello",
		string(decoded),
		"wrong gzip decoded bytes"
	)
}

Test_ll_base32Encode := func() {
	encoded := ll.base32Encode(bytes("hello"))

	test.isEqual(
		"NBSWY3DP",
		encoded,
		"wrong base32 encoded bytes"
	)
}

Test_ll_base32HexEncode := func() {
	encoded := ll.base32HexEncode(bytes("hello"))

	test.isEqual(
		"D1IMOR3F",
		encoded,
		"wrong base32hex encoded bytes"
	)
}

Test_ll_base32Decode := func() {
	decoded := ll.base32Decode("NBSWY3DP")

	test.isEqual(
		"hello",
		string(decoded),
		"wrong base32 decoded bytes"
	)
}

Test_ll_base32HexDecode := func() {
	decoded := ll.base32HexDecode("D1IMOR3F")

	test.isEqual(
		"hello",
		string(decoded),
		"wrong base32hex decoded bytes"
	)
}

Test_ll_sha256Encode_and_base32Encode := func() {
	hash := ll.base32Encode(ll.sha256Encode(bytes("asd"))[0:20])

	test.isEqual(
		"NCDYPWH7CRGFALD7LT72V7RMYWENQYDZ",
		hash,
		"wrong sha256 hash base32 encoding"
	)
}

// Test_ll_getBlobSize := func() {
// 	test.isTrue(ll.methodExists(plapi, "getBlobSize"), "wrong result from 'methodExists' check for plapi.getBlobSize")
// }
