test := import(":test")
pSpec := import(":pframes.spec")
json := import("json")

TestMakeTrace := func() {
	trace1 := pSpec.makeTrace(undefined, {type: "type", label: "the label"})
	test.isEqual(
		trace1.value,
		[{type: "type", label: "the label"}]
	)
	spec1 := trace1.inject({
		kind: "PColumn",
		valueType: "Int",
		name: "col1"
	})
	trace2 := pSpec.makeTrace(spec1, {type: "type2", id: "theid1", importance: 3, label: "the label 3"})
	test.isEqual(
		trace2.value,
		[{type: "type", label: "the label"}, {type: "type2", id: "theid1", importance: 3, label: "the label 3"}]
	)
}

TestMakeTraceInjectOverride := func() {
	// Create initial trace
	trace1 := pSpec.makeTrace(undefined, {type: "initial", label: "initial trace"})

	// Create spec with initial trace
	baseSpec := {
		kind: "PColumn",
		valueType: "Int",
		name: "col1"
	}
	specWithTrace := trace1.inject(baseSpec)

	// Verify initial trace was injected
	test.isTrue(!is_undefined(specWithTrace.annotations))
	test.isTrue(!is_undefined(specWithTrace.annotations["pl7.app/trace"]))

	// Create new trace
	trace2 := pSpec.makeTrace(undefined, {type: "new", label: "new trace"})

	// Test 1: Default behavior (override = true by default) - should override existing trace
	resultDefault := trace2.inject(specWithTrace)
	test.isEqual(resultDefault.annotations["pl7.app/trace"], trace2.valueStr)

	// Test 2: Explicit override = true - should override existing trace
	resultOverrideTrue := trace2.inject(specWithTrace, {override: true})
	test.isEqual(resultOverrideTrue.annotations["pl7.app/trace"], trace2.valueStr)

	// Test 3: override = false - should preserve existing trace
	resultOverrideFalse := trace2.inject(specWithTrace, {override: false})
	test.isEqual(resultOverrideFalse.annotations["pl7.app/trace"], trace1.valueStr)

	// Test 4: No existing trace with override = false - should still add trace
	resultNoExistingTrace := trace2.inject(baseSpec, {override: false})
	test.isEqual(resultNoExistingTrace.annotations["pl7.app/trace"], trace2.valueStr)

	// Test 5: No existing trace with default behavior - should add trace
	resultNoExistingDefault := trace2.inject(baseSpec)
	test.isEqual(resultNoExistingDefault.annotations["pl7.app/trace"], trace2.valueStr)
}

TestAxisMatcher := func() {
	axesSpec := [
		{
			type: "String",
			name: "axis1",
			annotations: {
				"pl7.app/label": "Source MiXCR stage"
			},
			domain: {
				"d1": "1"
			}
		},
		{
			type: "String",
			name: "axis2",
			annotations: {
				"pl7.app/label": "Source MiXCR stage"
			}
		},
		{
			type: "Int",
			name: "axis3",
			domain: {},
			annotations: {
				"pl7.app/label": "Report format"
			}
		}
	]
	test.isEqual(pSpec.matchAxis(axesSpec, {name: "axis5", optional: true}), -1)

	test.isEqual(pSpec.matchAxis(axesSpec, {name: "axis1"}), 0)
	test.isEqual(pSpec.matchAxis(axesSpec, {name: "axis2"}), 1)
	test.isEqual(pSpec.matchAxis(axesSpec, {name: "axis3"}), 2)

	test.isEqual(pSpec.matchAxis(axesSpec, {name: "axis1", domain: {}}), 0)
	test.isEqual(pSpec.matchAxis(axesSpec, {name: "axis2", domain: {}}), 1)
	test.isEqual(pSpec.matchAxis(axesSpec, {name: "axis3", domain: {}}), 2)

	test.isEqual(pSpec.matchAxis(axesSpec, {name: "axis1", domain: {d1: "1"}}), 0)
	test.isEqual(pSpec.matchAxis(axesSpec, {name: "axis2", domain: {d1: "1"}, optional: true}), -1)
	test.isEqual(pSpec.matchAxis(axesSpec, {name: "axis3", domain: {d1: "1"}, optional: true}), -1)

	test.isEqual(pSpec.matchAxis(axesSpec, "axis3"), 2)
	test.isEqual(pSpec.matchAxis(axesSpec, {name: "axis2"}), 1)
	test.isEqual(pSpec.matchAxis(axesSpec, "axis1"), 0)

	test.isEqual(pSpec.matchAxes(axesSpec, ["axis3", {name: "axis1"}, "axis2"]), [2, 0, 1])
	test.isEqual(pSpec.matchAxes(axesSpec, ["axis3", {name: "axis1"}, "axis2", {name:"axis4", optional: true}], {keepUnmatched: true}), [2, 0, 1, -1])
	test.isEqual(pSpec.matchAxes(axesSpec, ["axis3", {name: "axis1"}, "axis2", {name:"axis4", optional: true}], {keepUnmatched: false}), [2, 0, 1])

	axesSpec1 := [
		{
			type: "String",
			name: "axis1",
			annotations: {
				"pl7.app/label": "Source MiXCR stage"
			},
			domain: {
				"d1": "1"
			}
		},
		{
			type: "String",
			name: "axis1",
			annotations: {
				"pl7.app/label": "Source MiXCR stage"
			},
			domain: {
				"d1": "2"
			}
		},
		{
			type: "String",
			name: "axis2",
			annotations: {
				"pl7.app/label": "Source MiXCR stage"
			}
		},
		{
			type: "Int",
			name: "axis3",
			domain: {},
			annotations: {
				"pl7.app/label": "Report format"
			}
		}
	]

	test.isEqual(pSpec.matchAxis(axesSpec1, {name: "axis1", domain: {d1: "2"}}), 1)
}

TestSpecDistiller := func() {
	specs := [
		{
			axesSpec: [
				{
					domain: {
						`pl7.app/vdj/clustering/blockId`: "7c4a6044-088a-479b-ae23-d98c991db6ea"
					},
					name: "pl7.app/vdj/clusterId",
					type: "String"
				}
			],
			kind: "PColumn",
			name: "pl7.app/vdj/clustering/clusterSize",
			valueType: "Int"
		},
		{
			axesSpec: [
				{
					name: "pl7.app/vdj/clonotypeKey",
					type: "String"
				}
			],
			kind: "PColumn",
			name: "pl7.app/vdj/liabilitiesRisk",
			valueType: "String"
		},
		{
			axesSpec: [
				{
					type: "String",
					domain: {
						`pl7.app/vdj/clustering/blockId`: "7c4a6044-088a-479b-ae23-d98c991db6ea"
					},
					name: "pl7.app/vdj/clusterId"
				}
			],
			kind: "PColumn",
			name: "pl7.app/vdj/enrichment",
			valueType: "Double"
		},
		{
			axesSpec: [
				{
					name: "pl7.app/vdj/clonotypeKey",
					type: "String"
				}
			],
			kind: "PColumn",
			name: "pl7.app/vdj/sampleCount",
			valueType: "Int"
		},
		{
			kind: "PColumn",
			name: "pl7.app/vdj/link",
			valueType: "Int",
			axesSpec: [
				{
					name: "pl7.app/vdj/clonotypeKey",
					type: "String"
				},
				{
					domain: {
						`pl7.app/vdj/clustering/blockId`: "0877c411-f4c0-4fe0-990f-18d9daeb7d5d"
					},
					name: "pl7.app/vdj/clusterId",
					type: "String"
				}
			]
		},
		{
			kind: "PColumn",
			name: "pl7.app/vdj/link",
			valueType: "Int",
			axesSpec: [
				{
					name: "pl7.app/vdj/clonotypeKey",
					type: "String"
				},
				{
					domain: {
						`pl7.app/vdj/clustering/blockId`: "7c4a6044-088a-479b-ae23-d98c991db6ea"
					},
					name: "pl7.app/vdj/clusterId",
					type: "String"
				}
			]
		},
		{
			name: "pl7.app/vdj/clustering/clusterSize",
			valueType: "Int",
			axesSpec: [
				{
					domain: {
						`pl7.app/vdj/clustering/blockId`: "0877c411-f4c0-4fe0-990f-18d9daeb7d5d"
					},
					name: "pl7.app/vdj/clusterId",
					type: "String"
				}
			],
			kind: "PColumn"
		}
	]

	distiller := pSpec.createSpecDistiller(specs)
	distilledSpecs := []
	for _, spec in specs {
		distilledSpecs = append(distilledSpecs, distiller.distill(spec))
	}

	test.isEqual(distilledSpecs, specs)
}
