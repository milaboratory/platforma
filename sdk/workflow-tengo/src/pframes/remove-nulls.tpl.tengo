self := import(":tpl")

json := import("json")
ll := import(":ll")
pcolumn := import(":pframes.pcolumn")
smart := import(":smart")
constants := import(":pframes.constants")

self.defineOutputs("result")
self.awaitStateIfEphemeral("map", "AllInputsSet")

self.body(func(inputs) {
	map := inputs.map
	ll.assert(pcolumn.isResourceMap(map), "expected p-column resource map resource, got %v", map.info().Type.Name)

	dataInfo := map.getDataAsJson()

	result := smart.structBuilder(
		constants.RTYPE_P_COLUMN_DATA_RESOURCE_MAP,
		json.encode(dataInfo)
	)

	for key, field in map.inputs() {
		data := field.getValue()
		ll.assert(smart.isResource(data), "expected resource, got %v", data)
		if !smart.isNullResource(data) {
			result.createInputField(key).set(data)
		}
	}

	return {
		result: result.lockAndBuild()
	}
})
