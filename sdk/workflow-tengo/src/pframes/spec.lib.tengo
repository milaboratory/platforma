/**
 * PFrames spec library:
 *  - well known domains, annotations and column names.
 *  - utility methods to manipulate column and axis spec
 */

ll := import(":ll")
validation := import(":validation")
json := import("json")

KIND_P_COLUMN := "PColumn"

//
// Column / axis names
//

/** Column containing labels for axis keys */
N_LABEL := "pl7.app/label"

//
// Column / axis domains
//

/** Domain marking column or axis as block-specific, value must contain block id */
D_BLOCK := "pl7.app/block"

//
// Column / axis annotations
//

/** Annotation with axis or column label */
A_LABEL := "pl7.app/label"
/**
 * Annotation containing trace of operations resulting in a corresponding column.
 *
 * Value must containe JSON encoded array of structures:
 *   {
 *      type: string   - type of the step, often equals to block package name (i.e. milaboratories.mixcr-clonotyping)
 *      id: string     - unique identifier of operation, often a block id
 *      label: string  - string representation of the operation often a block title
 *    }
 */
A_TRACE := "pl7.app/trace"

//
// Utility methods
//

_TRACE_STEP_SCHEMA := {
	`type`: `string`,
	`id`: `string`,
	`label`: `string`,
	`__options__,closed`: ``
}

_TRACE_SCHEMA := [_TRACE_STEP_SCHEMA]

/**
 * Calculates content of pl7.app/trace annotation, given input column spec, or annotations section
 * of specs, or directly content of pl7.app/trace from the input column spec.
 *
 * Basically validates and adds provided steps.
 *
 */
makeTrace := func(input, ...steps) {
	// validating input step structure
	validation.assertJsonSchema(steps, _TRACE_SCHEMA)

	currentTraceContent := undefined
	if is_string(input) {
		currentTraceContent = input
	} else if is_string(input[A_TRACE]) {
		currentTraceContent = input[A_TRACE]
	} else if is_string(input["annotations"][A_TRACE]) {
		currentTraceContent = input["annotations"][A_TRACE]
	}
	currentTrace := []
	if !is_undefined(currentTraceContent) {
		currentTrace = json.decode(currentTraceContent)
		// validating trace we just parsed
		validation.assertJsonSchema(currentTrace, _TRACE_SCHEMA)
	}

	currentTrace = append(currentTrace, steps...)

	return currentTrace
}

export ll.toStrict({
	KIND_P_COLUMN: KIND_P_COLUMN,

	N_LABEL: N_LABEL,

	D_BLOCK: D_BLOCK,

	A_LABEL: A_LABEL,
	A_TRACE: A_TRACE,

	makeTrace: makeTrace
})
