/**
 * PFrames spec library:
 *  - well known domains, annotations and column names.
 *  - utility methods to manipulate column and axis spec
 */

ll := import(":ll")
maps := import(":maps")
sets := import(":sets")
slices := import(":slices")
validation := import(":validation")
json := import("json")

//
// Common schemas
//

P_UNTYPED_SPEC_SCHEMA := {
	`name`: `string`,
	`domain,?`: { any: `string` },
	`annotations,?`: { any: `string` },
	`parentAxes,?`: [ `number` ]
}

P_AXIS_SPEC_SCHEMA := ["and", P_UNTYPED_SPEC_SCHEMA, {
	`type`: `string,regex=Int|Long|String`
}]

P_COLUMN_OWN_SPEC_SCHEMA := ["and", P_UNTYPED_SPEC_SCHEMA, {
	`valueType`: `string,regex=Int|Long|Float|Double|String`
}]

P_COLUMN_SPEC_SCHEMA := ["and", P_UNTYPED_SPEC_SCHEMA, {
	`kind`: `string,regex=PColumn`,
	`valueType`: `string`,
	`axesSpec,?`: [ P_AXIS_SPEC_SCHEMA ]
}]

P_COLUMN_STRICT_SPEC_SCHEMA := ["and", P_COLUMN_SPEC_SCHEMA, {
	`valueType`: `string,regex=Int|Long|Float|Double|String`
}]

P_OBJECT_SPEC_SCHEMA := ["or", P_COLUMN_SPEC_SCHEMA, {
	`kind`: `string`,
	`annotations,?`: { any: `string` }
}]

KIND_P_COLUMN := "PColumn"

//
// Column / axis names
//

/** Column containing labels for axis keys */
N_LABEL := "pl7.app/label"

//
// Column / axis domains
//

/** Domain marking column or axis as block-specific, value must contain block id */
D_BLOCK := "pl7.app/block"

//
// Column / axis annotations
//

/** Annotation with axis or column label */
A_LABEL := "pl7.app/label"
/**
 * Annotation containing trace of operations resulting in a corresponding column.
 *
 * Value must containe JSON encoded array of structures:
 *   {
 *      type: string       - type of the step, often equals to block package name (i.e. milaboratories.mixcr-clonotyping)
 *      label: string      - string representation of the operation often a block title
 *      importance: number - higher the number higher the change label from trace step will be used to derive column label
 *      id: string         - unique identifier of operation, often a block id
 *   }
 */
A_TRACE := "pl7.app/trace"

//
// Format methods
//

normalizeColumnSpec := func(spec) {
	if is_undefined(spec.axesSpec) {
		spec.axesSpec = []
	}
	validation.assertType(spec, P_COLUMN_SPEC_SCHEMA)
	return spec
}

//
// Matchers
//

_P_MATCHER_SCHEMA := {
	// `__options__,closed`: ``, // commented out to allow for custom options be included in matchers
	`type,?`: `string,regex=Int|Long|Float|Double|String`,
	`name`: `string`,
	`domain,?`: { any: `string` },
	`optional,?`: `boolean`
}

_normalizeMatcher := func(matcher) {
	if is_int(matcher) {
		return matcher
	} else if is_string(matcher) {
		return { name: matcher }
	} else {
		validation.assertType(matcher, _P_MATCHER_SCHEMA)
		return matcher
	}
}

_checkAxisMatch := func(axisSpec, matcher) {
	if axisSpec.name != matcher.name {
		return false
	}
	if !is_undefined(matcher.type) && axisSpec.type != matcher.type {
		return false
	}
	if !is_undefined(matcher.domain) {
		for domain, domainValue in matcher.domain {
			if is_undefined(axisSpec.domain) || axisSpec.domain[domain] != domainValue {
				return false
			}
		}
	}
	return true
}

/**
 * For a given array of axes specs returns the index of matching axis:
 *   - if multiple matches are found - panics
 *   - if axis not found and matcher is not optional - panics
 */
matchAxis := func(axesSpec, matcher) {
	validation.assertType(axesSpec, [ P_AXIS_SPEC_SCHEMA ])
	matcher = _normalizeMatcher(matcher)
	found := -1
	for idx, axisSpec in axesSpec {
		if is_int(matcher) {
			if idx != matcher {
				continue
			}
		} else if !_checkAxisMatch(axisSpec, matcher) {
			continue
		}
		if found != -1 {
			ll.panic("multiple matches found for %v in %v", matcher, axesSpec)
		}
		found = idx
	}
	if found == -1 && !matcher.optional {
		ll.panic("match not found for %v in %v", matcher, axesSpec)
	}
	return found
}

/**
 * Matches axes specs against matchers and returns array of matched indices.
 *
 * Example matchers:
 *   - 0 (to match by index)
 *   - "pl7.app/sequencing/readIndex"
 *   - { name: "pl7.app/sequencing/readIndex" }
 *   - { type: "String", name: "pl7.app/sequencing/lane" }
 *   - { type: "String", name: "pl7.app/sequencing/lane", optional: true }
 *   - { type: "String", name: "pl7.app/rna-seq/geneId", domain: { "pl7.app/species": "homo-sapiens" } }
 *
 * @param axesSpec: AxisSpec[] Array of axis specifications to match against
 * @param matchers: (string|AxisMatcher)[] Array of matchers, each can be either:
 *   - string: Simple name matcher e.g. "pl7.app/sequencing/readIndex"
 *   - AxisMatcher: Object with matching criteria:
 *     - name: string - Axis name to match
 *     - type?: string - Optional axis type to match
 *     - domain?: Record<string,string> - Optional domain criteria
 *     - optional?: boolean - If true, won't panic when no match found
 * @param opts?: object Optional parameters:
 *   - keepUnmatched?: boolean - Whether to include unmatched indices (-1) in result
 * @returns number[] Array of matched indices in same order as matchers. Contains -1 for
 *          unmatched optional matchers if keepUnmatched is true.
 * @panics
 *   - If multiple axes match a single matcher
 *   - If no match found for non-optional matcher
 *   - If multiple matchers match the same axis
 */
matchAxes := func(axesSpec, matchers, ...opts) {
	keepUnmatched := false
	if len(opts) == 1 {
		keepUnmatched = opts[0].keepUnmatched
	} else if len(opts) != 0 {
		ll.panic("wrong number of parameters for matchAxes")
	}

	result := []
	resultSet := {}
	for matcher in matchers {
		idx := matchAxis(axesSpec, matcher)
		if idx != -1 {
			idxS := string(idx)
			if resultSet[idxS] {
				ll.panic("duplicate match detecterd for %v in %v (idx = %v)", matchers, axesSpec, idx)
			}
			resultSet[idxS] = true
		}
		if idx != -1 || keepUnmatched {
			result = append(result, idx)
		}
	}
	return result
}

//
// Utility methods
//

_TRACE_STEP_SCHEMA := {
	`type`: `string`,
	`label`: `string`,
	`importance,?`: `number`,
	`id,?`: `string`,
	`__options__,closed`: ``
}

_TRACE_SCHEMA := [_TRACE_STEP_SCHEMA]

/**
 * Calculates content of pl7.app/trace annotation, given input column spec, or annotations section
 * of specs, or directly content of pl7.app/trace from the input column spec.
 *
 * Basically validates and adds provided steps.
 */
makeTrace := func(input, ...steps) {
	// validating input step structure
	validation.assertType(steps, _TRACE_SCHEMA)

	currentTraceContent := undefined
	if is_string(input) {
		currentTraceContent = input
	} else if is_string(input[A_TRACE]) {
		currentTraceContent = input[A_TRACE]
	} else if is_string(input["annotations"][A_TRACE]) {
		currentTraceContent = input["annotations"][A_TRACE]
	}

	currentTrace := []
	if !is_undefined(currentTraceContent) {
		currentTrace = json.decode(currentTraceContent)
		// validating trace we just parsed
		validation.assertType(currentTrace, _TRACE_SCHEMA)
	}

	if len(steps) > 0 {
		currentTrace = append(currentTrace, steps...)
	}
	currentTraceStr := string(json.encode(currentTrace))

	return ll.toStrict({
		value: currentTrace,
		valueStr: currentTraceStr,
		/**
		 * Injects trace information into column spec by setting the pl7.app/trace annotation.
		 *
		 * By default, existing trace annotations will be overridden with the new trace.
		 * This behavior can be changed using the override option.
		 *
		 * @param spec: ColumnSpec - The column specification to inject trace into
		 * @param ...opts: map - Optional parameters:
		 *   - override: boolean - If true (default), override existing trace annotation.
		 *                         If false, preserve existing trace annotations.
		 * @returns ColumnSpec - A new column spec with trace annotation injected
		 */
		inject: func(spec, ...opts) {
			validation.assertType(spec, P_COLUMN_SPEC_SCHEMA)

			// Process optional parameters following codebase pattern
			options := {}
			if len(opts) > 0 {
				if len(opts) == 1 && is_map(opts[0]) {
					options = opts[0]
				} else {
					ll.panic("inject: optional parameters must be a single map argument, got: %v", opts)
				}
			}

			// Extract override option with default value
			override := options.override
			if is_undefined(override) {
				override = true
			}

			return maps.deepTransform(spec, {annotations: {"pl7.app/trace": func(oldValue) {
				// if trace is already there and override is false, don't touch it
				if override || is_undefined(oldValue) {
					return currentTraceStr
				}
				return oldValue
			}}})
		}
	})
}

/**
 * Creates a spec distiller object that identifies domains with multiple values
 * and provides a method to clean specs by removing annotations and unnecessary domains.
 *
 * @param specs array of column specs
 * @return an object with a distill method
 */
createSpecDistiller := func(specs) {
	// Map to collect all domain values by name
	// Structure: { name: { domainName: Set<values> } }
	domainsValues := {}

	addDomainValue := func(name, domainName, domainValue) {
		if is_undefined(domainsValues[name]) {
			domainsValues[name] = {}
		}

		if is_undefined(domainsValues[name][domainName]) {
			domainsValues[name][domainName] = {}
		}

		domainsValues[name][domainName][domainValue] = true
	}

	// Collect all domain values for each spec and axis
	for _, spec in specs {
		// Process column spec domains
		columnName := spec.name
		if !is_undefined(spec.domain) {
			for domainName, domainValue in spec.domain {
				addDomainValue(columnName, domainName, domainValue)
			}
		}

		// Process axis spec domains
		if !is_undefined(spec.axesSpec) {
			for _, axis in spec.axesSpec {
				axisName := axis.name
				if !is_undefined(axis.domain) {
					for domainName, domainValue in axis.domain {
						addDomainValue(axisName, domainName, domainValue)
					}
				}
			}
		}
	}

	// Filter domains that have more than one value - these are the ones that help discriminate pcolumns
	discriminativeDomains := {}
	for name, domains in domainsValues {
		for domainName, valueSet in domains {
			if len(valueSet) > 1 {
				if is_undefined(discriminativeDomains[name]) {
					discriminativeDomains[name] = {}
				}
				discriminativeDomains[name][domainName] = true
			}
		}
	}

	// Helper function to filter domains based on discriminative domains
	filterDomain := func(domain, entityName) {
		if is_undefined(domain) {
			return undefined
		}

		filteredDomain := undefined

		if !is_undefined(discriminativeDomains[entityName]) {
			for domainName, domainValue in domain {
				if sets.hasElement(discriminativeDomains[entityName], domainName) {
					if is_undefined(filteredDomain) {
						filteredDomain = {}
					}
					filteredDomain[domainName] = domainValue
				}
			}
		}

		return filteredDomain
	}

	// Helper function to distill entity (column or axis)
	distillEntity := func(entity, entityName) {
		result := maps.clone(entity)

		if !is_undefined(result.annotations) {
			delete(result, "annotations")
		}

		// Filter domains
		filteredDomain := filterDomain(result.domain, entityName)
		if !is_undefined(filteredDomain) {
			result.domain = filteredDomain
		} else if !is_undefined(result.domain) {
			delete(result, "domain")
		}

		return result
	}

	result := undefined
	result = ll.toStrict({
		/**
		 * Returns the discriminative domains for a given column spec.
		 *
		 * @param name: string - The name of the column spec to get discriminative domains for
		 * @return string[] - The discriminative domains, sorted alphabetically
		 */
		getDiscriminativeDomains: func(name) {
			return slices.fromSet(discriminativeDomains[name])
		},

		/**
		 * Returns the discriminative domains for a given column spec as a set.
		 *
		 * @param name: string - The name of the column spec to get discriminative domains for
		 * @return Record<string, boolean> - The discriminative domains
		 */
		getDiscriminativeDomainsSet: func(name) {
			return discriminativeDomains[name]
		},

		/**
		 * Distills a column spec by removing annotations and unnecessary domains.
		 *
		 * @param spec: ColumnSpec - The column spec to distill
		 * @return ColumnSpec - The distilled column spec
		 */
		distill: func(spec) {
			result := distillEntity(spec, spec.name)

			// Process axes if they exist
			if !is_undefined(result.axesSpec) {
				for i, axis in result.axesSpec {
					result.axesSpec[i] = distillEntity(axis, axis.name)
				}
			}

			return result
		}
	})

	return result
}

/**
 * Normalizes filtering rules and returns both the normalized filters and a transformed column spec.
 *
 * To be used in conjunction with `slice-data.tpl.tengo` template.
 *
 * @param rules: [number|string, any][] - Array of axis filters where each element is a tuple of:
 *    - First element: either axis index (number) or axis name (string)
 *    - Second element: value to filter by (any type)
 * @param spec: ColumnSpec - Column spec to resolve axis names to indices
 * @return {
 *    axisFilters: [number, string][] - Normalized array of tuples [axisIdx, valueToFilter],
 *    columnSpec: ColumnSpec - Transformed column spec with filtered axes removed
 * }
 */
prepareAxisFilters := func(rules, spec) {
	axisFilters := []
	filteredIndices := {}

	for _, rule in rules {
		if len(rule) != 2 {
			ll.panic("Invalid filtering rule format: %v", rule)
		}

		axisIdentifier := rule[0]
		value := rule[1]

		axisIdx := axisIdentifier
		if is_string(axisIdentifier) {
			axisIdx = -1
			for idx, axis in spec.axesSpec {
				if axis.name == axisIdentifier {
					axisIdx = idx
					break
				}
			}

			if axisIdx == -1 {
				ll.panic("Cannot find axis with name '%v' in column spec %v", axisIdentifier, spec)
			}
		}

		if !is_int(axisIdx) {
			ll.panic("Axis identifier must be a number or a string that can be resolved to an index: %v", axisIdentifier)
		}

		valueStr := string(value)
		axisFilters = append(axisFilters, [axisIdx, valueStr])
		filteredIndices[axisIdx] = true
	}

	transformedSpec := maps.clone(spec)
	newAxesSpec := []
	for idx, axis in spec.axesSpec {
		if !filteredIndices[idx] {
			newAxesSpec = append(newAxesSpec, maps.clone(axis))
		}
	}
	transformedSpec.axesSpec = newAxesSpec

	return {
		axisFilters: axisFilters,
		columnSpec: transformedSpec
	}
}

/**
 * Converts an AxisSpec object into a matcher object suitable for functions like matchAxis.
 * It copies the 'name', 'type', and 'domain' (if present) fields from the AxisSpec.
 *
 * @param axisSpec P_AXIS_SPEC_SCHEMA - The axis specification object.
 * @returns map - A matcher object with 'name', 'type', and optionally 'domain'.
 */
axisSpecToMatcher := func(axisSpec) {
	validation.assertType(axisSpec, P_AXIS_SPEC_SCHEMA)
	matcher := {
		name: axisSpec.name,
		type: axisSpec.type
	}
	if !is_undefined(axisSpec.domain) {
		matcher.domain = maps.clone(axisSpec.domain) // Clone to avoid modifying original spec's domain
	}
	return matcher
}

export ll.toStrict({
	P_UNTYPED_SPEC_SCHEMA: P_UNTYPED_SPEC_SCHEMA,
	P_AXIS_SPEC_SCHEMA: P_AXIS_SPEC_SCHEMA,
	P_COLUMN_OWN_SPEC_SCHEMA: P_COLUMN_OWN_SPEC_SCHEMA,
	P_COLUMN_SPEC_SCHEMA: P_COLUMN_SPEC_SCHEMA,
	P_COLUMN_STRICT_SPEC_SCHEMA: P_COLUMN_STRICT_SPEC_SCHEMA,
	P_OBJECT_SPEC_SCHEMA: P_OBJECT_SPEC_SCHEMA,

	KIND_P_COLUMN: KIND_P_COLUMN,

	N_LABEL: N_LABEL,

	D_BLOCK: D_BLOCK,

	A_LABEL: A_LABEL,
	A_TRACE: A_TRACE,

	normalizeColumnSpec: normalizeColumnSpec,

	matchAxis: matchAxis,
	matchAxes: matchAxes,

	makeTrace: makeTrace,

	createSpecDistiller: createSpecDistiller,

	prepareAxisFilters: prepareAxisFilters,
	axisSpecToMatcher: axisSpecToMatcher
})

