pConstants := import(":pframes.constants")
smart := import(":smart")
render := import(":render")
file := import(":file")
ll := import(":ll")
assets := import(":assets")
json := import("json")

// reference to the template doing nested super-partitioned export
nestedTpl := assets.importTemplate(":pframes.export-single-pcolumn")

parquetChunkTpl := assets.importTemplate(":pframes.export-parquet-pcolumn-chunk")

/** Implements core export logic for export-single-pcolumn and export-multiple-pcolumns templates */
exportPColumnData := func(data) {
	ll.assert(data.info().InputsLocked, "column data resource not locked for export: %v", data.info().Type)

	if data.checkResourceType(pConstants.RTYPE_P_COLUMN_DATA_RESOURCE_MAP_PARTITIONED) ||
		data.checkResourceType(pConstants.RTYPE_P_COLUMN_DATA_JSON_SUPER_PARTITIONED) ||
		data.checkResourceType(pConstants.RTYPE_P_COLUMN_DATA_BINARY_SUPER_PARTITIONED) ||
		data.checkResourceType(pConstants.RTYPE_P_COLUMN_DATA_PARQUET_SUPER_PARTITIONED) {
		// super-partitioned data

		newData := smart.structBuilder(data.info().Type, data.info().Data)
		for key, partData in data.inputs() {
			newData.createInputField(key).set(render.createEphemeral(nestedTpl, { data: partData }).output("result"))
		}
		return newData.lockAndBuild()

	} else if data.checkResourceType(pConstants.RTYPE_P_COLUMN_DATA_RESOURCE_MAP) ||
		data.checkResourceType(pConstants.RTYPE_P_COLUMN_DATA_JSON_PARTITIONED) ||
		data.checkResourceType(pConstants.RTYPE_P_COLUMN_DATA_BINARY_PARTITIONED) {
		// data directly referencing blob objects

		newData := smart.structBuilder(data.info().Type, data.info().Data)
		for key, partData in data.inputs() {
			newData.createInputField(key).set(file.exportFile(partData))
		}
		return newData.lockAndBuild()

	} else if data.checkResourceType(pConstants.RTYPE_P_COLUMN_DATA_PARQUET_PARTITIONED) {
		// data is a RTYPE_PARQUET_CHUNK resource

		newData := smart.structBuilder(data.info().Type, data.info().Data)
		for key, partData in data.inputs() {
			exportedDataPart := render.createEphemeral(parquetChunkTpl, {
				key: key,
				data: partData
			}).output("result")
			newData.createInputField(key).set(exportedDataPart)
		}
		return newData.lockAndBuild()

	} else if data.checkResourceType(pConstants.RTYPE_P_COLUMN_DATA_JSON) {
		// data embeds all information and needs no special exporting procedure

		return data

	} else {
		ll.panic("unknown resource type: %v", data.info().Type)
	}
}

export ll.toStrict({
	exportPColumnData: exportPColumnData
})
