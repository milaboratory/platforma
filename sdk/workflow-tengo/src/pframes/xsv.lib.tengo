/**
 * Library providing xsv <> p-frames conversion utils.
 */

validation := import(":validation")
constants := import(":pframes.constants")
objects := import(":objects")
smart := import(":smart")
render := import(":render")
maps := import(":maps")
util := import(":pframes.util")
pBuilder := import(":pframes.builder")
ll := import(":ll")
assets := import(":assets")
xsvIF := import(":pframes.xsv-import-file")
text := import("text")

importXsvIfNullTpl := assets.importTemplate(":pframes.xsv-import-if-not-null")

/**
 * Calculate axes spec from pfconv spec
 */
getAxesSpec := func(spec) {
	axes := []
	for ax in spec.axes {
		axes = append(axes, ax.spec)
	}
	return axes
}

renderOps := func(defaults, ...ops) {
	o := { }

	for k, v in defaults {
		o[k] = v
	}

	if len(ops) > 0 {
		for k, v in ops[0] {
			o[k] = v
		}
	}
	return o
}

getColumnSpec := func(axesSpec, col) {
	spec := {
		kind: constants.KIND_P_COLUMN,
		axesSpec: axesSpec
	}

	for k, v in col.spec {
		spec[k] = v
	}

	return objects.deleteUndefined(spec)
}

/**
 * Imports xsv data into p-frame. The resulting map resource contains all columns specified in the params (column identifiers as
 * provided by the spec used as map keys). Resulting p-columns will be always single-partitioned at most.
 *
 * @param xsvFile: reference - a reference to a file
 * @param xsvType: string - either csv or tsv
 * @param spec: object - xsv conversion specification
 * @param ops: object - additional options
 *               {
 *                 dataOnly: boolean  - set to true to completely skip creation of specs
 *                 splitDataAndSpec: boolean  - if true, resulting map will have nested structures,
 *                                              with "spec" + "data" fields in nested maps
 *                 allowNullInput: boolean - if true, null input file is allowed and will return null resource
 *                 transpose: object - if specified, then the input table will be transposed
 *                            {
 *                              separator: string - (optional) use separator instead of inferring from the file extension
 *                              pAxisIdx: index - (optional) the index of the primary axis (column in the input xsv); default 0
 *                              pAxisName: string - (optional) the name of the primary axis (column name in the input xsv); default undefined
 *                              pAxisSearch: regex - (optional) the regex pattern of the name of the primary axis (column name in the input xsv); default undefined
 *                              pAxisNameOverride: string - (optional) override primary axis header in the output; default undefined
 *                              sAxisSearch: string - (optional) regex to filter secondary axis columns in the input table;
 *                              sAxisName: string - (optional) the name of the secondary axis (column name in the output xsv); default "Metric"
 *                              valueName: string - (optional) the name of the value column; default "Value"
 *                              separatorOverride: string - (optional) specify separator in the output (optional)
 *                            }
 *               }
 * @return map: reference - a reference to a map resource storing imported data.
 */
importFile := func(xsvFile, xsvType, spec, ...ops) {
	ll.assert(xsvType == "csv" || xsvType == "tsv", "expected one of [tsv, csv] types, found: " + xsvType)

	validation.assertType(spec, util.PFCONV_IMPORT_CFG_SCHEMA)

	allowNullInput := false
	if len(ops) > 0 {
		allowNullInput = ops[0].allowNullInput
	}

	if allowNullInput {
		return render.create(importXsvIfNullTpl, {
			xsvFile: xsvFile,
			params: {
				xsvType: xsvType,
				spec: spec,
				ops: [maps.merge(ops[0], { allowNullInput: undefined })]
			}
		}).output("result")
	}

	return xsvIF.importFile(xsvFile, xsvType, spec, ops...)
}

/**
 * Imports a map with xsv files into a p-frame. The resulting map resource contains all columns specified in the params (column identifiers as
 * provided by the spec used as map keys). Resulting p-columns may be double-partitioned.
 *
 * @param xsvMap: reference - a reference to a p-column resource map with xsv files
 * @param xsvType: string - either csv or tsv
 * @param spec: object - xsv conversion specification
 * @param ops: object - additional options
 *               {
 *                 dataOnly: boolean  - set to true to completely skip creation of specs
 *                 splitDataAndSpec: boolean  - if true, resulting map will have nested structures,
 *                                              with "spec" + "data" fields in nested maps
 *                 additionalAxesSpec: AxisSpec[]  - array of additional axes spec to prepend to
 *                                                   each column spec
 *                 transpose: object - if specified, then the input table will be transposed
 *                            {
 *                              separator: string - (optional) use separator instead of inferring from the file extension
 *                              pAxisIdx: index - (optional) the index of the primary axis (column in the input xsv); default 0
 *                              pAxisName: string - (optional) the name of the primary axis (column name in the input xsv); default undefined
 *                              pAxisSearch: regex - (optional) the regex pattern of the name of the primary axis (column name in the input xsv); default undefined
 *                              pAxisNameOverride: string - (optional) override primary axis header in the output; default undefined
 *                              sAxisSearch: string - (optional) regex to filter secondary axis columns in the input table;
 *                              sAxisName: string - (optional) the name of the secondary axis (column name in the output xsv); default "Metric"
 *                              valueName: string - (optional) the name of the value column; default "Value"
 *                              separatorOverride: string - (optional) specify separator in the output (optional)
 *                            }
 *               }
 * @return map: reference - a reference to a map resource storing imported data.
 */
importFileMap := func(xsvMap, xsvType, spec, ...ops) {

	importXsvMapTpl := assets.importTemplate(":pframes.xsv-import-map")

	ops := renderOps({
		dataOnly: false,
		splitDataAndSpec: false,
		additionalAxesSpec: [],
		transpose: undefined
	}, ops...)

	// spec without any metadata (for caching purposes)
	decomposedSpec := util.decomposePfconvImportCfg(spec, { additionalAxesSpec: ops.additionalAxesSpec })
	pureSpec := decomposedSpec.purifiedCfg
	columnsSpec := decomposedSpec.columnsSpec

	r := render.createEphemeral(importXsvMapTpl, {
		xsvMap: xsvMap,
		xsvType: xsvType,
		spec: pureSpec,
		ops: { dataOnly: true, transpose: ops.transpose }
	})

	if ops.dataOnly && ops.splitDataAndSpec {
		ll.panic("Can't use both options dataOnly and splitDataAndSpec at the same time.")
	}

	result := {}
	axesSpec := getAxesSpec(spec)
	for c in spec.columns {
		id := util.xsvColumnId(c)
		if ops.dataOnly {
			result[id] = r.output(id)
		} else if ops.splitDataAndSpec {
			result[id] = {
				data: r.output(id),
				spec: columnsSpec[id]
			}
		} else {
			result[id + ".data"] = r.output(id)
			result[id + ".spec"] = columnsSpec[id]
		}
	}

	return result
}

isFlatPfMap := func(pf) {
	if !is_map(pf) {
		return false
	}

	for key, _ in pf {
		if !text.has_suffix(key, ".spec") && !text.has_suffix(key, ".data") {
			return false
		}
	}

	return true
}

isStructuredPfMap := func(pf) {
	if !is_map(pf) {
		return false
	}

	for _, value in pf {
		if !is_map(value) {
			return false
		}

		for k, _ in value {
			if k != "spec" && k != "data" {
				return false
			}
		}

		if is_undefined(value.spec) || is_undefined(value.data) {
			return false
		}
	}

	return true
}

/**
 * Export p-frame into xsv file
 *
 * @param pf: p-frame - a list of p-columns ({data, spec}) or a frame-like map of col.data col.spec entries
 * @param xsvType: string - "csv" or "tsv"
 * @param params: object - export params
 *                      {
 *                        naStr?: string     - String to represent NA and missing values of numeric types (Int, Long, Float, Double)
 *                                           - Default: "NaN"
 *                        nullStr?: string   - String to represent NA and missing values of text types (String, Bytes)
 *                                           - Default: "null"
 *                        exportBytes?: bool - Toggle to export or skip axes and columns of type Bytes
 *                                           - Default: false
 *                        separator?: string - Single ASCII character to be used as separator
 *                                           - Default: ',' for .csv, '\t' for .tsv
 *                        columnSelector?: object
 *                                           - Only columns matching the selector are exported
 *                                           - Default: all columns are exported
 *                                           {
 *                                             type?: []string          - Match any of the types listed (Int, Long, Float, Double, String, Bytes)
 *                                             name?: []string          - Match any of the names listed
 *                                             annotationValue?: object - Match requires all the listed annotations to have provided values
 *                                             annotationPattern?: object - Match requires all the listed annotations to match provided regex patterns
 *                                           }
 *                        joinType?: string  - Join type for columns with equal axes specifications
 *                                           - Options: "Full" | "Inner"
 *                                           - Default: "Full"
 *                      }
 * @param ops: object - additional options
 *               {
 *                 partitions: {axisIdx: [keys]} - map of partitions to export; if not specified, all data is exported
 *				 }
 * @return object: reference - a reference to exported xsv file.
 */
exportFrame := func(pf, xsvType, params, ...ops) {
	exportPfTpl := assets.importTemplate(":pframes.xsv-export-pframe")

	ops := renderOps({}, ops...)

	if is_array(pf) {
		// transform into .data .spec map

		pfBuilder := pBuilder.pFrameBuilder()
		i := 0
		for col in pf {
			ll.assert(!is_undefined(col.spec), "expected array of {spec, data} maps as a list of columns, but spec is undefined for: ", col)
			ll.assert(!is_undefined(col.data), "expected array of {spec, data} maps as a list of columns, but data is undefined for: ", col)
			pfBuilder.add(string(i), col.spec, col.data)
			i = i + 1
		}
		pf = pfBuilder.build()
	} else if isStructuredPfMap(pf) {
		pfBuilder := pBuilder.pFrameBuilder()
		for key, value in pf {
			pfBuilder.add(key, value.spec, value.data)
		}
		pf = pfBuilder.build()
	} else if smart.isResource(pf) {
		if !pf.checkResourceType(constants.RTYPE_P_FRAME) {
			ll.panic("Unexpected resource type: %s", pf.info().Type.Name)
		}
	} else if !isFlatPfMap(pf) && !smart.isReference(pf) {
		ll.panic("Unexpected p-frame format: %s", pf)
	}

	r := render.create(exportPfTpl, {
		pf: pf,
		xsvType: xsvType,
		params: params,
		ops: ops
	})

	return r.output("result")
}

export ll.toStrict({
	importFile: importFile,
	importFileMap: importFileMap,
	exportFrame: exportFrame
})
