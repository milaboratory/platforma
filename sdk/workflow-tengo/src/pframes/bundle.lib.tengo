smart := import(":smart")
json := import("json")
pConstants := import(":pframes.constants")
bquery := import(":workflow.bquery")
canonical := import(":canonical")
pSpec := import(":pframes.spec")
maps := import(":maps")
ll := import(":ll")
assets := import(":assets")
render := import(":render")

/**
 * Creates a collector to asynchronously aggregate PColumns into a resolved PColumnBundle.
 *
 * The PColumnBundleCollector maintains references, anchors, and queries which are used to fetch
 * and resolve PColumns asynchronously from a given result pool. The final PColumnBundle provides
 * easy and direct access to resolved PColumns.
 *
 * === Usage Flow ===
 *
 * 1. Add anchors, anchored queries and standalone references and queries to the collector
 * 2. Call `build` and pass the result to a different template or use in preload
 * 3. Use the PColumnBundle from the arguments of the nested template to interact with the data
 *
 * === Available Methods ===
 *
 *   addRef(ref)
 *     - Adds a standalone reference to be resolved separately from anchors
 *
 *   addAnchor(anchorId, ref)
 *     - Adds an anchor with the given ID and reference to be resolved
 *
 *   addSingle(id, ...queryKey, ...ops)
 *     - Adds a single PColumn to the bundle collector by its UniversalPColumnId.
 *       @param query: The query
 *       @param queryKey: string (optional) - The key to store and retrieve the query result.
 *       @param ops: object (optional) - Options, can include:
 *         - overrides: object - Override the query
 *
 *   addById(id)
 *     - Adds a PColumn to the bundle collector by UniversalPColumnId.
 *       Automatically unwraps FilteredPColumnId.
 *       @param id: string or object - The ID of the PColumn
 *         - string: A SUniversalPColumnId (canonically serialized UniversalPColumnId)
 *         - object: Either a standard AnchoredPColumnId or a FilteredPColumnId with source and axisFilters
 *
 *   addMulti(query, ...queryKey, ...ops)
 *     - Adds a query to the bundle collector.
 *       @param query: AnchoredPColumnSelector - The query
 *       @param queryKey: string (optional) - The key to store and retrieve the query result.
 *       @param ops: object (optional) - Options, can include:
 *         - overrides: object - Override the query
 *
 *   addQuery(query, ...queryKey, ...ops)
 *     - Adds a query to the bundle collector.
 *
 *   build()
 *     - Resolves all references and queries and returns a PColumnBundle
 *
 * === Parameters ===
 *
 * @param ctx {Context} - The context to use for resolution
 *
 * === Returns ===
 *
 * @returns {Object} PColumnBundleCollector object with methods to add and resolve references
 */
createBuilder := func(ctx) {
	// reference key -> anchor id or ref
	//   - if points to string resolution result can be taken from the anchor query
	//   - if points to object resolution should be done separately
	refs := {}
	// anchor id -> ref
	anchors := {}
	// query id -> query
	queries := {}

	anchoredQueryOpts := {
		ignoreMissingDomains: false
	}

	addSingleInner := func(id, ...ops) {
		ll.assert(len(ops) <= 2, "addSingle accepts at most two optional arguments")

		decodedId := undefined
		if is_string(id) {
			decodedId = json.decode(id)
		} else if is_map(id) {
			decodedId = id
		} else {
			ll.panic("Invalid column ID type. Expected string or object.")
		}

		queryKey := undefined
		if len(ops) > 0 {
			if !is_string(ops[0]) {
				ll.panic("Invalid queryKey type. Expected single string option, got ", ops[0])
			}
			queryKey = ops[0]
		}

		if len(ops) == 2 {
			if !is_map(ops[1]) {
				ll.panic("Invalid options type. Expected map got ", ops[1])
			}
			if !is_undefined(ops[1].overrides) {
				// override id
				decodedId = maps.deepMerge(decodedId, ops[1].overrides)
			}
		}

		queryOpts := undefined
		if len(ops) > 1 {
			queryOpts = ops[1]
		}

		isFiltered := is_map(decodedId) && !is_undefined(decodedId.source) && !is_undefined(decodedId.axisFilters)
		if isFiltered && !is_undefined(queryKey) {
			ll.panic("FilteredPColumnId cannot be used with a queryKey.")
		}

		defaultKey := undefined
		valueToStore := undefined
		if isFiltered {
			defaultKey = canonical.encode(decodedId.source)
			valueToStore = decodedId.source
		} else {
			// Use the original string ID if provided for the key, otherwise encode the map
			defaultKey = is_string(id) ? id : canonical.encode(decodedId)
			valueToStore = decodedId // Store the decoded map itself
		}

		keyToUse := defaultKey
		if !is_undefined(queryKey) {
			keyToUse = queryKey
		}

		queries[keyToUse] = valueToStore
	}

	addMultiInner := func(query, ...ops) {
		ll.assert(len(ops) <= 2, "addMulti accepts at most two optional arguments")

		decodedQuery := undefined
		if is_string(query) {
			decodedQuery = json.decode(query)
		} else if is_map(query) {
			decodedQuery = query
		} else {
			ll.panic("Invalid query type. Expected string or object.")
		}

		queryKey := undefined
		if len(ops) > 0 {
			if !is_string(ops[0]) {
				ll.panic("Invalid queryKey type. Expected single string option, got ", ops[0])
			}
			queryKey = ops[0]
		}

		if len(ops) == 2 {
			if !is_map(ops[1]) {
				ll.panic("Invalid options type. Expected map got ", ops[1])
			}
			if !is_undefined(ops[1].overrides) {
				// apply overrides
				decodedQuery = maps.deepMerge(decodedQuery, ops[1].overrides)
			}
		}

		// Default to expectMultiple match strategy for multi-column queries
		decodedQuery.matchStrategy = "expectMultiple"

		keyToUse := undefined
		if !is_undefined(queryKey) {
			keyToUse = queryKey
		} else {
			keyToUse = canonical.encode(query)
		}

		queries[keyToUse] = decodedQuery
	}

	self := undefined
	self = {
		/**
		 * Sets the option to ignore errors if referenced anchor domains are missing during resolution.
		 *
		 * @returns The PColumnBundleCollector object for chaining.
		 */
		ignoreMissingDomains: func() {
			anchoredQueryOpts.ignoreMissingDomains = true
			return self
		},

		/**
		 * Adds a reference to the bundle collector.
		 *
		 * @param ref: PlRef - The reference to the anchor
		 */
		addRef: func(ref) {
			refKey := canonical.encode(ref)

			// if ref points to string resolution result can be taken from the anchor
			if !is_string(refs[refKey]) {
				refs[refKey] = ref
			}

			return self
		},

		/**
		 * Adds an anchor to the bundle collector.
		 *
		 * @param anchorId: string - The ID of the anchor to add
		 * @param ref: string - The reference to the anchor
		 */
		addAnchor: func(anchorId, ref) {
			anchors[anchorId] = ref
			refKey := canonical.encode(ref)
			if is_undefined(refs[refKey]) || is_map(refs[refKey]) {
				refs[refKey] = anchorId
			} else {
				refs[refKey] = ref
			}

			return self
		},

		/**
		 * Adds a single PColumn to the bundle collector by its UniversalPColumnId or anchored or simple query expected to return exactly single PColumn.
		 *
		 * @param id: string or object - The ID of the PColumn
		 *   - string: A SUniversalPColumnId (canonically serialized UniversalPColumnId)
		 *   - object: Either a standard AnchoredPColumnId or a FilteredPColumnId with source and axisFilters
		 * @param queryKey: string (optional) - Override the key used to store and retrieve this query result.
		 *                                     Defaults to the canonical representation of the ID or its source for FilteredPColumnId.
		 */
		addSingle: func(id, ...queryKey) {
			addSingleInner(id, queryKey...)
			return self
		},

		/**
		 * (Deprecated: use addSingle) Adds a PColumn to the bundle collector by UniversalPColumnId.
		 * Kept for backward compatibility.
		 *
		 * @param id: string or object - The ID of the PColumn
		 */
		addById: func(id) {
			addSingleInner(id)
			return self
		},

		/**
		 * Adds a query to the bundle collector.
		 *
		 * @param query: AnchoredPColumnSelector - The query
		 * @param queryKey: string (optional) - The key to store and retrieve the query result.
		 *                                     Defaults to canonical.encode(query).
		 */
		addMulti: func(query, ...queryKey) {
			addMultiInner(query, queryKey...)
			return self
		},

		/**
		 * (Deprecated: use addMulti) Adds a query to the bundle collector.
		 * Kept for backward compatibility.
		 *
		 * @param queryKey: string - The ID of the query
		 * @param query: AnchoredPColumnSelector - The query
		 */
		addQuery: func(queryKey, query) {
			addMultiInner(query, queryKey)
			return self
		},

		/**
		 * Builds the bundle.
		 *
		 * @return PColumnBundle - The resolved bundle with all references and queries
		 */
		build: func() {
			// 'queries' now directly contains the correct items (IDs, query sources, or full queries)
			// ready to be passed to bquery.anchoredQuery.
			resolveResult := bquery.anchoredQuery(ctx, anchors, queries, anchoredQueryOpts)

			bundle := smart.mapBuilder(pConstants.RTYPE_P_COLUMN_BUNDLE)

			for refKey, ref in refs {
				if is_string(ref) { // ref is anchor id
					bundle.addRef(refKey, resolveResult.getAnchor(ref))
					bundle.addRef(ref, resolveResult.getAnchor(ref))
				} else {
					bundle.addRef(refKey, bquery.resolve(ref, ctx))
				}
			}

			for queryKey, query in queries {
				bundle.addRef(queryKey, resolveResult.getResult(queryKey))
			}

			return bundle.build()
		}
	}

	return self
}

/**
 * Creates an unmarshaller for PColumnBundle resources.
 *
 * The PColumnBundleUnmarshaller processes PColumnBundle resources into a structured
 * object that provides easy way to interact with the data in the pool.
 *
 * @returns Object that implements the unmarshaller interface {canParse, parse}
 */
pColumnBundleUnmarshaller := func() {
	// Process UniversalPColumnId inputs and return their components and canonical representation
	processColumnId := func(id) {
		columnKey := undefined
		columnAxisFilters := undefined
		serializedId := undefined

		if is_string(id) {
			serializedId = id
			decodedId := json.decode(id)

			if is_map(decodedId) && !is_undefined(decodedId.source) && !is_undefined(decodedId.axisFilters) {
				columnKey = canonical.encode(decodedId.source)
				columnAxisFilters = decodedId.axisFilters
			} else {
				columnKey = id
			}
		} else if is_map(id) {
			if !is_undefined(id.source) && !is_undefined(id.axisFilters) {
				columnKey = canonical.encode(id.source)
				columnAxisFilters = id.axisFilters
				serializedId = canonical.encode(id)
			} else {
				columnKey = canonical.encode(id)
				serializedId = columnKey
			}
		} else {
			ll.panic("Invalid column ID type. Expected string or object.")
		}

		return {
			columnKey: columnKey,
			axisFilters: columnAxisFilters,
			canonicalId: serializedId
		}
	}

	return {
		canParse: func(resource) {
			return smart.isResource(resource) &&
				resource.info().Type.Name == pConstants.RTYPE_P_COLUMN_BUNDLE.Name
		},

		parse: func(resource, parser) {
			bResultUnmarshaller := bquery.resultUnmarshaller()

			pool := {}

			for resultKey, value in resource.inputs() {
				if !bResultUnmarshaller.canParse(value.getValue()) {
					ll.panic("Failed to unmarshal value for key: " + resultKey)
				}

				result := bResultUnmarshaller.parse(value.getValue(), parser)

				if is_array(result) {
					arr := []
					for i, r in result {
						ll.assert(!is_undefined(r.ref), "Expected ref in result: %v", r)
						k := resultKey + "." + canonical.encode(r.ref)
						el := {
							key: k,
							spec: r.spec,
							data: r.data
						}
						pool[k] = el
						arr = append(arr, el)
					}
					pool[resultKey] = arr
				} else {
					pool[resultKey] = {
						key: resultKey,
						spec: result.spec,
						data: result.data
					}
				}
			}

			get := func(resultKey) {
				if !is_string(resultKey) {
					resultKey = canonical.encode(resultKey)
				}

				result := pool[resultKey]
				if is_undefined(result) {
					ll.panic("Column not found: %v. Pool: %v", resultKey, maps.getKeys(pool))
				}

				return result
			}

			bundle := undefined
			bundle = ll.toStrict({

				/**
				 * Gets a specific column or a list of columns (from addMulti) by its ID
				 * @param resultKey - The ID of the column(s) to retrieve
				 * @returns The column object with its spec, data or an array of column objects with their spec, data and key used to retrieve them from the bundle.
				 *          Each column object in the array has the structure: `{ key: string, spec: object, data: object }`.
				 */
				getColumns: func(resultKey) {
					result := get(resultKey)
					if !is_array(result) {
						ll.panic("Expected a multi-column result, got a single column: %v. User getColumn() instead.", resultKey)
					}
					return result
				},

				/**
				 * Gets a specific column by its ID
				 * @param resultKey - The ID of the column to retrieve
				 * @returns The column object with its spec, data.
				 *          The column object has the structure: `{ key: string, spec: object, data: object }`.
				 */
				getColumn: func(resultKey, ...options) {
					options = is_array(options) && is_map(options[0]) ? options[0] : {}
					processedId := processColumnId(resultKey)
					columnKeyForPool := processedId.columnKey // Key to fetch from the pool (source for filtered)
					columnAxisFilters := processedId.axisFilters // Filters from FilteredPColumnId
					outputKey := processedId.canonicalId // Key for the output, canonical of original input or filtered ID

					result := pool[columnKeyForPool]
					if is_undefined(result) {
						ll.panic("Column not found: %v. Pool: %v", columnKeyForPool, maps.getKeys(pool))
					}

					if is_array(result) {
						ll.panic("Cannot get a single column from a multi-column result: %v. Use getColumns() instead.", columnKeyForPool)
					}

					currentSpec := bundle.getSpec(resultKey, options) // getSpec already handles filtering for the spec
					currentData := result.data

					// If axis filters are present, slice the data
					if !is_undefined(columnAxisFilters) && len(columnAxisFilters) > 0 {
						sliceDataTemplate := assets.importTemplate(":pframes.slice-data")
						currentData = render.createEphemeral(sliceDataTemplate, {
							data: currentData,
							slicingParams: smart.createJsonResource(columnAxisFilters),
							keepColumns: options.keepColumns,
							ignoreUnknownAxes: options.ignoreUnknownAxes,
							ignoreNonPartitioned: options.ignoreNonPartitioned
						}).output("result")
					}

					return {
						key: outputKey,
						spec: currentSpec,
						data: currentData
					}
				},

				/**
				 * Gets the spec for a column, applying axis filters if the ID is a FilteredPColumnId.
				 * @param id - The ID of the column (string SUniversalPColumnId or UniversalPColumnId object)
				 *             If the ID is a FilteredPColumnId, its axisFilters will be applied.
				 * @param options - object (optional) - Options, can include:
				 *   - keepColumns: boolean (default: false) - If true, keeps the columns used in axis filters in the resulting spec.
				 * @returns The column spec object after applying filters.
				 */
				getSpec: func(id, ...options) {
					processedId := processColumnId(id)
					columnKey := processedId.columnKey
					columnAxisFilters := processedId.axisFilters // Filters from FilteredPColumnId

					options = is_array(options) && is_map(options[0]) ? options[0] : {}
					keepColumns := is_bool(options.keepColumns) ? options.keepColumns : false

					if is_undefined(pool[columnKey]) {
						ll.panic("Column not found in bundle: " + columnKey)
					}

					result := pool[columnKey]
					if is_array(result) {
						ll.panic("Cannot get a single column from a multi-column result: " + columnKey + ". Use get() instead.")
					}

					baseSpec := result.spec

					// If filters are present, prepare them and get the resulting spec
					if !keepColumns && !is_undefined(columnAxisFilters) && len(columnAxisFilters) > 0 {
						prepared := pSpec.prepareAxisFiltersAndAxesSpec(columnAxisFilters, baseSpec.axesSpec)
						clonedSpec := maps.clone(baseSpec)
						clonedSpec.axesSpec = prepared.axesSpec
						return clonedSpec
					} else {
						// Otherwise, return the base spec
						return baseSpec
					}
				},

				/**
				 * Gets all column keys available in the bundle.
				 * @returns An array of all column keys present in the bundle's pool.
				 */
				getColumnKeys: func() {
					return maps.getKeys(pool)
				},

				/**
				 * Gets all unique axes from columns in the bundle.
				 * Returns an array of unique AxisSpec objects, where uniqueness is determined by
				 * name, type, and domain keys.
				 * 
				 * @param columnIds - Optional array of column IDs to process. If not provided, all columns will be processed.
				 *                    Each ID can be a string (SUniversalPColumnId) or object (UniversalPColumnId).
				 * @returns Array of unique AxisSpec objects from the specified (or all) columns in the bundle
				 */
				getAxesSpec: func(...columnIds) {
					// Map to track unique axes by their canonical representation
					uniqueAxesMap := {}
					allAxes := []

					// Helper function to process axes from a single column spec
					processAxesSpec := func(spec) {
						if !is_undefined(spec) && !is_undefined(spec.axesSpec) {
							for axis in spec.axesSpec {
								axisKey := pSpec.getAxisId(axis)
								
								// Only add if we haven't seen this axis before
								if is_undefined(uniqueAxesMap[axisKey]) {
									uniqueAxesMap[axisKey] = true
									allAxes = append(allAxes, axis)
								}
							}
						}
					}

					// Helper function to process a pool result (single or multi-column)
					processResult := func(result) {
						if is_array(result) {
							// Handle multi-column results
							for _, col in result {
								processAxesSpec(col.spec)
							}
						} else {
							// Handle single column results
							processAxesSpec(result.spec)
						}
					}

					// If specific column IDs are provided, process only those
					if len(columnIds) > 0 {
						for id in columnIds {
							processedId := processColumnId(id)
							columnKey := processedId.columnKey

							result := pool[columnKey]
							if is_undefined(result) {
								ll.panic("Column not found: %v. Pool: %v", columnKey, maps.getKeys(pool))
							}
							
							processResult(result)
						}
					} else {
						// Process all columns in the pool
						for result in pool {
							processResult(result)
						}
					}

					return allAxes
				}
			})

			return bundle
		}
	}
}

export ll.toStrict({
	createBuilder: createBuilder,
	pColumnBundleUnmarshaller: pColumnBundleUnmarshaller
})
