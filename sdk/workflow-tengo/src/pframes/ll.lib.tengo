/**
 * Set of basic operations for PColumn data payload
 */

ll := import(":ll")
assets := import(":assets")
smart := import(":smart")
render := import(":render")

llProcessTpl := assets.importTemplate(":pframes.process-pcolumn-data")

/**
 * Instantiates an aggregation pipeline for the given inputs and returns rendered ephemeral template.
 * Use result.output("outputName") to get corresponding output, where result is the object returned by
 * this method.
 *
 * Contract for the body template:
 *   Inputs:
 *     "__key__": string     - JSON representation of the group key (i.e. keys in all positions not
 *                             specified in the indices parameter). Only provided if passKey is true.
 *     "__value__": Resource - PColumnData/ResourceMap resource containing all records in current group
 *     ...extra              - Additional values/references passed via the extra parameter are forwarded
 *                             to the template unchanged
 *
 * @param data: Resource                - Data resource (currently only PColumnData/ResourceMap supported)
 * @param aggregationIndices: number[]|undefined
 *                                      - Indices to aggregate over. These indices will be stripped from
 *                                       the input map (opposite of SQL GROUP BY). If undefined, works as
 *                                       "map" and passes each input value as raw resource.
 * @param bodyTpl: Template            - Template implementing the aggregation logic
 * @param outputs: OutputSpec[]        - Array of output specifications to collect from rendered templates
 *                                      Common fields for all output types:
 *                                        {
 *                                          name: string      - Name of the output
 *                                          path?: string[]   - Optional. Overrides path inside body template
 *                                                             result. First element is output name. Defaults
 *                                                             to [name] if not specified.
 *                                        }
 *                                      Output type variants:
 *                                        | { type: "Resource" }  - Normal singular resource
 *                                        | {                     - ResourceMap output
 *                                            type: "ResourceMap",
 *                                            keyLength: number   - Expected key length per operation
 *                                          }
 *                                        | {                     - Partitioned data output
 *                                            type: "BinaryPartitioned"|"JsonPartitioned",
 *                                            partitionKeyLength: number - Expected partition length per op
 *                                          }
 *                                        | {                     - CSV/TSV text file output
 *                                            type: "Xsv",
 *                                            xsvType: "tsv"|"csv",
 *                                            flatten: boolean,   - If true, adds columns one by one with
 *                                                                 "{outputName}/{columnId}" keys
 *                                            settings: object    - Xsv conversion specification
 *                                          }
 * @param isEph: boolean               - If true, body template will be rendered as ephemeral
 * @param passKey: boolean             - If true, body template will receive __key__ input
 * @param extra: object                - Optional map of parameters to pass to the template
 *
 * @returns RenderResult              - Rendered template result with output() method for accessing outputs
 * @panics                           - If extra parameter count is invalid
 */
aggregateV2 := func(data, aggregationIndices, bodyTpl, outputs, isEph, passKey, ...extra) {
	renderInputs := {
		params: smart.createJsonResource({
			aggregationIndices: aggregationIndices,
			eph: isEph,
			outputs: outputs,
			passKey: passKey
		}),
		body: bodyTpl,
		data: data
	}

	if len(extra) == 1 {
		for k, v in extra[0] {
			renderInputs["__extra_" + k] = v
		}
	} else if len(extra) != 0 {
		ll.panic("Wrong number of parameters for aggregate method.")
	}

	renderResult := render.createEphemeral(llProcessTpl, renderInputs)
	return renderResult
}

/*
 * Read docs for aggregateV2
 */
aggregate := func(data, aggregationIndices, bodyTpl, outputs, isEph, ...extra) {
	return aggregateV2(data, aggregationIndices, bodyTpl, outputs, isEph, true, extra...)
}

export ll.toStrict({
	aggregate: aggregate,
	aggregateV2: aggregateV2
})
