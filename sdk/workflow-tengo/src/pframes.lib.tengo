/** 
* Working with p-frames
*/

render := import(":render")
smart := import(":smart")
exec := import(":exec")
json := import("json")
ll := import(":ll")

readDirTpl := ll.importTemplate(":pframes.read-dir")
readXsvMapTpl := ll.importTemplate(":pframes.read-xsv-map")

readXsv := func(xsvFile, xsvType, params) {
    ll.assert(xsvType == "csv" || xsvType == "tsv", "expected one of [tsv, csv] types")
    
    // @TODO: validate params

    xsvFileName := "file." + xsvType

    // convert csv to p-frame and read resulting data
	pf := exec.builder().
                cmd("pfconv").	
				arg("importCsv").
				arg(xsvFileName).
				arg("-p").arg("params.json").
				arg("-o").arg("out").
				addFile(xsvFileName, xsvFile).
				writeFile("params.json", json.encode(params)).
				processWorkdir("pf", ll.importTemplate(":pframes.read-dir"), params).
                run()

    return pf.getProcessorResult("pf")
}

readXsvMap := func(xsvMap, xsvType, params) {
    r := render.createEphemeral(readXsvMapTpl, {
                xsvMap: xsvMap,
                xsvType: xsvType,
                params: params
            })

    result := {}
    for c in params.columns {
        result[c.name] = r.output(c.name)
    }

    return result
}

export ll.toStrict({
    readXsv: readXsv,
    readXsvMap: readXsvMap
})