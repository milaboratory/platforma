/*
 * Library provides development kit for ephemeral templates
 */
tx := import("tx")
ll := import(":ll")
text := import("text")

constants := import(":constants")
smart := import(":smart")
maps := import(":maps")

//
// Initialization
//

// Checking we were imported in compatible render template context
renderer := smart.Resource(ll.getCurrentTemplateRenderer())
if renderer.info().Type.Name != "EphRenderTemplate" {
	ll.panic("expected ephemeral render template got pure")
}

//
// Internal function helpers
//

initOutputsList := func() {
	outputsList := ll.toStrict(renderer.outputs())
	trimOutputsPrefix := func(outputName) {
		return text.trim_prefix(constants.TEMPLATE_OUTPUT_PREFIX, outputName)
	}

	return maps.mapKeys(outputsList, trimOutputsPrefix)
}

//
// Definitions and exports
//

_outputs := initOutputsList()
_inputs := undefined

inputs := func() {
	if _inputs == undefined {
		_inputs = ll.toStrict(renderer.get("inputs").inputs())
	}
	return _inputs
}

outputs := func() {
	return _outputs
}

newOutput := func(name) {
    field := renderer.createField(constants.TEMPLATE_OUTPUT_PREFIX + name, "output")
	_outputs[name] = field

    return field
}

/**
 * Defines main entry point for current template
 */
body := func(bodyFn) {
    if renderer.info().AllInputsSet {
		inputMap := renderer.inputs().get("input")
		if inputMap.AllInputsSet {
			bodyFn()
			renderer.lockOutputs()
		} else {
			tx.subscribeTo(inputMap.ID, "InputMapAllInputsSet", {"AllInputsSet": true})
		}
	} else if ll.isInitializing() {
		tx.subscribeTo(renderer.id, "MainAllInputsSet", {"AllInputsSet": true})
	}
}

export ll.toStrict({
	renderer: renderer,
	body: body,
	inputs: inputs,
	outputs: outputs,
	newOutput: newOutput
})
