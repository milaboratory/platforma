!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!tengo	c,constant	/constant/
!_TAG_KIND_DESCRIPTION!tengo	f,function	/function/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!tengo	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/denkoren/work/milaboratory/platforma/tengo/tengo-sdk/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	//
* @param cb	./src/workdir/proc.lib.tengo	/^		 * @param cb: func - a callback function to run in template body; the inputs passed to the bod/;"	f
* @param fn	./src/sets.lib.tengo	/^ * @param fn: func(elem): newElem - a function that gets an element and returns a new element.$/;"	f
* @param fn	./src/slices.lib.tengo	/^ * @param fn: func(any, element): new result.$/;"	f
* @param fn	./src/slices.lib.tengo	/^ * @param fn: func(elem): int - a function that transforms an element to a key.$/;"	f
* @param fn	./src/slices.lib.tengo	/^ * @param fn: func(elem): new elem - a function that gets an element and returns a transformed e/;"	f
* @param fnK	./src/maps.lib.tengo	/^ * @param fnK: func(key): newKey - a function that gets a key and returns a new key.$/;"	f
* @param predicateFn	./src/slices.lib.tengo	/^ * @param predicateFn: func(elem): bool - a function that gets an element and returns a truthy o/;"	f
INPUTS_MAP_FIELD	./src/tpl/util.lib.tengo	/^INPUTS_MAP_FIELD := "inputs"$/;"	c
KEY_FIELD_NAME	./src/pframes/constants.lib.tengo	/^KEY_FIELD_NAME := "__key__"$/;"	c
KIND_P_COLUMN	./src/pframes/constants.lib.tengo	/^KIND_P_COLUMN := "PColumn"$/;"	c
NO_PREFIX_EXPORT	./src/workflow/constants.lib.tengo	/^NO_PREFIX_EXPORT := "_"$/;"	c
PREPARE_MAP_FIELD_NAME	./src/tpl/util.lib.tengo	/^PREPARE_MAP_FIELD_NAME := "__prepare__"$/;"	c
P_COLUMN_DATA_TYPE_PREFIX	./src/pframes/constants.lib.tengo	/^P_COLUMN_DATA_TYPE_PREFIX := "PColumnData\/"$/;"	c
RTYPE_BINARY_MAP	./src/constants.lib.tengo	/^RTYPE_BINARY_MAP          := { Name: "BinaryMap",         Version: "1" }$/;"	c
RTYPE_BINARY_VALUE	./src/constants.lib.tengo	/^RTYPE_BINARY_VALUE        := { Name: "BinaryValue",       Version: "1" }$/;"	c
RTYPE_BLOB_MAP	./src/constants.lib.tengo	/^RTYPE_BLOB_MAP            := { Name: "BlobMap",           Version: "1" }$/;"	c
RTYPE_BOBJECT_SPEC	./src/constants.lib.tengo	/^RTYPE_BOBJECT_SPEC        := { Name: "BObjectSpec",       Version: "1" }$/;"	c
RTYPE_BRESOLVE_CHOICE	./src/constants.lib.tengo	/^RTYPE_BRESOLVE_CHOICE     := { Name: "BResolveChoice",    Version: "1" }$/;"	c
RTYPE_BRESOLVE_FIRST	./src/constants.lib.tengo	/^RTYPE_BRESOLVE_FIRST      := { Name: "BResolveSingle",    Version: "1" }$/;"	c
RTYPE_BRESOLVE_NO_RESULT	./src/constants.lib.tengo	/^RTYPE_BRESOLVE_NO_RESULT  := { Name: "BResolveSingleNoResult", Version: "1" }$/;"	c
RTYPE_CONTEXT	./src/constants.lib.tengo	/^RTYPE_CONTEXT             := { Name: "BContext",          Version: "1" }$/;"	c
RTYPE_CONTEXT_END	./src/constants.lib.tengo	/^RTYPE_CONTEXT_END         := { Name: "BContextEnd",       Version: "1" }$/;"	c
RTYPE_JSON	./src/constants.lib.tengo	/^RTYPE_JSON                := { Name: "json\/object",       Version: "1" }$/;"	c
RTYPE_MAP	./src/constants.lib.tengo	/^RTYPE_MAP                 := { Name: "std\/map",           Version: "1" }$/;"	c
RTYPE_MAP_ALT	./src/constants.lib.tengo	/^RTYPE_MAP_ALT             := { Name: "StdMap",            Version: "1" }$/;"	c
RTYPE_MAP_EPH	./src/constants.lib.tengo	/^RTYPE_MAP_EPH             := { Name: "EphStdMap",         Version: "1" }$/;"	c
RTYPE_P_COLUMN_DATA_BINARY	./src/pframes/constants.lib.tengo	/^RTYPE_P_COLUMN_DATA_BINARY := { Name: P_COLUMN_DATA_TYPE_PREFIX + "Binary", Version: "1" }$/;"	c
RTYPE_P_COLUMN_DATA_BINARY_PARTITIONED	./src/pframes/constants.lib.tengo	/^RTYPE_P_COLUMN_DATA_BINARY_PARTITIONED := { Name: P_COLUMN_DATA_TYPE_PREFIX + "BinaryPartitioned/;"	c
RTYPE_P_COLUMN_DATA_BINARY_SUPER_PARTITIONED	./src/pframes/constants.lib.tengo	/^RTYPE_P_COLUMN_DATA_BINARY_SUPER_PARTITIONED := { Name: P_COLUMN_SUPER_PARTITIONED_DATA_TYPE_PRE/;"	c
RTYPE_P_COLUMN_DATA_JSON	./src/pframes/constants.lib.tengo	/^RTYPE_P_COLUMN_DATA_JSON := { Name: P_COLUMN_DATA_TYPE_PREFIX + "Json", Version: "1" }$/;"	c
RTYPE_P_COLUMN_DATA_JSON_PARTITIONED	./src/pframes/constants.lib.tengo	/^RTYPE_P_COLUMN_DATA_JSON_PARTITIONED := { Name: P_COLUMN_DATA_TYPE_PREFIX + "JsonPartitioned", V/;"	c
RTYPE_P_COLUMN_DATA_JSON_SUPER_PARTITIONED	./src/pframes/constants.lib.tengo	/^RTYPE_P_COLUMN_DATA_JSON_SUPER_PARTITIONED := { Name: P_COLUMN_SUPER_PARTITIONED_DATA_TYPE_PREFI/;"	c
RTYPE_P_COLUMN_DATA_RESOURCE_MAP	./src/pframes/constants.lib.tengo	/^RTYPE_P_COLUMN_DATA_RESOURCE_MAP := { Name: P_COLUMN_DATA_TYPE_PREFIX + "ResourceMap", Version: /;"	c
RTYPE_P_COLUMN_DATA_RESOURCE_MAP_PARTITIONED	./src/pframes/constants.lib.tengo	/^RTYPE_P_COLUMN_DATA_RESOURCE_MAP_PARTITIONED := { Name: P_COLUMN_DATA_TYPE_PREFIX + "Partitioned/;"	c
RTYPE_QUERY_RESULT	./src/constants.lib.tengo	/^RTYPE_QUERY_RESULT        := { Name: "BQueryResult",      Version: "1" }$/;"	c
RTYPE_RENDER_EPH_TEMPLATE	./src/constants.lib.tengo	/^RTYPE_RENDER_EPH_TEMPLATE := { Name: "EphRenderTemplate", Version: "1" }$/;"	c
RTYPE_RENDER_TEMPLATE	./src/constants.lib.tengo	/^RTYPE_RENDER_TEMPLATE     := { Name: "RenderTemplate",    Version: "1" }$/;"	c
RTYPE_WORKDIR_CREATE	./src/constants.lib.tengo	/^RTYPE_WORKDIR_CREATE      := { Name: "WorkdirCreate",     Version: "1" }$/;"	c
RTYPE_WORKDIR_FILL	./src/constants.lib.tengo	/^RTYPE_WORKDIR_FILL        := { Name: "WorkdirFill",       Version: "1" }$/;"	c
RTYPE_WORKDIR_FILL_RULES	./src/constants.lib.tengo	/^RTYPE_WORKDIR_FILL_RULES  := { Name: "WorkdirFill\/rules", Version: "1" }$/;"	c
RTYPE_WORKDIR_SAVE	./src/constants.lib.tengo	/^RTYPE_WORKDIR_SAVE        := { Name: "WorkdirSave",       Version: "1" }$/;"	c
RTYPE_WORKDIR_SAVE_RULES	./src/constants.lib.tengo	/^RTYPE_WORKDIR_SAVE_RULES  := { Name: "WorkdirSave\/rules", Version: "1" }$/;"	c
TEMPLATE_FIELD	./src/tpl/util.lib.tengo	/^TEMPLATE_FIELD := "template"$/;"	c
TEMPLATE_OUTPUT_PREFIX	./src/tpl/util.lib.tengo	/^TEMPLATE_OUTPUT_PREFIX := "outputs\/"$/;"	c
TestGetBasenameDirs	./src/path.test.tengo	/^TestGetBasenameDirs := func() {$/;"	f
TestGetExtension	./src/path.test.tengo	/^TestGetExtension := func() {$/;"	f
TestMiLength	./src/slices.test.tengo	/^TestMiLength := func() {$/;"	f
TestMiSliceAppend	./src/slices.test.tengo	/^TestMiSliceAppend := func() {$/;"	f
TestSplit	./src/path.test.tengo	/^TestSplit := func() {$/;"	f
TestValidateJSONGeneral	./src/validation.test.tengo	/^TestValidateJSONGeneral := func() {$/;"	f
TestValidateJSONOrArrays	./src/validation.test.tengo	/^TestValidateJSONOrArrays := func() {$/;"	f
VALUE_FIELD_NAME	./src/pframes/constants.lib.tengo	/^VALUE_FIELD_NAME := "__value__"$/;"	c
_BLOCK_ID_FIELD	./src/workflow/context.lib.tengo	/^_BLOCK_ID_FIELD := "id"$/;"	c
_CONTEXT_FIELD_NAME	./src/workflow/bquery.lib.tengo	/^_CONTEXT_FIELD_NAME := "ctx"$/;"	c
_DEFAULT_OPTIONS	./src/workflow/bquery.lib.tengo	/^_DEFAULT_OPTIONS := {$/;"	c
_EXPORTS_OUTPUT_PREFIX	./src/workflow/context.lib.tengo	/^_EXPORTS_OUTPUT_PREFIX := "values\/"$/;"	c
_HEAVY_QUEUE	./src/exec/index.lib.tengo	/^_HEAVY_QUEUE := "heavy"$/;"	c
_INPUT_CONTEXT_FIELD_NAME	./src/workflow/index.lib.tengo	/^_INPUT_CONTEXT_FIELD_NAME := "context"$/;"	c
_OPTIONS_SCHEME	./src/workflow/bquery.lib.tengo	/^_OPTIONS_SCHEME := {$/;"	c
_OUTPUT_CONTEXT_FIELD_NAME	./src/workflow/index.lib.tengo	/^_OUTPUT_CONTEXT_FIELD_NAME := "context"$/;"	c
_PARENT_CTX_FIELD	./src/workflow/context.lib.tengo	/^_PARENT_CTX_FIELD := "parent"$/;"	c
_PREPARED_INPUTS_PREFIX	./src/workflow/index.lib.tengo	/^_PREPARED_INPUTS_PREFIX := "prepared\/"$/;"	c
_PROGRESS_FIELD	./src/workdir/save.lib.tengo	/^_PROGRESS_FIELD := "progress"$/;"	c
_RESULTS_FIELD_NAME	./src/workflow/index.lib.tengo	/^_RESULTS_FIELD_NAME := "result"$/;"	c
_RTYPE_BLOB_DOWNLOAD	./src/file.lib.tengo	/^_RTYPE_BLOB_DOWNLOAD := { Name: "BlobDownload", Version: "2" }$/;"	c
_RTYPE_BLOB_IMPORT_INTERNAL	./src/file.lib.tengo	/^_RTYPE_BLOB_IMPORT_INTERNAL := { Name: "BlobImportInternal", Version: "1" }$/;"	c
_RTYPE_BLOB_UPLOAD	./src/file.lib.tengo	/^_RTYPE_BLOB_UPLOAD := { Name: "BlobUpload", Version: "1" }$/;"	c
_RTYPE_CREATE_STREAM	./src/exec/stream.lib.tengo	/^_RTYPE_CREATE_STREAM := { Name: "CreateStream", Version: "2" }$/;"	c
_RTYPE_RUN_COMMAND	./src/exec/runcmd.lib.tengo	/^_RTYPE_RUN_COMMAND := { Name: "RunCommand", Version: "1" }$/;"	c
_RTYPE_RUN_COMMAND_ARGS	./src/exec/runcmd.lib.tengo	/^_RTYPE_RUN_COMMAND_ARGS := { Name: "RunCommandArgs", Version: "1" }$/;"	c
_RTYPE_RUN_COMMAND_CMD	./src/exec/runcmd.lib.tengo	/^_RTYPE_RUN_COMMAND_CMD := { Name: "RunCommandCmd", Version: "1" }$/;"	c
_RTYPE_RUN_COMMAND_OPTIONS	./src/exec/runcmd.lib.tengo	/^_RTYPE_RUN_COMMAND_OPTIONS := { Name: "run-command\/options", Version: "1" }$/;"	c
_RTYPE_RUN_COMMAND_REFS	./src/exec/runcmd.lib.tengo	/^_RTYPE_RUN_COMMAND_REFS := { Name: "RunCommandRefs", Version: "1" }$/;"	c
_RTYPE_STREAM_MANAGER	./src/exec/stream.lib.tengo	/^_RTYPE_STREAM_MANAGER := { Name: "StreamManager", Version: "2" }$/;"	c
_RTYPE_TEST_EPH	./src/test/kv/kv.tpl.tengo	/^_RTYPE_TEST_EPH := { Name: "TestEph", Version: "1" }$/;"	c
_RULES_FIELD	./src/workdir/save.lib.tengo	/^_RULES_FIELD := "rules"$/;"	c
_SAVED_CONTENT_FIELD	./src/workdir/save.lib.tengo	/^_SAVED_CONTENT_FIELD := "dataOut"$/;"	c
_SAVED_FILES_FIELD	./src/workdir/save.lib.tengo	/^_SAVED_FILES_FIELD := "blobsOut"$/;"	c
_SPEC_AXES_SCHEMA	./src/pframes/xsv.lib.tengo	/^_SPEC_AXES_SCHEMA := {$/;"	c
_SPEC_COLUMN_SCHEMA	./src/pframes/xsv.lib.tengo	/^_SPEC_COLUMN_SCHEMA := {$/;"	c
_SPEC_INDEX_SCHEMA	./src/pframes/xsv.lib.tengo	/^_SPEC_INDEX_SCHEMA := {$/;"	c
_SPEC_SCHEMA	./src/pframes/xsv.lib.tengo	/^_SPEC_SCHEMA := {$/;"	c
_SUBSCRIPTION_FIELD	./src/render.lib.tengo	/^_SUBSCRIPTION_FIELD := "subscription"$/;"	c
_UI_TASKS_QUEUE	./src/exec/index.lib.tengo	/^_UI_TASKS_QUEUE := "ui-tasks"$/;"	c
_WORKDIR_AFTER_FIELD	./src/workdir/save.lib.tengo	/^_WORKDIR_AFTER_FIELD := "workdirOut"$/;"	c
_WORKDIR_IN_FIELD	./src/workdir/save.lib.tengo	/^_WORKDIR_IN_FIELD := "workdirIn"$/;"	c
_addDirs	./src/workdir/index.lib.tengo	/^		_addDirs: func(fileName) {$/;"	f
_argToExec	./src/exec/index.lib.tengo	/^_argToExec := func(arg, isExec, pathToBinary) {$/;"	f
_buildOutputs	./src/workflow/index.lib.tengo	/^_buildOutputs := func(results) {$/;"	f
_create	./src/exec/stream.lib.tengo	/^_create := func(workdir, filePath) {$/;"	f
_create	./src/workdir/index.lib.tengo	/^_create := func() {$/;"	f
_createExecutableArg	./src/exec/runcmd.lib.tengo	/^_createExecutableArg := func(executableName, pathToBinary) {$/;"	f
_createSimpleArg	./src/exec/runcmd.lib.tengo	/^_createSimpleArg := func(argument) {$/;"	f
_fill	./src/workdir/index.lib.tengo	/^_fill := func(workdir) {$/;"	f
_formatKeyPath	./src/validation.lib.tengo	/^_formatKeyPath := func(current, format, key) {$/;"	f
_getAllDirs	./src/workdir/index.lib.tengo	/^		_getAllDirs: func(fileName) {$/;"	f
_getDirFillRule	./src/workdir/index.lib.tengo	/^_getDirFillRule := func(dir) {$/;"	f
_getFileFillRule	./src/workdir/index.lib.tengo	/^_getFileFillRule := func(filePath, extension) {$/;"	f
_getFutureField	./src/smart.lib.tengo	/^_getFutureField := func(from, name, fieldType) {$/;"	f
_getPColumnRType	./src/pframes/import-dir.tpl.tengo	/^_getPColumnRType := func(storageType) {$/;"	f
_getPColumnRtype	./src/pframes/import-xsv-map.tpl.tengo	/^_getPColumnRtype := func(supKeyLen, keyLen, storageFormat) {$/;"	f
_getValueFillRule	./src/workdir/index.lib.tengo	/^_getValueFillRule := func(filePath) {$/;"	f
_hasField	./src/smart.lib.tengo	/^		_hasField: func(fieldMapName, fieldName) {$/;"	f
_hasReferenceValues	./src/smart.lib.tengo	/^_hasReferenceValues := func(object) {$/;"	f
_isProduction	./src/workflow/index.lib.tengo	/^_isProduction := func() {$/;"	f
_isStaging	./src/workflow/index.lib.tengo	/^_isStaging := func() {$/;"	f
_manager	./src/exec/stream.lib.tengo	/^_manager := func(stream, downloadableRef) {$/;"	f
_mapBuilder	./src/smart.lib.tengo	/^_mapBuilder := func(isEph) {$/;"	f
_pObjectSpecSchema	./src/workflow/bobject.lib.tengo	/^_pObjectSpecSchema := {$/;"	c
_parentContext	./src/workflow/index.lib.tengo	/^_parentContext := func() {$/;"	f
_parseTags	./src/validation.lib.tengo	/^_parseTags := func(rule) {$/;"	f
_sepOrDefault	./src/path.lib.tengo	/^_sepOrDefault := func(...sep) {$/;"	f
_toRefOrJson	./src/smart.lib.tengo	/^_toRefOrJson := func(object) {$/;"	f
_unmarshal	./src/tpl/index.lib.tengo	/^_unmarshal := func(resource, preprocessors) {$/;"	f
_validateInputs	./src/tpl/index.lib.tengo	/^		_validateInputs: func() {$/;"	f
_validateJson	./src/validation.lib.tengo	/^_validateJson := func(js, schema, keyPath, ...stack) {$/;"	f
_validateTypes	./src/validation.lib.tengo	/^_validateTypes := func(js, tags, keyPath, ...stack) {$/;"	f
add	./src/sets.lib.tengo	/^add := func(set, ...elements) {$/;"	f
add	./src/smart.lib.tengo	/^		add: func(key, value) {$/;"	f
add	./src/workflow/context.lib.tengo	/^		add: func(name, value) {$/;"	f
addFile	./src/exec/index.lib.tengo	/^		addFile: func(fileName, file) {$/;"	f
addFile	./src/workdir/index.lib.tengo	/^		addFile: func(fileName, fileResource) {$/;"	f
addFiles	./src/exec/index.lib.tengo	/^		addFiles: func(filesMap) {$/;"	f
addFiles	./src/workdir/index.lib.tengo	/^		addFiles: func(fileMap) {$/;"	f
addJson	./src/smart.lib.tengo	/^		addJson: func(key, value) {$/;"	f
addRef	./src/smart.lib.tengo	/^		addRef: func(key, value) {$/;"	f
addSubscription	./src/tpl/state-await.lib.tengo	/^	addSubscription := func(subscription) {$/;"	f
aggregate	./src/pframes/ll.lib.tengo	/^aggregate := func(data, indices, bodyTpl, outputs, isEph, ...extra) {$/;"	f
arg	./src/exec/index.lib.tengo	/^		arg: func(arg) {$/;"	f
arg	./src/exec/runcmd.lib.tengo	/^		arg: func(arg) {$/;"	f
argExecutable	./src/exec/runcmd.lib.tengo	/^		argExecutable: func(arg, pathToBinary) {$/;"	f
args	./src/workflow/index.lib.tengo	/^args := func() {$/;"	f
assert	./src/ll.lib.tengo	/^assert := func(condition, msg, ...args) {$/;"	f
assert	./src/path.test.tengo	/^assert := func(got, want) {$/;"	f
assert	./src/slices.test.tengo	/^assert := func(got, want, ...msg) {$/;"	f
assert	./src/validation.test.tengo	/^assert := func(got, want, ...msg) {$/;"	f
assertEntrypointNotSet	./src/exec/index.lib.tengo	/^	assertEntrypointNotSet := func() {$/;"	f
assertIsValid	./src/path.lib.tengo	/^assertIsValid := func(path) {$/;"	f
assertJsonSchema	./src/validation.lib.tengo	/^assertJsonSchema := func(js, schema) {$/;"	f
assertNotBuilt	./src/smart.lib.tengo	/^	assertNotBuilt := func() {$/;"	f
await	./src/tpl/state-await.lib.tengo	/^await := func(rootField, ctxStorageResource, requests) {$/;"	f
awaitOneState	./src/tpl/state-await.lib.tengo	/^awaitOneState := func(field, path, state) {$/;"	f
awaitState	./src/tpl/index.lib.tengo	/^		awaitState: func(...pathAndState) {$/;"	f
blockId	./src/workflow/index.lib.tengo	/^blockId := func() {$/;"	f
body	./src/tpl/index.lib.tengo	/^		body: func(bodyFn){$/;"	f
body	./src/workdir/proc.lib.tengo	/^		body: func(cb) {$/;"	f
body	./src/workflow/index.lib.tengo	/^body := func(bodyFn) {$/;"	f
build	./src/exec/runcmd.lib.tengo	/^		build: func() {$/;"	f
build	./src/smart.lib.tengo	/^		build: func() {$/;"	f
build	./src/workdir/index.lib.tengo	/^		build: func() {$/;"	f
build	./src/workdir/save.lib.tengo	/^		build: func() {$/;"	f
build	./src/workflow/context.lib.tengo	/^		build: func() {$/;"	f
buildUnlocked	./src/smart.lib.tengo	/^		buildUnlocked: func() {$/;"	f
builder	./src/exec/index.lib.tengo	/^builder := func() {$/;"	f
builder	./src/exec/runcmd.lib.tengo	/^builder := func(workdir) {$/;"	f
builder	./src/workdir/index.lib.tengo	/^builder := func() {$/;"	f
builder	./src/workdir/save.lib.tengo	/^builder := func(wdBefore) {$/;"	f
builder	./src/workflow/context.lib.tengo	/^builder := func(block, parentContext) {$/;"	f
cRules	./src/workdir/save.lib.tengo	/^	cRules := {}$/;"	c
cache	./src/exec/index.lib.tengo	/^		cache: func(time) {$/;"	f
canParse	./src/workflow/bquery.lib.tengo	/^		canParse: func(r) {$/;"	f
canonize	./src/path.lib.tengo	/^canonize := func(...elems) {$/;"	f
check	./src/validation.lib.tengo	/^check := func(condition, keyPath, msg, ...args) {$/;"	f
checkJson	./src/validation.lib.tengo	/^checkJson := func(js, schema) {$/;"	f
checkResourceType	./src/smart.lib.tengo	/^		checkResourceType: func(expectedType) {$/;"	f
checker	./src/validation.lib.tengo	/^	checker := func(elem, keyPath, stack) {$/;"	f
cmd	./src/exec/index.lib.tengo	/^		cmd: func(commandName) {$/;"	f
cmd	./src/exec/runcmd.lib.tengo	/^		cmd: func(commandName) {$/;"	f
cmdExecutable	./src/exec/runcmd.lib.tengo	/^		cmdExecutable: func(commandName, pathToBinary) {$/;"	f
columns	./src/pframes/export-pframe.tpl.tengo	/^	columns := {}$/;"	c
containsKey	./src/maps.lib.tengo	/^containsKey := func(map, key) {$/;"	f
create	./src/exec/stream.lib.tengo	/^create := func(workdirBefore, workdirAfter, filePath) {$/;"	f
create	./src/render.lib.tengo	/^create := func(tplId, inputs) {$/;"	f
create	./src/workflow/bquery.lib.tengo	/^create := func(spec, ctx, ...options) {$/;"	f
createBinaryMapResource	./src/smart.lib.tengo	/^createBinaryMapResource = func(keyToValue) {$/;"	f
createBlobImportInternal	./src/file.lib.tengo	/^createBlobImportInternal := func(settings) {$/;"	f
createBlobMapResource	./src/smart.lib.tengo	/^createBlobMapResource = func(keyToValue) {$/;"	f
createBlobUpload	./src/file.lib.tengo	/^createBlobUpload := func(settings) {$/;"	f
createContext	./src/tpl/state-await.lib.tengo	/^createContext := func() {$/;"	f
createEphemeral	./src/render.lib.tengo	/^createEphemeral := func(tplId, inputs) {$/;"	f
createField	./src/smart.lib.tengo	/^		createField: func(name, fieldType) {$/;"	f
createInputField	./src/smart.lib.tengo	/^		createInputField: func(name) {$/;"	f
createJsonResource	./src/smart.lib.tengo	/^createJsonResource = func(value) {$/;"	f
createMapResource	./src/smart.lib.tengo	/^createMapResource = func(keyToValue) {$/;"	f
createMapResourceWithType	./src/smart.lib.tengo	/^createMapResourceWithType := func(resourceType, keyToValue) {$/;"	f
createOutputField	./src/smart.lib.tengo	/^		createOutputField: func(name) {$/;"	f
createOutputsAndLock	./src/tpl/index.lib.tengo	/^		createOutputsAndLock: func(outputs) {$/;"	f
createSpec	./src/workflow/bobject.lib.tengo	/^createSpec := func(spec) {$/;"	f
createUniversal	./src/render.lib.tengo	/^createUniversal := func(tplId, isEph, inputs) {$/;"	f
createValueResource	./src/smart.lib.tengo	/^createValueResource = func(resourceType, data) {$/;"	f
dInfo	./src/pframes/import-dir.tpl.tengo	/^	dInfo := {}$/;"	c
defineOutputs	./src/tpl/index.lib.tengo	/^		defineOutputs : func(...name) {$/;"	f
deleteUndefined	./src/objects.lib.tengo	/^deleteUndefined := func(obj) {$/;"	f
dirs	./src/workdir/index.lib.tengo	/^	dirs := {}$/;"	c
dirsToCreate	./src/exec/index.lib.tengo	/^	dirsToCreate := {}$/;"	c
e	./src/tpl/state-await.lib.tengo	/^		e := {}$/;"	c
eData	./src/workflow/index.lib.tengo	/^	eData := {}$/;"	c
ensureNonStrict	./src/ll.lib.tengo	/^ensureNonStrict := func(r) {$/;"	f
env	./src/exec/index.lib.tengo	/^		env: func(name, value) {$/;"	f
env	./src/exec/runcmd.lib.tengo	/^		env: func(name, value) {$/;"	f
envMap	./src/exec/index.lib.tengo	/^		envMap: func(envMap) {$/;"	f
envs	./src/exec/index.lib.tengo	/^	envs := {}$/;"	c
envs	./src/exec/runcmd.lib.tengo	/^	envs := {}$/;"	c
ephemeralBuilder	./src/smart.lib.tengo	/^ephemeralBuilder = func(resourceType, ...data) {$/;"	f
ephemeralMapBuilder	./src/smart.lib.tengo	/^ephemeralMapBuilder = func() {$/;"	f
execRefs	./src/exec/runcmd.lib.tengo	/^	execRefs := {}$/;"	c
exportFile	./src/file.lib.tengo	/^exportFile := func(blob) {$/;"	f
exportFrame	./src/pframes/index.lib.tengo	/^exportFrame := func(pf) {$/;"	f
exportPColumnData	./src/pframes/export-pcolumn.lib.tengo	/^exportPColumnData := func(data) {$/;"	f
exports	./src/workflow/test/exports.wf1.tpl.tengo	/^	exports := {}$/;"	c
ext	./src/path.lib.tengo	/^	ext := ""$/;"	c
extraInputs	./src/pframes/aggregate.tpl.tengo	/^	extraInputs := {}$/;"	c
fRules	./src/workdir/save.lib.tengo	/^	fRules := {}$/;"	c
fail	./src/validation.lib.tengo	/^fail := func(keyPath, msg, ...args) {$/;"	f
field	./src/smart.lib.tengo	/^field = func(f) {$/;"	f
fieldId	./src/ll.lib.tengo	/^fieldId := func(resourceId, fieldName) {$/;"	f
fileSets	./src/workdir/index.lib.tengo	/^	fileSets := {}$/;"	c
fileSetsContent	./src/workdir/index.lib.tengo	/^	fileSetsContent := {}$/;"	c
fileSetsContentMatch	./src/workdir/save.tpl.tengo	/^	fileSetsContentMatch := {}$/;"	c
fileSetsContentResult	./src/workdir/save.tpl.tengo	/^	fileSetsContentResult := {}$/;"	c
fileSetsContentToSave	./src/exec/index.lib.tengo	/^	fileSetsContentToSave := {}$/;"	c
fileSetsMatch	./src/workdir/save.tpl.tengo	/^	fileSetsMatch := {}$/;"	c
fileSetsResult	./src/workdir/save.tpl.tengo	/^	fileSetsResult := {}$/;"	c
fileSetsToSave	./src/exec/index.lib.tengo	/^	fileSetsToSave := {}$/;"	c
filepathCanonize	./src/ll.lib.tengo	/^filepathCanonize := func(...elem) {$/;"	f
filepathJoin	./src/ll.lib.tengo	/^filepathJoin := func(...elems) {$/;"	f
filepathRegexpJoin	./src/ll.lib.tengo	/^filepathRegexpJoin := func(...elems) {$/;"	f
files	./src/workdir/index.lib.tengo	/^	files := {}$/;"	c
filesContent	./src/workdir/index.lib.tengo	/^	filesContent := {}$/;"	c
filesContentToSave	./src/exec/index.lib.tengo	/^	filesContentToSave := {}$/;"	c
filesInWd	./src/workdir/proc.lib.tengo	/^		filesInWd: func() {$/;"	f
filesToAdd	./src/exec/index.lib.tengo	/^	filesToAdd := {}$/;"	c
filesToSave	./src/exec/index.lib.tengo	/^	filesToSave := {}$/;"	c
filesToStream	./src/exec/index.lib.tengo	/^	filesToStream := {}$/;"	c
filesToWrite	./src/exec/index.lib.tengo	/^	filesToWrite := {}$/;"	c
filter	./src/maps.lib.tengo	/^filter := func(map, predicateFn) {$/;"	f
filter	./src/slices.lib.tengo	/^filter := func(slice, predicateFn) {$/;"	f
filterKeys	./src/maps.lib.tengo	/^filterKeys := func(map, predicateFnK) {$/;"	f
filterKeysValues	./src/maps.lib.tengo	/^filterKeysValues := func(map, predicateFnK, predicateFnV) {$/;"	f
filterValues	./src/maps.lib.tengo	/^filterValues := func(map, predicateFnV) {$/;"	f
findElement	./src/slices.lib.tengo	/^findElement := func(slice, element) {$/;"	f
fromMapKeys	./src/sets.lib.tengo	/^fromMapKeys := func(map) {$/;"	f
fromSet	./src/slices.lib.tengo	/^fromSet := func(set) {$/;"	f
fromSlice	./src/sets.lib.tengo	/^fromSlice := func(slice) {$/;"	f
fromStrict	./src/ll.lib.tengo	/^fromStrict := func(r) {$/;"	f
get	./src/smart.lib.tengo	/^		get: func(name) {$/;"	f
getAxesSpec	./src/pframes/xsv.lib.tengo	/^getAxesSpec := func(spec) {$/;"	f
getBasenameDirs	./src/path.lib.tengo	/^getBasenameDirs := func(path, ...sep) {$/;"	f
getColumn	./src/pframes/export-pframe.tpl.tengo	/^	getColumn := func(name) {$/;"	f
getContentSaveRule	./src/workdir/save.lib.tengo	/^getContentSaveRule := func(fileName) {$/;"	f
getCtx	./src/ll.lib.tengo	/^getCtx := func() {$/;"	f
getCurrentTemplateRenderer	./src/ll.lib.tengo	/^getCurrentTemplateRenderer := func() {$/;"	f
getDataAsJson	./src/smart.lib.tengo	/^		getDataAsJson: func() {$/;"	f
getError	./src/smart.lib.tengo	/^		getError: func() {$/;"	f
getExecutorsList	./src/ll.lib.tengo	/^getExecutorsList := func() {$/;"	f
getExtension	./src/path.lib.tengo	/^getExtension := func(path, ...sep) {$/;"	f
getField	./src/smart.lib.tengo	/^		getField: func(name) {$/;"	f
getFile	./src/exec/index.lib.tengo	/^				getFile: func(fileName) {$/;"	f
getFileContent	./src/exec/index.lib.tengo	/^				getFileContent: func(fileName) {$/;"	f
getFileSaveRule	./src/workdir/save.lib.tengo	/^getFileSaveRule := func(fileName) {$/;"	f
getFileSet	./src/exec/index.lib.tengo	/^				getFileSet: func(fileSetName) {$/;"	f
getFileSetContent	./src/exec/index.lib.tengo	/^				getFileSetContent: func(fileSetName) {$/;"	f
getFileStream	./src/exec/index.lib.tengo	/^				getFileStream: func(fileName) {$/;"	f
getFutureField	./src/smart.lib.tengo	/^		getFutureField: func(name, fieldType) {$/;"	f
getFutureInputField	./src/smart.lib.tengo	/^		getFutureInputField: func(name) {$/;"	f
getFutureOutputField	./src/smart.lib.tengo	/^		getFutureOutputField: func(name) {$/;"	f
getKeys	./src/maps.lib.tengo	/^getKeys := func(map) {$/;"	f
getOps	./src/pframes/xsv.lib.tengo	/^getOps := func(...ops) {$/;"	f
getOutputField	./src/tpl/index.lib.tengo	/^		getOutputField: func(name) {$/;"	f
getProcessorResult	./src/exec/index.lib.tengo	/^				getProcessorResult: func(procName) {$/;"	f
getProgress	./src/workdir/save.lib.tengo	/^		getProgress: func() {$/;"	f
getSavedFile	./src/workdir/save.lib.tengo	/^		getSavedFile: func(fName) {$/;"	f
getSavedFileContent	./src/workdir/save.lib.tengo	/^		getSavedFileContent: func(fName) {$/;"	f
getSavedFiles	./src/workdir/save.lib.tengo	/^		getSavedFiles: func() {$/;"	f
getSavedFilesContent	./src/workdir/save.lib.tengo	/^		getSavedFilesContent: func() {$/;"	f
getStderrFile	./src/exec/index.lib.tengo	/^				getStderrFile: func() {$/;"	f
getStderrFileContent	./src/exec/index.lib.tengo	/^				getStderrFileContent: func() {$/;"	f
getStderrStream	./src/exec/index.lib.tengo	/^				getStderrStream: func() {$/;"	f
getStdoutFile	./src/exec/index.lib.tengo	/^				getStdoutFile: func() {$/;"	f
getStdoutFileContent	./src/exec/index.lib.tengo	/^				getStdoutFileContent: func() {$/;"	f
getStdoutStream	./src/exec/index.lib.tengo	/^				getStdoutStream: func() {$/;"	f
getValue	./src/smart.lib.tengo	/^		getValue: func() {$/;"	f
getValueAsJson	./src/smart.lib.tengo	/^		getValueAsJson: func() {$/;"	f
getWorkdirAfter	./src/workdir/save.lib.tengo	/^		getWorkdirAfter: func() {$/;"	f
groups	./src/pframes/aggregate.tpl.tengo	/^		groups := {}$/;"	c
hasElement	./src/sets.lib.tengo	/^hasElement := func(set, element) {$/;"	f
hasElement	./src/slices.lib.tengo	/^hasElement := func(slice, element) {$/;"	f
hasError	./src/smart.lib.tengo	/^		hasError: func() {$/;"	f
hasField	./src/smart.lib.tengo	/^		hasField: func(name) {$/;"	f
hasInput	./src/tpl/index.lib.tengo	/^		hasInput: func(name) {$/;"	f
hasInputField	./src/smart.lib.tengo	/^		hasInputField: func(name) {$/;"	f
hasOutputField	./src/smart.lib.tengo	/^		hasOutputField: func(name) {$/;"	f
importFile	./src/file.lib.tengo	/^importFile := func(importFileHandle) {$/;"	f
importFile	./src/pframes/xsv.lib.tengo	/^importFile := func(xsvFile, xsvType, spec, ...ops) {$/;"	f
importFileMap	./src/pframes/xsv.lib.tengo	/^importFileMap := func(xsvMap, xsvType, spec, ...ops) {$/;"	f
importSoftware	./src/ll.lib.tengo	/^importSoftware := func(swName) {$/;"	f
importTemplate	./src/ll.lib.tengo	/^importTemplate := func(tplName) {$/;"	f
inHeavyQueue	./src/exec/index.lib.tengo	/^		inHeavyQueue: func() {$/;"	f
inQueue	./src/exec/runcmd.lib.tengo	/^		inQueue: func(queueName) {$/;"	f
inUiQueue	./src/exec/index.lib.tengo	/^		inUiQueue: func() {$/;"	f
info	./src/smart.lib.tengo	/^		info: func() {$/;"	f
inherit	./src/oop.lib.tengo	/^inherit := func(super, self) {$/;"	f
inputs	./src/smart.lib.tengo	/^		inputs: func() {$/;"	f
inputs	./src/tpl/index.lib.tengo	/^		inputs: func() {$/;"	f
inputs	./src/workdir/index.lib.tengo	/^			inputs := {$/;"	c
isAnyMapResource	./src/smart.lib.tengo	/^isAnyMapResource := func(r) {$/;"	f
isEphMapResource	./src/smart.lib.tengo	/^isEphMapResource := func(r) {$/;"	f
isEphemeral	./src/tpl/index.lib.tengo	/^		isEphemeral: func() {$/;"	f
isErrorSet	./src/smart.lib.tengo	/^		isErrorSet: func() {$/;"	f
isFail	./src/validation.lib.tengo	/^isFail := func(r) {$/;"	f
isField	./src/smart.lib.tengo	/^isField := func(f) {$/;"	f
isFieldId	./src/smart.lib.tengo	/^isFieldId := func(val) {$/;"	f
isInitializing	./src/ll.lib.tengo	/^isInitializing := func() {$/;"	f
isJsonResource	./src/smart.lib.tengo	/^isJsonResource := func(r) {$/;"	f
isLockedEphMapResource	./src/smart.lib.tengo	/^isLockedEphMapResource := func(r) {$/;"	f
isMap	./src/ll.lib.tengo	/^isMap := func(obj) {$/;"	f
isMapResource	./src/smart.lib.tengo	/^isMapResource := func(r) {$/;"	f
isNR	./src/workflow/bquery.lib.tengo	/^				isNR := func(r) {$/;"	f
isReady	./src/smart.lib.tengo	/^		isReady: func() {$/;"	f
isReference	./src/smart.lib.tengo	/^isReference := func(f) {$/;"	f
isResource	./src/smart.lib.tengo	/^isResource := func(f) {$/;"	f
isSet	./src/smart.lib.tengo	/^		isSet: func() {$/;"	f
isStrict	./src/ll.lib.tengo	/^isStrict := func(obj) {$/;"	f
isSuccess	./src/validation.lib.tengo	/^isSuccess := func(r) {$/;"	f
isValid	./src/validation.lib.tengo	/^isValid := func(js, schema) {$/;"	f
isValueSet	./src/smart.lib.tengo	/^		isValueSet: func() {$/;"	f
join	./src/path.lib.tengo	/^join := func(...elems) {$/;"	f
js	./src/validation.test.tengo	/^	js := {$/;"	c
key	./src/tpl/test/json-keys.tpl.tengo	/^key := "{\\"a\\":\\"b\\"}"$/;"	c
kvGet	./src/smart.lib.tengo	/^		kvGet: func(key) {$/;"	f
kvGetAsJson	./src/smart.lib.tengo	/^		kvGetAsJson: func(key) {$/;"	f
kvGetAsString	./src/smart.lib.tengo	/^		kvGetAsString: func(key) {$/;"	f
kvSet	./src/smart.lib.tengo	/^		kvSet: func(key, value) {$/;"	f
kvSetJson	./src/smart.lib.tengo	/^		kvSetJson: func(key, value) {$/;"	f
length	./src/slices.lib.tengo	/^length := func(slice) {$/;"	f
lock	./src/smart.lib.tengo	/^		lock: func() {$/;"	f
lockAndBuild	./src/smart.lib.tengo	/^		lockAndBuild: func() {$/;"	f
lockInputs	./src/smart.lib.tengo	/^		lockInputs: func() {$/;"	f
lockInputsAndBuild	./src/smart.lib.tengo	/^		lockInputsAndBuild: func() {$/;"	f
lockOutputs	./src/smart.lib.tengo	/^		lockOutputs: func() {$/;"	f
lockOutputsAndBuild	./src/smart.lib.tengo	/^		lockOutputsAndBuild: func() {$/;"	f
map	./src/maps.lib.tengo	/^map := func(map, fn) {$/;"	f
map	./src/sets.lib.tengo	/^map := func(set, fn) {$/;"	f
map	./src/slices.lib.tengo	/^map := func(slice, fn) {$/;"	f
mapBuilder	./src/smart.lib.tengo	/^mapBuilder = func() {$/;"	f
mapKeys	./src/maps.lib.tengo	/^mapKeys := func(map, fnK) {$/;"	f
mapValues	./src/maps.lib.tengo	/^mapValues := func(map, fnV) {$/;"	f
matcher	./src/tpl/state-await.lib.tengo	/^				matcher = func(field) {$/;"	f
mkDir	./src/exec/index.lib.tengo	/^		mkDir: func(dir) {$/;"	f
mkDir	./src/workdir/index.lib.tengo	/^		mkDir: func(dir) {$/;"	f
nErrorLines	./src/exec/index.lib.tengo	/^		nErrorLines: func(lines) {$/;"	f
nErrorLines	./src/exec/runcmd.lib.tengo	/^		nErrorLines: func(number) {$/;"	f
name	./src/smart.lib.tengo	/^		name: func() {$/;"	f
newM	./src/maps.lib.tengo	/^	newM := {}$/;"	c
newPrevSubscriptions	./src/tpl/state-await.lib.tengo	/^	newPrevSubscriptions := {}$/;"	c
o	./src/pframes/xsv.lib.tengo	/^	o := { dataOnly: false }$/;"	c
ops	./src/test/resolve/wf_no_res.tpl.tengo	/^	ops := {$/;"	c
ops	./src/validation.lib.tengo	/^	ops := {}$/;"	c
ops	./src/workflow/bquery.lib.tengo	/^	ops := {}$/;"	c
ops	./src/workflow/test/exports.wf2.tpl.tengo	/^	ops := {$/;"	c
options	./src/exec/runcmd.lib.tengo	/^			options := {$/;"	c
output	./src/render.lib.tengo	/^		output: func(name, ...cache) {$/;"	f
outputMaps	./src/pframes/aggregate.tpl.tengo	/^		outputMaps := {}$/;"	c
outputs	./src/pframes/import-dir.tpl.tengo	/^	outputs := {}$/;"	c
outputs	./src/smart.lib.tengo	/^		outputs: func() {$/;"	f
outputs	./src/test/import-template/workflow.tpl.tengo	/^	outputs := {$/;"	c
outputs	./src/workflow/test/exports.wf1.tpl.tengo	/^	outputs := {}$/;"	c
panic	./src/ll.lib.tengo	/^panic := func(msg, ...args) {$/;"	f
parse	./src/workflow/bquery.lib.tengo	/^		parse: func(resource, parser)  {$/;"	f
parseUrl	./src/ll.lib.tengo	/^parseUrl := func(url) {$/;"	f
prefixed	./src/workflow/index.lib.tengo	/^		prefixed := {}$/;"	c
prepare	./src/tpl/index.lib.tengo	/^		prepare : func(codeFn) {$/;"	f
prepare	./src/workflow/index.lib.tengo	/^prepare := func(cb) {$/;"	f
preparedMapResource	./src/tpl/index.lib.tengo	/^		preparedMapResource: func() {$/;"	f
preps	./src/workdir/proc.lib.tengo	/^				preps := {}$/;"	c
print	./src/ll.lib.tengo	/^print := func(txt, ...args) {$/;"	f
printErrStreamToStdout	./src/exec/index.lib.tengo	/^		printErrStreamToStdout: func() {$/;"	f
proc	./src/workdir/proc.lib.tengo	/^proc := func() {$/;"	f
processWorkdir	./src/exec/index.lib.tengo	/^		processWorkdir: func(name, tpl, tplArgs) {$/;"	f
pssKey	./src/tpl/state-await.lib.tengo	/^	pssKey := "await:" + string(rootField.id.ResourceID) + ":" + rootField.id.Name$/;"	c
purifySpec	./src/pframes/xsv.lib.tengo	/^purifySpec := func(spec) {$/;"	f
query	./src/workflow/index.lib.tengo	/^query := func(spec, ...options) {$/;"	f
query	./src/workflow/test/exports.wf2.tpl.tengo	/^	query := {$/;"	c
queue	./src/exec/runcmd.lib.tengo	/^	queue := ""$/;"	c
r	./src/workdir/save.tpl.tengo	/^		r := {}$/;"	c
r	./src/workflow/bquery.lib.tengo	/^					r  := {$/;"	c
rData	./src/pframes/import-dir.tpl.tengo	/^		rData := { partitionKeyLength: dInfo.partitionKeyLength }$/;"	c
rawInputs	./src/tpl/index.lib.tengo	/^		rawInputs: func() {$/;"	f
readFiles	./src/workdir/proc.lib.tengo	/^		readFiles: func(cb) {$/;"	f
reduce	./src/slices.lib.tengo	/^reduce := func(slice, fn) {$/;"	f
reference	./src/validation.lib.tengo	/^reference := func(elem, keyPath, stack) {$/;"	f
regexpJoin	./src/path.lib.tengo	/^regexpJoin := func(...elems) {$/;"	f
registerUnmarshaller	./src/tpl/index.lib.tengo	/^		registerUnmarshaller: func(preproc) {$/;"	f
removeElement	./src/slices.lib.tengo	/^removeElement := func(slice, i) {$/;"	f
renderInputs	./src/pframes/aggregate.tpl.tengo	/^			renderInputs := {}$/;"	c
renderInputs	./src/pframes/ll.lib.tengo	/^	renderInputs := {$/;"	c
renderPrepare	./src/tpl/index.lib.tengo	/^		renderPrepare: func() {$/;"	f
renderer	./src/tpl/index.lib.tengo	/^		renderer: func() {$/;"	f
res	./src/tpl/test/await-state-wildcard.tpl.tengo	/^	res := ""$/;"	c
resolve	./src/workflow/bquery.lib.tengo	/^resolve := func(ref, ctx, ...options) {$/;"	f
resolve	./src/workflow/index.lib.tengo	/^resolve := func(ref, ...options) {$/;"	f
resource	./src/smart.lib.tengo	/^		resource: func() {$/;"	f
resource	./src/smart.lib.tengo	/^resource = func(r) {$/;"	f
resource	./src/validation.lib.tengo	/^resource := func(...args) {$/;"	f
resourceBuilder	./src/smart.lib.tengo	/^resourceBuilder = func(r) {$/;"	f
resourceType	./src/validation.lib.tengo	/^resourceType := func(rt) {$/;"	f
resourceTypesEqual	./src/smart.lib.tengo	/^resourceTypesEqual := func(rType1, rType2) {$/;"	f
result	./src/exec/test/run_cat_on_file.tpl.tengo	/^	result := {$/;"	c
result	./src/exec/test/run_cat_on_value.tpl.tengo	/^	result := {$/;"	c
result	./src/exec/test/run_echo_to_stream.tpl.tengo	/^	result := {$/;"	c
result	./src/exec/test/run_echo_to_value.tpl.tengo	/^	result := {$/;"	c
result	./src/pframes/export-multiple-pcolumns.tpl.tengo	/^	result := {}$/;"	c
result	./src/pframes/import-xsv-map.tpl.tengo	/^			result := {}$/;"	c
result	./src/pframes/import-xsv-map.tpl.tengo	/^	result := {}$/;"	c
result	./src/pframes/xsv.lib.tengo	/^	result := {}$/;"	c
result	./src/test/import-template/pure-template.tpl.tengo	/^	result := {$/;"	c
result	./src/test/resolve/eph-template.tpl.tengo	/^	result := {$/;"	c
result	./src/test/resolve/pure-template.tpl.tengo	/^	result := {$/;"	c
result	./src/test/software/software-info.tpl.tengo	/^	result := {$/;"	c
result	./src/tpl/index.lib.tengo	/^		result := {}$/;"	c
result	./src/tpl/test/map-outputs.tpl.tengo	/^	result := {$/;"	c
result	./src/tpl/test/simple1.tpl.tengo	/^	result := {$/;"	c
result	./src/workflow/bquery.lib.tengo	/^				result  := {$/;"	c
resultUnmarshaller	./src/workflow/bquery.lib.tengo	/^resultUnmarshaller := func() {$/;"	f
results	./src/tpl/test/json-keys.tpl.tengo	/^	results := {}$/;"	c
routeDelegate	./src/tpl/index.lib.tengo	/^		routeDelegate: func(tpl, extraInputs, outputs) {$/;"	f
routeEph	./src/tpl/index.lib.tengo	/^		routeEph: func(bodyFn) {$/;"	f
routePure	./src/tpl/index.lib.tengo	/^		routePure: func(bodyFn){$/;"	f
run	./src/exec/index.lib.tengo	/^		run: func() {$/;"	f
safeAppend	./src/slices.lib.tengo	/^safeAppend := func(slice, ...toAppend) {$/;"	f
save	./src/workdir/index.lib.tengo	/^save := func(workdir) {$/;"	f
saveFile	./src/exec/index.lib.tengo	/^		saveFile: func(fileName) {$/;"	f
saveFile	./src/workdir/index.lib.tengo	/^		saveFile: func(fileName) {$/;"	f
saveFile	./src/workdir/proc.lib.tengo	/^		saveFile: func(fName) {$/;"	f
saveFile	./src/workdir/save.lib.tengo	/^		saveFile: func(fName) {$/;"	f
saveFileContent	./src/exec/index.lib.tengo	/^		saveFileContent: func(fileName) {$/;"	f
saveFileContent	./src/workdir/index.lib.tengo	/^		saveFileContent: func(fileName) {$/;"	f
saveFileContent	./src/workdir/proc.lib.tengo	/^		saveFileContent: func(fName) {$/;"	f
saveFileContent	./src/workdir/save.lib.tengo	/^		saveFileContent: func(fName) {$/;"	f
saveFileSet	./src/exec/index.lib.tengo	/^		saveFileSet: func(name, regex) {$/;"	f
saveFileSet	./src/workdir/index.lib.tengo	/^		saveFileSet: func(name, regex) {$/;"	f
saveFileSetContent	./src/exec/index.lib.tengo	/^		saveFileSetContent: func(name, regex) {$/;"	f
saveFileSetContent	./src/workdir/index.lib.tengo	/^		saveFileSetContent: func(name, regex) {$/;"	f
saveStderrContent	./src/exec/index.lib.tengo	/^		saveStderrContent: func() {$/;"	f
saveStdoutContent	./src/exec/index.lib.tengo	/^		saveStdoutContent: func() {$/;"	f
schema	./src/validation.test.tengo	/^	schema := {$/;"	c
schemaRules	./src/validation.lib.tengo	/^	schemaRules := {}$/;"	c
schemaTags	./src/validation.lib.tengo	/^	schemaTags := {}$/;"	c
self	./src/tpl/index.lib.tengo	/^	self := func(resource) { return _unmarshal(resource, preprocessors) }$/;"	f
set	./src/sets.lib.tengo	/^	set := {}$/;"	c
set	./src/smart.lib.tengo	/^		set: func(reference) {$/;"	f
setJson	./src/smart.lib.tengo	/^		setJson: func(value) {$/;"	f
setMap	./src/smart.lib.tengo	/^		setMap: func(keyToValue) {$/;"	f
setOutputs	./src/tpl/index.lib.tengo	/^		setOutputs : func(resultMap) {$/;"	f
setPreRun	./src/workflow/index.lib.tengo	/^setPreRun := func(tplId) {$/;"	f
setRefOrJson	./src/smart.lib.tengo	/^		setRefOrJson: func(refOrJson) {$/;"	f
slice	./src/slices.lib.tengo	/^slice := func(array, from, to) {$/;"	f
software	./src/exec/index.lib.tengo	/^		software: func(software) {$/;"	f
sortByFn	./src/slices.lib.tengo	/^sortByFn := func(notSortedSlice, fn) {$/;"	f
spec	./src/workflow/bquery.lib.tengo	/^	spec := {$/;"	c
split	./src/path.lib.tengo	/^split := func(path, ...sep) {$/;"	f
stderr	./src/exec/index.lib.tengo	/^	stderr := "stderr.txt"$/;"	c
stderr	./src/exec/runcmd.lib.tengo	/^		stderr: func(fileName) {$/;"	f
stderr	./src/exec/runcmd.lib.tengo	/^	stderr := "stderr.txt"$/;"	c
stderrFileName	./src/exec/index.lib.tengo	/^		stderrFileName: func(fileName) {$/;"	f
stdout	./src/exec/index.lib.tengo	/^	stdout := "stdout.txt"$/;"	c
stdout	./src/exec/runcmd.lib.tengo	/^		stdout: func(fileName) {$/;"	f
stdout	./src/exec/runcmd.lib.tengo	/^	stdout := "stdout.txt"$/;"	c
stdoutFileName	./src/exec/index.lib.tengo	/^		stdoutFileName: func(fileName) {$/;"	f
streamFile	./src/exec/index.lib.tengo	/^		streamFile: func(fileName) {$/;"	f
structBuilder	./src/smart.lib.tengo	/^structBuilder = func(resourceType, ...data) {$/;"	f
subscriptions	./src/tpl/state-await.lib.tengo	/^	subscriptions := {}$/;"	c
success	./src/validation.lib.tengo	/^success := { result: true }$/;"	c
tags	./src/validation.lib.tengo	/^	tags := {}$/;"	c
templateId	./src/tpl/index.lib.tengo	/^		templateId: func() {$/;"	f
toStrict	./src/ll.lib.tengo	/^toStrict := func(r) {$/;"	f
tpl	./src/tpl/index.lib.tengo	/^tpl := func() {$/;"	f
tplInputs	./src/exec/exec.tpl.tengo	/^		tplInputs := {$/;"	c
tplOutputs	./src/tpl/index.lib.tengo	/^			tplOutputs := {}$/;"	c
tplOutputs	./src/workflow/index.lib.tengo	/^	tplOutputs := {}$/;"	c
trimPrefix	./src/path.lib.tengo	/^trimPrefix := func(path, prefix) {$/;"	f
validateInputs	./src/tpl/index.lib.tengo	/^		validateInputs: func(schema) {$/;"	f
values	./src/workdir/index.lib.tengo	/^	values := {}$/;"	c
wdAfterReadFiles	./src/workdir/proc.lib.tengo	/^		wdAfterReadFiles: func() {$/;"	f
wdBefore	./src/workdir/proc.lib.tengo	/^		wdBefore: func() {$/;"	f
wdFinalBuilder	./src/workdir/proc.lib.tengo	/^		wdFinalBuilder: func() {$/;"	f
wdProcessors	./src/exec/index.lib.tengo	/^	wdProcessors := {}$/;"	c
wdProcessorsResults	./src/exec/exec.tpl.tengo	/^	wdProcessorsResults := {}$/;"	c
writeFile	./src/exec/index.lib.tengo	/^		writeFile: func(fileName, data) {$/;"	f
writeFile	./src/workdir/index.lib.tengo	/^		writeFile: func(fileName, contentRef) {$/;"	f
writeFiles	./src/workdir/index.lib.tengo	/^		writeFiles: func(contentRefMap) {$/;"	f
xsvColumnId	./src/pframes/util.lib.tengo	/^xsvColumnId := func(c) {$/;"	f
xsvFileName	./src/pframes/xsv.lib.tengo	/^	xsvFileName := "file." + xsvType$/;"	c
