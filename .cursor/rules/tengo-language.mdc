---
description: 
globs: *.tengo
alwaysApply: false
---

# Tengo Language

- Tengo is a small, dynamic script language for Go.
- Code example:
<tengo>
/* The Tengo Language */
fmt := import("fmt")

each := func(seq, fn) {
  for x in seq { fn(x) }
}

sum := func(init, seq) {
  each(seq, func(x) { init += x })
  return init
}

fmt.println(sum(0, [1, 2, 3]))   // "6"
fmt.println(sum("", [1, 2, 3]))  // "123"
</tengo>
- Optional parameters are moduled as varargs, like this
<tengo>
formatGreeting := func(name, ...greeting) {
  ll.assert(len(greeting) <= 1, "too many arguments") // optional assertion
  message := "Hello"
  if len(greeting) == 1 {
    message = greeting[0]
  }
  
  return message + ", " + name
}
</tengo>
- Always find and read all the types and functions you are going to use before implementing what you were asked for
- Errors are thrown like this: ll.panic("The error message %s, %s.", param1, param2)
- Common way how to create objects is the following:
<tengo>
privateField := []
res := undefined
helper1 := func() {
  // can use res to call methods
}
helper2 := func() {
  // can use res to call methods
  // can call helper1
}
res = {
  method: func() {
    // can use res to call other methods
    // can call helper1, helper2
  }
}
return res
</tengo>
- Minimal boilerplate for the tengo template
<tengo>
self := import(":tpl")

// Either define outputs (for pure templates)
self.defineOutputs("result")
// or define required input state conditions (for ephemeral templates)
self.awaitState("AllInputsSet")

// Define the main template body
self.body(func(inputs) {
    message := "Hello, " + inputs.name
    
    return {
        "result": message
    }
})
</tengo>
- Always try finding code examples for similar patterns
- Always place imports at the top of the file
- Prefer denser solutions if certain part of the code can be abstracted out into a function
- Find and read additional types, functions and examples of code if you understand that you dont have enough information
- Think really hard
